Option Strict Off
Imports iInterchange.iTankDepo.GatewayFramework
Imports iInterchange.iTankDepo.Data
Imports iInterchange.iTankDepo.Entities
Imports Microsoft.VisualBasic
Imports System.Text.RegularExpressions
Imports System.Configuration
Imports System.Data.SqlTypes
Imports System.Text
Imports System.Globalization
Imports System.Security.Cryptography

Public Class CommonUIs
    Dim objData As DataObjects
    Private dsCommon As CommonUIDataSet
    Private dtCommon As New DataTable

#Region "Declarations.."
    Private Const IdentitySelectQry = "SELECT MX_NO,MX_RFRNC_NO from MAX_SNO WHERE TBL_NM = @TBL_NM"
    Private Const MaxSnoSelectQry = "SELECT MX_NO from MAX_SNO WHERE TBL_NM = @TBL_NM"
    Private Const IdentityUpdateQry = "UPDATE MAX_SNO set MX_NO = MX_NO + 1 WHERE TBL_NM = @TBL_NM"
    'ReportParameters
    Private Const REPORT_PARAMETERSelectQueryByRPRT_ID As String = "SELECT PRMTR_ID,RPRT_ID,PRMTR_NAM,PRMTR_DSPLY_NAM,PRMTR_TYP,PRMTR_QRY,PRMTR_OPT,PRMTR_RL,REQ_DPT_ID,PRMTR_ORDR_CLMN,PRMTR_ORDR_TYP FROM REPORT_PARAMETER WHERE RPRT_ID=@RPRT_ID"
    Private Const ReportFieldsSelectQuery As String = "SELECT ACTVTY_ID,ACTVTY_NAM,PRCSS_ID,LST_QRY,LST_URL,LST_TTL,LST_CLCNT,PG_URL,PG_TTL,TBL_NAM,ORDR_NO,CRT_RGHT_BT,EDT_RGHT_BT,ACTV_BT,MNU_TXT,ACTVTY_RL,EXCPTN_BT FROM ACTIVITY WHERE ACTVTY_ID=@ACTVTY_ID"
    Private Const SelectEquipmentStatusQuery As String = "SELECT EQPMNT_STTS_ID,EQPMNT_STTS_CD,EQPMNT_STTS_DSCRPTN_VC FROM EQUIPMENT_STATUS WHERE DPT_ID=@DPT_ID AND EQPMNT_STTS_CD=@EQPMNT_STTS_CD"
    Private Const SelectMeasureIdQuery As String = "SELECT MSR_ID FROM MEASURE WHERE  DPT_ID=@DPT_ID AND MSR_CD=@MSR_CD"
    Private Const SelectEquipmentTypeQuery As String = "SELECT EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_TYP_DSCRPTN_VC FROM EQUIPMENT_TYPE WHERE DPT_ID=@DPT_ID AND EQPMNT_TYP_CD=@EQPMNT_TYP_CD"
    ' Private Const SelectEquipmentCodeQuery As String = "SELECT EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_CD_DSCRPTN_VC FROM EQUIPMENT_CODE WHERE DPT_ID=@DPT_ID AND EQPMNT_CD_CD=@EQPMNT_CD_CD"
    Private Const SelectEquipmentCodeQuery As String = "SELECT EQPMNT_TYP_ID,EQPMNT_CD_CD,EQPMNT_TYP_DSCRPTN_VC FROM EQUIPMENT_TYPE WHERE DPT_ID=@DPT_ID"
    Private Const SelectDepotDetailQuery As String = "SELECT DPT_ID,DPT_CD,DPT_NAM,CNTCT_PRSN_NAM,ADDRSS_LN1_VC,ADDRSS_LN2_VC,ADDRSS_LN3_VC,VT_NO,EML_ID,PHN_NO,FX_NO,CMPNY_LG_PTH,MDFD_BY,MDFD_DT FROM DEPOT WHERE DPT_ID=@DPT_ID"
    Private Const TrackingInsertQuery As String = "INSERT INTO TRACKING(TRCKNG_ID,CSTMR_ID,EQPMNT_NO,ACTVTY_NAM,EQPMNT_STTS_ID,ACTVTY_NO,ACTVTY_DT,ACTVTY_RMRKS,YRD_LCTN,GI_TRNSCTN_NO,INVCNG_PRTY_ID,RFRNC_NO,CRTD_BY,CRTD_DT,MDFD_BY,MDFD_DT,CNCLD_BY,CNCLD_DT,ADT_RMRKS,DPT_ID,RNTL_CSTMR_ID,RNTL_RFRNC_NO,EQPMNT_INFRMTN_RMRKS_VC,ADDTNL_CLNNG_BT)VALUES(@TRCKNG_ID,@CSTMR_ID,@EQPMNT_NO,@ACTVTY_NAM,@EQPMNT_STTS_ID,@ACTVTY_NO,@ACTVTY_DT,@ACTVTY_RMRKS,@YRD_LCTN,@GI_TRNSCTN_NO,@INVCNG_PRTY_ID,@RFRNC_NO,@CRTD_BY,@CRTD_DT,@MDFD_BY,@MDFD_DT,@CNCLD_BY,@CNCLD_DT,@ADT_RMRKS,@DPT_ID,@RNTL_CSTMR_ID,@RNTL_RFRNC_NO,@EQPMNT_INFRMTN_RMRKS_VC,@ADDTNL_CLNNG_BT)"
    Private Const Activity_StatusUpdateQuery As String = "UPDATE ACTIVITY_STATUS SET EQPMNT_STTS_ID=@EQPMNT_STTS_ID, CLNNG_INSPCTN_REF_NO=@CLNNG_INSPCTN_REF_NO, ACTVTY_DT=@ACTVTY_DT,YRD_LCTN=@YRD_LCTN, RMRKS_VC=@RMRKS_VC,SCHDL_DT=@SCHDL_DT WHERE ACTVTY_STTS_ID=@ACTVTY_STTS_ID AND DPT_ID=@DPT_ID"
    Private Const WF_ACTIVITY_SelectQueryByActivity As String = "SELECT WF_ACTIVITY_ID,WF_ACTIVITY_NAME,PENDING_STATUS,DEFAULT_STATUS,DEFAULT_STATUS_ID,EQUIPMENT_TYPE,EQUIPMENT_CODE,DPT_ID,ACTV_BT FROM WF_ACTIVITY WHERE ACTV_BT=@ACTV_BT AND DPT_ID=@DPT_ID AND WF_ACTIVITY_NAME=@WF_ACTIVITY_NAME"
    Private Const Tracking_SelectQueryByEquipmentNo As String = "SELECT TRCKNG_ID,CSTMR_ID,EQPMNT_NO,ACTVTY_NAM,EQPMNT_STTS_ID,ACTVTY_NO,ACTVTY_DT,ACTVTY_RMRKS,GI_TRNSCTN_NO,INVCNG_PRTY_ID,CRTD_BY,CRTD_DT,CNCLD_BY,CNCLD_DT,ADT_RMRKS,DPT_ID FROM TRACKING WHERE EQPMNT_NO=@EQPMNT_NO AND ACTVTY_NAM NOT IN ('Pre-Advice') AND ACTVTY_NAM <> @ACTVTY_NAM AND DPT_ID=@DPT_ID AND CNCLD_DT IS NULL ORDER BY TRCKNG_ID DESC"
    Private Const Service_PartnerInsertQuery As String = "INSERT INTO SERVICE_PARTNER(SRVC_PRTNR_ID,SRVC_PRTNR_ACTL_ID,SRVC_PRTNR_TYP_CD,DPT_ID)VALUES(@SRVC_PRTNR_ID,@SRVC_PRTNR_ACTL_ID,@SRVC_PRTNR_TYP_CD,@DPT_ID)"
    Private Const V_SERVICE_PARTNERSelectQuery As String = "SELECT SRVC_PRTNR_ACTL_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,SRVC_PRTNR_ID,SRVC_PRTNR_TYP_CD,DPT_ID,ACTV_BT FROM V_SERVICE_PARTNER WHERE DPT_ID=@DPT_ID AND SRVC_PRTNR_CD=@SRVC_PRTNR_CD"
    Private Const V_SERVICE_PARTNERByServicePartnerIDSelectQuery As String = "SELECT SRVC_PRTNR_ACTL_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,SRVC_PRTNR_ID,SRVC_PRTNR_TYP_CD,DPT_ID,ACTV_BT FROM V_SERVICE_PARTNER WHERE DPT_ID=@DPT_ID AND SRVC_PRTNR_ACTL_ID=@SRVC_PRTNR_ACTL_ID"
    Private Const TrackingUpdateQueryWithDateAndRemarks As String = "UPDATE TRACKING SET ACTVTY_DT=@ACTVTY_DT,RFRNC_NO=@RFRNC_NO, ACTVTY_RMRKS=@ACTVTY_RMRKS, MDFD_BY=@MDFD_BY, MDFD_DT=@MDFD_DT,EQPMNT_INFRMTN_RMRKS_VC=@EQPMNT_INFRMTN_RMRKS_VC WHERE ACTVTY_NAM=@ACTVTY_NAM AND DPT_ID=@DPT_ID AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO AND EQPMNT_NO=@EQPMNT_NO"
    Private Const TrackingUpdateQueryWithDateAndRemarksWithYard As String = "UPDATE TRACKING SET ACTVTY_DT=@ACTVTY_DT, RFRNC_NO=@RFRNC_NO,ACTVTY_RMRKS=@ACTVTY_RMRKS, YRD_LCTN=@YRD_LCTN, MDFD_BY=@MDFD_BY, MDFD_DT=@MDFD_DT, EQPMNT_INFRMTN_RMRKS_VC=@EQPMNT_INFRMTN_RMRKS_VC WHERE ACTVTY_NAM=@ACTVTY_NAM AND DPT_ID=@DPT_ID AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO AND EQPMNT_NO=@EQPMNT_NO"
    Private Const AttachmentInsertQuery As String = "INSERT INTO ATTACHMENT(ATTCHMNT_ID,RPR_ESTMT_ID,ACTVTY_NAM,RPR_ESTMT_NO,GI_TRNSCTN_NO,ATTCHMNT_PTH,ACTL_FL_NM,MDFD_BY,MDFD_DT,DPT_ID)VALUES(@ATTCHMNT_ID,@RPR_ESTMT_ID,@ACTVTY_NAM,@RPR_ESTMT_NO,@GI_TRNSCTN_NO,@ATTCHMNT_PTH,@ACTL_FL_NM,@MDFD_BY,@MDFD_DT,@DPT_ID)"
    Private Const AttachmentDeleteQuery As String = "DELETE FROM ATTACHMENT WHERE GI_TRNSCTN_NO=@GI_TRNSCTN_NO AND RPR_ESTMT_ID=@RPR_ESTMT_ID AND RPR_ESTMT_NO=@RPR_ESTMT_NO"
    Private Const V_DAR_ACTIVITY_STATUSSelectQuery As String = "SELECT ACTVTY_STTS_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,EIR_NO,GTOT_DT,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,CLNNG_DT,EQPMNT_STTS_ID,EQPMNT_STTS_CD,EQPMNT_STTS_DSCRPTN_VC,ACTVTY_NAM,ACTVTY_DT,GI_TRNSCTN_NO,INVC_GNRT_BT,GI_RF_NO,VHCL_NO,TRNSPRTR_CD,INSTRCTNS_VC,ACTV_BT,DPT_ID,DPT_CD,DPT_NAM,YRD_LCTN,CERT_GNRTD_FLG,RPR_CMPLTN_DT,CHMCL_NM,CLNNG_CERT_NO,CRT_GNRTD_FLG,INSPCTN_DT,RMRKS_VC,NEXT_TEST_DATE,ASRMRKS,RMRKS,NM,NY,CM,CY,REMARKS,NXT_TYP_ID,NXT_TYP_CD,AWP_FLAG,EIR_NO_OUT FROM V_DAR_ACTIVITY_STATUS  WHERE "
    'Private Const V_DAR_CUSTOMER_SUMMARYSelectQuery As String = "SELECT DISTINCT CSTMR_ID, CSTMR_CD, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=1 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE) AS IND,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=2 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS PHL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=3 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS ACN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (7,19) AND CLNNG_DT IS NOT NULL AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AWECLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (7,19) AND CLNNG_DT IS NULL AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AWE,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AAR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AUR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=18 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS ASR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (14) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS SRV,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=5 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL) AND (CSTMR_ID=VAS.CSTMR_ID) AND @WHERE)AS AVLCLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=11 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NOT NULL) AND (CSTMR_ID=VAS.CSTMR_ID) AND @WHERE)AS AVLCLNRPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS RPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =4 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS STO,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS AVL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS TOTAL, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND @OUTWHERE)AS INV_OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS INV_TOTAL FROM V_DAR_ACTIVITY_STATUS VAS WHERE "
    Private Const V_DAR_CUSTOMER_SUMMARYSelectQuery As String = "SELECT DISTINCT CSTMR_ID, CSTMR_CD, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=1 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE) AS IND,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=2 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS PHL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=3 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS ACN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (7,19) AND CLNNG_DT IS NOT NULL AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AWECLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (7,19) AND CLNNG_DT IS NULL AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AWE,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AAR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS AUR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=18 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS ASR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (14) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS SRV,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=5) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL AND INSPCTN_DT IS NULL) AND (CSTMR_ID=VAS.CSTMR_ID) AND @WHERE)AS AVLCLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=6 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL AND INSPCTN_DT IS NOT NULL) AND (CSTMR_ID=VAS.CSTMR_ID) AND @WHERE)AS AVLINS,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=11 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NOT NULL AND INSPCTN_DT IS NOT NULL) AND (CSTMR_ID=VAS.CSTMR_ID) AND @WHERE)AS INSRPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS RPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =4 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS STO,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS AVL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @OUTWHERE)AS OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS TOTAL, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND @OUTWHERE)AS INV_OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS INV_TOTAL FROM V_DAR_ACTIVITY_STATUS VAS WHERE  "
    'Private Const V_DAR_TYPE_SUMMARYSelectQuery As String = "SELECT DISTINCT EQPMNT_TYP_ID, EQPMNT_TYP_CD, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=1 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE) AS IND,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=2 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS PHL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=3 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS ACN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN(7,19) AND CLNNG_DT IS NOT NULL AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AWECLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN(7,19) AND CLNNG_DT IS NULL AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AWE,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AAR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AUR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=18 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS ASR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (14) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS SRV,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=5 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL) AND (EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID) AND @WHERE)AS AVLCLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=11 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NOT NULL) AND (EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID) AND @WHERE)AS AVLCLNRPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS RPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =4 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS STO,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS AVL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS TOTAL, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID =13 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND @OUTWHERE)AS INV_OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS INV_TOTAL FROM V_DAR_ACTIVITY_STATUS VAS WHERE "
    Private Const V_DAR_TYPE_SUMMARYSelectQuery As String = "SELECT DISTINCT EQPMNT_TYP_ID, EQPMNT_TYP_CD, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=1 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE) AS IND,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=2 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS PHL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=3 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS ACN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN(7,19) AND CLNNG_DT IS NOT NULL AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AWECLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN(7,19) AND CLNNG_DT IS NULL AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AWE,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AAR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS AUR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=18 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS ASR,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (14) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS SRV,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=5) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL AND INSPCTN_DT IS NULL) AND (EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID) AND @WHERE)AS AVLCLN,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=6 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NULL AND INSPCTN_DT IS NOT NULL) AND (EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID) AND @WHERE)AS AVLINS,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE (EQPMNT_STTS_ID=11 OR EQPMNT_STTS_ID=12) AND (CLNNG_DT IS NOT NULL AND RPR_CMPLTN_DT IS NOT NULL AND INSPCTN_DT IS NOT NULL) AND @WHERE)AS INSRPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS RPC,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =4 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS STO,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND CLNNG_DT IS NULL AND @WHERE)AS AVL,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @OUTWHERE)AS OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS TOTAL, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID =13 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND @OUTWHERE)AS INV_OUT,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID AND @WHERE)AS INV_TOTAL FROM V_DAR_ACTIVITY_STATUS VAS WHERE "
    'Private Const V_EQUIPMENT_ACTIVTY_DATESelectQuery As String = "SELECT CSTMR_ID,CSTMR_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,REPLACE(CONVERT(VARCHAR(11),ACTVTY_DT,106),' ','-') AS ACTVTY_DT,RECEIVED,RELEASED,HEATED,CLEANED,INSPECTED,REPAIRED,LEAKTESTED,ON_OFF_HIRE_SURVEYED,DPT_ID,TOTAL,OPENSTOCK,EquipmentInspected,AVAILABLE FROM V_EQUIPMENT_ACTIVTY_DATE "
    Private Const V_EQUIPMENT_ACTIVTY_DATESelectQuery As String = "SELECT CSTMR_ID,CSTMR_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,REPLACE(CONVERT(VARCHAR(11),ACTVTY_DT,106),' ','-') AS ACTVTY_DT,RECEIVED,RELEASED,HEATED,CLEANED,INSPECTED,REPAIRED,LEAKTESTED,ON_OFF_HIRE_SURVEYED,DPT_ID,TOTAL,OPENSTOCK,EquipmentInspected,AVAILABLE,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=E.DPT_ID )DPT_CD FROM V_EQUIPMENT_ACTIVTY_DATE E "
    Private Const V_ACTIVITY_STATUSSelectQuery As String = "SELECT ACTVTY_STTS_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,GTOT_DT,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,CLNNG_DT,EQPMNT_STTS_ID,EQPMNT_STTS_CD,ACTVTY_NAM,ACTVTY_DT,RMRKS_VC,GI_TRNSCTN_NO,INVC_GNRT_BT,GI_RF_NO,INSPCTN_DT,INSTRCTNS_VC,ACTV_BT,DPT_ID,DPT_CD,DPT_NAM,YRD_LCTN,FILTER_CODE,CERT_GNRTD_FLG,RPR_CMPLTN_DT,AWP_FLAG,EIR_NO FROM V_ACTIVITY_STATUS"
    Private Const VM_HEATINGSelectQuery As String = "SELECT HTNG_ID,HTNG_CD,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,HTNG_STRT_DT,HTNG_STRT_TM,HTNG_END_DT,HTNG_END_TM,HTNG_TMPRTR,TTL_HTN_PRD,MIN_HTNG_RT_NC,HRLY_CHRG_NC,TTL_RT_NC,BLLNG_FLG,GI_TRNSCTN_NO,DPT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,HTNG_STRT_DT_TM,HTNG_END_DT_TM,CSTMR_AMNT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,DPT_AMNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD FROM VM_HEATING V"
    Private Const VM_FINANCE_HEATINGSelectQuery As String = "SELECT HTNG_ID,HTNG_CD,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,HTNG_STRT_DT,HTNG_STRT_TM,HTNG_END_DT,HTNG_END_TM,HTNG_TMPRTR,TTL_HTN_PRD,MIN_HTNG_RT_NC,HRLY_CHRG_NC,TTL_RT_NC,BLLNG_FLG,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,HTNG_STRT_DT_TM,HTNG_END_DT_TM,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=H.DPT_ID)DPT_CD  FROM VM_FINANCE_HEATING H"
    'Private Const VM_FINANCE_CLEANINGSelectQuery As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT FROM VM_FINANCE_CLEANING "
    'For Adding Clenaing Ref No
    Private Const VM_FINANCE_CLEANINGSelectQuery As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT CLNNG_RFRNC_NO FROM CLEANING WHERE CLNNG_ID =V.CLNNG_ID)CLNNG_RFRNC_NO,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD,SLB_RT_BT FROM VM_FINANCE_CLEANING V"
    Private Const VM_FINANCE_REPAIRSelectQuery As String = "SELECT RPR_CHRG_ID,EQPMNT_NO,RPR_ESTMT_ID,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,ESTMT_NO,RPR_ESTMT_DT,RPR_APPRVL_DT,RPR_CMPLTN_DT,REPAIR_PERIOD,RPR_TYP_ID,RPR_TYP_CD,MTRL_CST_NC,LBR_CST_NC,RPR_TX_RT_NC,RPR_TX_AMNT_NC,TTL_CSTS_NC,RPR_APPRVL_AMNT_NC,BLLNG_FLG,YRD_LCTN,DPT_ID,CSTMR_ID,GI_TRNSCTN_NO,CSTMR_CD,CSTMR_NAM,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,CLN_CST_NC,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,ACTV_BT,TTL_SRV_TAX,TTL_EST_INCL_SRV_TAX,INVC_TYPE,LEAK_TEST,PTI,SURVEY,REPAIRS,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,APPRVL_RFRNC_NO,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,DPT_AMNT,CSTMR_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(CASE WHEN DPT_AMNT>@REPAIR_COST THEN COUNT_EQPMNT_NO ELSE 0 END)REPAIR_AMNT_GREATER,(CASE WHEN DPT_AMNT<=@REPAIR_COST THEN COUNT_EQPMNT_NO ELSE 0 END)REPAIR_AMNT_LESSER,ADDTNL_CLNNG_CHRG_NC,COUNT_EQPMNT_NO,INVCNG_PRTY_CRRNCY_ID,INVCNG_PRTY_CRRNCY_CD,AGNT_ID,AGNT_CD,AGNT_NAM,AGNT_CRRNCY_ID,AGNT_AMNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=R.DPT_ID)DPT_CD FROM VM_FINANCE_REPAIR R "
    'CR-006 [MMS]
    Private Const VM_TANK_TEST_DETAILSelectQuery As String = "SELECT EQPMNT_INFRMTN_ID,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_TYP_DSCRPTN_VC,CSTMR_ID,CSTMR_CD,CSTMR_NAM,MNFCTR_DT,TR_WGHT_NC,GRSS_WGHT_NC,CPCTY_NC,LST_TST_DT,NXT_TST_DT,VLDTY_PRD_TST_YRS,LST_TST_TYP_ID,LST_TST_TYP_CD,NXT_TST_TYP_ID,NXT_TST_TYP_CD,LST_SRVYR_NM,ACTV_BT,RNTL_BT,DPT_ID,DPT_CD,CRTD_BY,CRTD_DT,MDFD_BY,MDFD_DT,RMRKS_VC,TEST_STATUS,TEST_STATUS_ID,LAST_HYDRO,LAST_PNEUMATIC,NEXT_HYDRO,NEXT_PNEUMATIC,EXPIRED,TEST_DUE,GTN_DT,EQPMNT_STTS_CD FROM VM_TANK_TEST_DETAIL "
    Private Const VM_INVOICE_REGISTERSelectQuery As String = "SELECT INVC_BIN,INVC_NO,INVC_DT,INVC_FL_PTH,INVC_TYP,ACTVTY_TYP_ID,ACTVTY_TYP_CD,INVC_CRRNCY_ID,EXCHNG_RT_NC,BLLNG_TYP_ID,FRM_BLLNG_DT,TO_BLLNG_DT,TTL_CST_IN_CSTMR_CRRNCY_NC,TTL_CST_IN_INVC_CRRNCY_NC,HS_DPT_AMNT,HT_DPT_AMNT,CI_DPT_AMNT,RP_DPT_AMNT,MI_DPT_AMNT,TP_DPT_AMNT,RT_DPT_AMNT,BLLNG_FLG,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,CSTMR_CRRNCY_ID,CSTMR_CRRNCY_CD,DPT_CRRNCY_ID,DPT_CRRNCY_CD,DPT_ID,ACTV_BT,CRTD_BY,CRTD_DT,MDFD_BY,MDFD_DT,FL_NM,NO_OF_EQPMNT,CN_DPT_AMNT,IN_DPT_AMNT,AGNT_ID,AGNT_CD,AGNT_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=I.DPT_ID)DPT_CD FROM VM_INVOICE_REGISTER I "
    Private Const VM_EQUIPMENT_REPAIR_STATUSSelectQuery As String = "SELECT EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,GTN_DT,CSTMR_ID,CSTMR_CD,RPR_ESTMT_NO,PRDCT_ID,PRDCT_DSCRPTN_VC,GI_TRNSCTN_NO,RPR_TYP_ID,RPR_TYP_CD,RPR_ESTMT_DT,APPRVL_DT,CMPLTN_DT,REGULAR,PTI,LONGTERM,ONHIRE,OFFHIRE,OTHERS,DPT_ID,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID) DPT_CD FROM VM_EQUIPMENT_REPAIR_STATUS V "
    Private Const VM_PENDING_INVOICE_REGISTERSelectQuery As String = "SELECT TRCKNG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,ACTVTY_DT,ACTIVITY_NAME,PNDNG_INVC_TYP_CD,PNDNG_INVC_TYP_ID,GI_TRNSCTN_NO,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,RFRNC_NO,GTN_DT,DPT_ID,RFRNC_EIR_NO_1,DPT_AMNT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,INVOICING_PARTY,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,COUNT_EQPMNT_NO,AGNT_ID,AGNT_CD,AGNT_NAM,AGNT_AMNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=I.DPT_ID)DPT_CD FROM "
    Private Const VM_METRICS_HEATINGSelectQuery As String = "SELECT HTNG_ID,HTNG_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,HTNG_STRT_DT,HTNG_STRT_TM,HTNG_END_DT,HTNG_END_TM,HTNG_TMPRTR,TTL_HTN_PRD,MIN_HTNG_RT_NC,HRLY_CHRG_NC,GI_TRNSCTN_NO,DPT_ID,HTNG_STRT_DT_TM,HTNG_END_DT_TM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_METRICS_HEATING M "
    Private Const VM_METRICS_CLEANINGSelectQuery As String = "SELECT CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,DPT_ID,TOTAL_CLEANING_PERIOD,TOTAL_SCHEDULING_PERIOD,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=C.DPT_ID)DPT_CD FROM VM_METRICS_CLEANING C "
    Private Const VM_METRICS_REPAIRSelectQuery As String = "SELECT ACTVTY_STTS_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,CLNNG_DT,INSPCTN_DT,RPR_ESTMT_DT,RPR_APPRVL_DT,RPR_CMPLTN_DT,RPR_TYP_ID,RPR_TYP_CD,AVL_DT,AVAILABLE,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GI_TRNSCTN_NO,DPT_ID,ESTIMATE_PERIOD,REPAIR_PERIOD,NO_OF_ESTMT,COUNT_EQPMNT_NO,ESTIMATE_PERIOD_SMMRY,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_METRICS_REPAIR_CHARGE M WHERE "
    Private Const VM_METRICS_REPAIR_LABORSelectQuery As String = "SELECT RPR_ESTMT_ID,RPR_ESTMT_NO,GI_TRNSCTN_NO,RPR_ESTMT_DT,RPR_APPRVL_DT,RPR_CMPLTN_DT,ACTVTY_NM,ORGNL_ESTMN_DT,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,EQPMNT_CD_CD,GTN_DT,CSTMR_ID,CSTMR_CD,CSTMR_NAM,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,RPR_TYP_ID,RPR_TYP_CD,ESTMTD_MN_HRS,ACTL_MN_HR_NC,OVERTIME_MAN_HOURS,OVERTIME,DPT_ID,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_METRICS_REPAIR_LABOR M "
    Private Const REPAIRTYPECOUNT_SELECTQUERY As String = "SELECT COUNT(ENM_CD) FROM ENUM WHERE ENM_TYP_ID=19"
    Private Const VM_METRICS_OVERALLSelectQuery As String = "SELECT ACTVTY_STTS_ID,CSTMR_ID,CSTMR_CD,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,GTN_DT,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,EQPMNT_STTS_ID,EQPMNT_STTS_CD,ACTVTY_NAM,GI_TRNSCTN_NO,INVC_GNRT_BT,GI_RF_NO,ACTV_BT,DPT_ID,ACN_DT,CLNNG_DT,INSPCTN_DT,CLNNG_PRD,AWE_DT,AAR_DT,AUR_DT,RPR_CMPLTN_DT,SRV_DT,RPR_PRD,NO_OF_ESTMT,RPR_TYP_ID,RPR_TYP_CD,AVL_DT,GTOT_DT,TTL_PRD,RMRKS_VC,TTL_STRG_PRD,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_METRICS_OVERALL M WHERE "
    Private Const VM_METRICSRepairTypeSelectQuery As String = "SELECT RPR_ESTMT_ID,RPR_TYP_ID, EQPMNT_NO, GI_TRNSCTN_NO,RPR_TYP_CD,PRDCT_ID,CSTMR_ID,EQPMNT_TYP_ID,GTN_DT,RPR_ESTMT_DT,RPR_CMPLTN_DT, DPT_ID,INSPCTN_DT,SRV_DT,GTOT_DT,BLLNG_FLG FROM VM_REPAIR_TYPE WHERE"
    Private Const VM_TRANSPORTATIONSelectQuery As String = "SELECT TRNSPRTTN_CHRG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,RQST_NO,CSTMR_RF_NO,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_STT_ID,EQPMNT_STT_CD,RT_ID,RT_CD,RT_DSCRPTN_VC,PCK_UP_LCTN_CD,PCK_UP_LCTN_DSCRPTN_VC,DRP_OFF_LCTN_CD,DRP_OFF_LCTN_DSCRPTN_VC,ACTVTY_CD,ACTVTY_LCTN_CD,ACTVTY_LCTN_DSCRPTN_VC,JB_STRT_DT,JB_END_DT,TRP_RT_NC,ADDTNL_CHRG_RT_NC,TTL_RT_NC,DPT_AMNT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,EXCHNG_RT_PR_UNT_NC,DPT_ID,TRNSPRTTN_ID,EVNT_DT,TRP_TM,EMPTY_EQPMNT,FULL_EQPMNT,NO_OF_TRIPS,CSTMR_AMNT,EMPTY_SNGL_ID,EMPTY_SNGL_CD,TRNSPRTR_ID,TRNSPRTR_CD,TRNSPRTR_DSCRPTN,EMPTY_TRP_SPPLR_RT_NC,EMPTY_TRP_CSTMR_RT_NC,FLL_TRP_SPPLR_RT_NC,FLL_TRP_CSTMR_RT_NC,(CASE WHEN SPPLR_RT_NC IS NULL THEN 0 ELSE SPPLR_RT_NC END) AS SPPLR_RT_NC,(CASE WHEN CSTMR_RT_NC IS NULL THEN 0 ELSE CSTMR_RT_NC END) AS CSTMR_RT_NC,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=T.DPT_ID)DPT_CD FROM VM_TRANSPORTATION T"
    Private Const VM_FINANCE_TRANSPORTATIONSelectQuery As String = "SELECT TRNSPRTTN_CHRG_ID,TRNSPRTTN_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,CSTMR_AMNT,RT_ID,RT_CD,RT_DSCRPTN_VC,PCK_UP_LCTN_ID,PCK_UP_LCTN_CD,PCK_UP_LCTN_DSCRPTN_VC,DRP_OFF_LCTN_ID,DRP_OFF_LCTN_CD,DRP_OFF_LCTN_DSCRPTN_VC,ACTVTY_ID,ACTVTY_CD,ACTVTY_LCTN_ID,ACTVTY_LCTN_CD,ACTVTY_LCTN_DSCRPTN_VC,RQST_NO,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_STT_ID,EQPMNT_STT_CD,JB_STRT_DT,JB_END_DT,TRIP_TIME,CSTMR_RF_NO,EVNT_DT,TRP_RT_NC,TTL_RT_NC,ADDTNL_RT_NC,DPT_ID,BLLNG_FLG,DRFT_INVC_NO,FNL_INVC_NO,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,DPT_AMNT,CSTMR_AMNT,BILLED,BILLED_ID,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,NO_OF_TRIPS,EMPTY_SNGL_ID,EMPTY_SNGL_CD,WGHTMNT_AMNT_NC,TKN_AMNT_NC,RCHRGBL_CST_AMNT_NC,FNNC_CHRG_AMNT_NC,DTNTN_AMNT_NC,OTHR_CHRG_AMNT_NC,TRNSPRTR_ID,TRNSPRTR_CD,TRNSPRTR_DSCRPTN,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=R.DPT_ID)DPT_CD FROM VM_FINANCE_TRANSPORTATION R "
    Private Const VM_METRICS_TRANSPORTATIONSelectQuery As String = "SELECT TRNSPRTTN_CHRG_ID,TRNSPRTTN_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,RT_ID,RT_CD,RT_DSCRPTN_VC,PCK_UP_LCTN_ID,PCK_UP_LCTN_CD,PCK_UP_LCTN_DSCRPTN_VC,DRP_OFF_LCTN_ID,DRP_OFF_LCTN_CD,DRP_OFF_LCTN_DSCRPTN_VC,ACTVTY_ID,ACTVTY_CD,ACTVTY_LCTN_ID,ACTVTY_LCTN_CD,ACTVTY_LCTN_DSCRPTN_VC,RQST_NO,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_STT_ID,EQPMNT_STT_CD,JB_STRT_DT,JB_END_DT,TRIP_TIME,CSTMR_RF_NO,EVNT_DT,TRP_RT_NC,TTL_RT_NC,DPT_ID,BLLNG_FLG,DRFT_INVC_NO,FNL_INVC_NO,DPT_AMNT,NO_OF_TRIPS,EMPTY_SNGL_ID,EMPTY_SNGL_CD,TRNSPRTR_ID,TRNSPRTR_CD,TRNSPRTR_DSCRPTN,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_METRICS_TRANSPORTATION M "
    Private Const V_GATE_MOVES_DETAILSelectQuery As String = "SELECT CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_TYP_ID,EQPMNT_TYP_CD,@GATEINDATE AS Received,@GATEOUTDATE AS Released FROM V_DAR_ACTIVITY_STATUS WHERE "
    Private Const Audit_LogInsertQuery As String = "INSERT INTO AUDIT_LOG(ADT_LG_ID,EQPMNT_NO,RFRNC_NO,ACTVTY_NAM,ACTN_VC,ACTN_DT,OLD_VL,NEW_VL,RSN_VC,MDFD_BY,DPT_ID)VALUES(@ADT_LG_ID,@EQPMNT_NO,@RFRNC_NO,@ACTVTY_NAM,@ACTN_VC,@ACTN_DT,@OLD_VL,@NEW_VL,@RSN_VC,@MDFD_BY,@DPT_ID)"
    Private Const TransportationStatusUpdateQuery As String = "UPDATE TRANSPORTATION SET TRNSPRTTN_STTS_ID=(CASE WHEN (SELECT COUNT(TRNSPRTTN_DTL_ID) FROM TRANSPORTATION_DETAIL WHERE TRNSPRTTN_ID =@TRNSPRTTN_ID)=(SELECT COUNT(TRNSPRTTN_CHRG_ID) FROM TRANSPORTATION_CHARGE WHERE  TRNSPRTTN_ID =@TRNSPRTTN_ID AND BLLNG_FLG='B') THEN 91 WHEN (SELECT COUNT(TRNSPRTTN_CHRG_ID) FROM TRANSPORTATION_CHARGE WHERE  TRNSPRTTN_ID =@TRNSPRTTN_ID AND BLLNG_FLG='B') > 0 THEN 90 WHEN CNCLD_BY IS NOT NULL THEN 92 WHEN (SELECT COUNT(TRNSPRTTN_DTL_ID) FROM TRANSPORTATION_DETAIL WHERE TRNSPRTTN_ID =@TRNSPRTTN_ID AND JB_END_DT IS NOT NULL) > 0 THEN 95 ELSE 89 END) WHERE TRNSPRTTN_ID = @TRNSPRTTN_ID"
    Private Const VM_RENTALSelectQuery As String = "SELECT RNTL_CHRG_ID,EQPMNT_NO,RNTL_TYP,RFRNC_EIR_NO_1,RFRNC_EIR_NO_2,FRM_BLLNG_DT,TO_BLLNG_DT,HNDLNG_OT_NC,HNDLNG_IN_NC,ON_HR_SRVY_NC,OFF_HR_SRVY_NC,FR_DYS,NO_OF_DYS,RNTL_PR_DY_NC,RNTL_TX_RT_NC,TTL_CSTS_NC,RNTL_CNTN_FLG,BLLNG_FLG,IS_GT_IN_FLG,ACTV_BT,IS_LT_FLG,BLLNG_TLL_DT,YRD_LCTN,BLLNG_TYP_CD,CSTMR_ID,DPT_ID,GI_TRNSCTN_NO,RNTL_RFRNC_NO,DRFT_INVC_NO,FNL_INVC_NO,OTHR_CHRG_NC,EQPMNT_TYP_ID,EQPMNT_TYP_CD,PO_RFRNC_NO,CNTRCT_RFRNC_NO,ON_HR_DT,OFF_HR_DT,TTL_RNTL_PRD_DYS,CSTMR_CD,CSTMR_NAM,CSTMR_CRRNCY_ID,CSTMR_CRRNCY_CD,EXCHNG_RT_PR_UNT_NC,DPT_CRRNCY_CD,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=R.DPT_ID)DPT_CD FROM VM_RENTAL R "
    Private Const VM_RENTALDetailSelectQuery As String = "SELECT CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_TYP_ID,EQPMNT_TYP_CD,@ON_HR_DT AS Onhire,@OFF_HR_DT AS Offhire FROM VM_RENTAL "
    Private Const VM_RENTALKPIDetailSelectQuery As String = "SELECT EQPMNT_NO,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_TYP_ID,EQPMNT_TYP_CD,@OFF_HR_DT AS Offhire FROM VM_RENTAL "
    Private Const VM_FINANCE_RENTALSelectQuery As String = "SELECT EQPMNT_NO ,GI_TRNSCTN_NO, SUM(HNDLNG_IN_AMNT_NC) AS HNDLNG_IN_AMNT_NC, SUM(HNDLNG_OT_AMNT_NC) AS HNDLNG_OT_AMNT_NC,SUM(ON_HR_SRVY_NC)AS ON_HR_SRVY_NC, SUM(OFF_HR_SRVY_NC)AS OFF_HR_SRVY_NC,SUM(CSTMR_AMNT_NC)AS CSTMR_AMNT_NC,SUM(DPT_AMNT_NC)AS DPT_AMNT_NC, SUM(OTHR_CHRG_NC)AS OTHR_CHRG_NC, SUM(STRG_AMNT_NC)AS STRG_AMNT_NC,CSTMR_CD,CSTMR_NAM,CSTMR_CRRNCY_CD,EQPMNT_TYP_CD,PO_RFRNC_NO,CNTRCT_RFRNC_NO,ON_HR_DT,OFF_HR_DT,RNTL_PR_DY_NC,DPT_CD,DPT_CRRNCY_CD,STRG_DYS,INVC_DT,TO_BLLNG_DT,INVC_NO,TO_BLLNG_DT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=VFR.DPT_ID)DPT_CD  FROM VM_FINANCE_RENTAL VFR"
    Private Const VM_KPI_RENTALSelectQuery As String = "SELECT RNTL_CHRG_ID,EQPMNT_NO,RNTL_TYP,RFRNC_EIR_NO_1,RFRNC_EIR_NO_2,FRM_BLLNG_DT,TO_BLLNG_DT,HNDLNG_OT_NC,HNDLNG_IN_NC,ON_HR_SRVY_NC,OFF_HR_SRVY_NC,FR_DYS,NO_OF_DYS,RNTL_PR_DY_NC,RNTL_TX_RT_NC,TTL_CSTS_NC,RNTL_CNTN_FLG,BLLNG_FLG,IS_GT_IN_FLG,ACTV_BT,IS_LT_FLG,BLLNG_TLL_DT,YRD_LCTN,BLLNG_TYP_CD,CSTMR_ID,DPT_ID,GI_TRNSCTN_NO,RNTL_RFRNC_NO,DRFT_INVC_NO,FNL_INVC_NO,OTHR_CHRG_NC,EQPMNT_TYP_ID,EQPMNT_TYP_CD,PO_RFRNC_NO,CNTRCT_RFRNC_NO,ON_HR_DT,OFF_HR_DT,TTL_RNTL_PRD_DYS,CSTMR_CD,CSTMR_NAM,CSTMR_CRRNCY_ID,CSTMR_CRRNCY_CD,EXCHNG_RT_PR_UNT_NC,DPT_CRRNCY_CD,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=M.DPT_ID)DPT_CD FROM VM_KPI_RENTAL M "
    Private Const VM_TRANSPORTATION_PENDING_INV_REGSITERSelectQuery As String = "SELECT TRCKNG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,ACTVTY_DT,ACTIVITY_NAME,PNDNG_INVC_TYP_CD,PNDNG_INVC_TYP_ID,GI_TRNSCTN_NO,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,RFRNC_NO,GTN_DT,DPT_ID,RFRNC_EIR_NO_1,DPT_AMNT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,INVOICING_PARTY,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,COUNT_EQPMNT_NO,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=T.DPT_ID)DPT_CD FROM VM_TRANSPORTATION_PENDING_INV_REGSITER T"
    Private Const VM_ONHIREOFFHIRE_PENDING_INV_REGSITERSelectQuery As String = "SELECT TRCKNG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,ACTVTY_DT,ACTIVITY_NAME,PNDNG_INVC_TYP_CD,PNDNG_INVC_TYP_ID,GI_TRNSCTN_NO,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,RFRNC_NO,GTN_DT,DPT_ID,RFRNC_EIR_NO_1,DPT_AMNT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,INVOICING_PARTY,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,COUNT_EQPMNT_NO,DPT_CD FROM VM_ONHIREOFFHIRE_PENDING_INV_REGSITER"
    Private Const VM_RENTALCHARGE_PENDING_INV_REGSITERSelectQuery As String = "SELECT TRCKNG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,ACTVTY_DT,ACTIVITY_NAME,PNDNG_INVC_TYP_CD,PNDNG_INVC_TYP_ID,GI_TRNSCTN_NO,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,RFRNC_NO,GTN_DT,DPT_ID,RFRNC_EIR_NO_1,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,INVOICING_PARTY,SRVC_PRTNR_ID,FRM_BLLNG_DT,TO_BLLNG_DT,BLLNG_TLL_DT,EXCHNG_RT_PR_UNT_NC,RNTL_PR_DY_NC,FROM_BILLING_DATE,TO_BILLING_DATE,RNTL_DYS,DPT_AMNT,CSTMR_AMNT,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,COUNT_EQPMNT_NO,DPT_CD FROM VM_RENTALCHARGE_PENDING_INV_REGSITER"
    Private Const VM_STORAGECHARGE_PENDING_INV_REGSITERSelectQuery As String = "SELECT TRCKNG_ID,CSTMR_ID,CSTMR_CD,CSTMR_NAM,EQPMNT_NO,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_ID,ACTVTY_DT,ACTIVITY_NAME,PNDNG_INVC_TYP_CD,PNDNG_INVC_TYP_ID,GI_TRNSCTN_NO,INVCNG_PRTY_ID,INVCNG_PRTY_CD,INVCNG_PRTY_NM,RFRNC_NO,GTN_DT,DPT_ID,RFRNC_EIR_NO_1,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,INVOICING_PARTY,SRVC_PRTNR_ID,FRM_BLLNG_DT,TO_BLLNG_DT,BLLNG_TLL_DT,EXCHNG_RT_PR_UNT_NC,FROM_BILLING_DATE,TO_BILLING_DATE,FR_DYS,DPT_AMNT,CSTMR_AMNT,NO_OF_DYS,IS_LT_FLG,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=S.DPT_ID)DPT_CD,COUNT_EQPMNT_NO FROM VM_STORAGECHARGE_PENDING_INV_REGSITER S"
    Private Const VM_FINANCE_HandlingAndStorageSelectQuery As String = "SELECT EQPMNT_NO,CSTMR_ID,AGNT_ID,CSTMR_CD,AGNT_CD,CSTMR_NAM,AGNT_NAM,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_TYP_DSCRPTN_VC,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SUM(STRG_DYS) AS STRG_DYS, SUM(STRG_DYS_AGNT) AS STRG_DYS_AGNT,CSTMR_CRRNCY_ID,CSTMR_CRRNCY_ID_AGNT,CSTMR_CRRNCY_CD,CRRNCY_DSCRPTN_VC,SUM(HNDLNG_IN_AMNT_NC_AGNT)AS HNDLNG_IN_AMNT_NC_AGNT,SUM(HNDLNG_IN_AMNT_NC)AS HNDLNG_IN_AMNT_NC,SUM(HNDLNG_OT_AMNT_NC_AGNT) AS HNDLNG_OT_AMNT_NC_AGNT,SUM(HNDLNG_OT_AMNT_NC) AS HNDLNG_OT_AMNT_NC,SUM(STRG_AMNT_NC_AGNT) AS STRG_AMNT_NC_AGNT,SUM(STRG_AMNT_NC) AS STRG_AMNT_NC,SUM(CSTMR_AMNT_NC_AGNT) AS CSTMR_AMNT_NC_AGNT,SUM(CSTMR_AMNT_NC) AS CSTMR_AMNT_NC,SUM(DPT_AMNT_NC_AGNT) AS DPT_AMNT_NC_AGNT,SUM(DPT_AMNT_NC) AS DPT_AMNT_NC,TO_BLLNG_DT,INVC_NO,STRG_FRM_BLLNG_DT,STRG_TO_BLLNG_DT,FR_DYS,DPT_CRRNCY_CD,FR_DYS_AGNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=H.DPT_ID) DPT_CD FROM VM_FINANCE_HANDLINGANDSTORAGE H "

    'Private Const V_AdditionalReportDataSelectQuery As String = "SELECT COUNT(*) FROM ACTIVITY_STATUS WHERE CSTMR_ID=@CSTMR_ID AND GTOT_DT < @GT_OUT_DT OR GTOT_DT IS NULL"
    Private Const V_AdditionalReportDataSelectQuery As String = "SELECT TOP 1 ((SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE @WHERE AND GTN_DT < @GTN_DT)-(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE @WHERE AND GTOT_DT < @GTOT_DT)) as diff FROM ACTIVITY_STATUS"
    'Private Const V_AdditionalReportDataSelectQuery As String = "SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE CSTMR_ID =@CSTMR_ID AND GTN_DT < GTN_DT"
    'Private Const V_AdditionalReportDataSelectQuery1 As String = "SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE CSTMR_ID =@CSTMR_ID AND GTOT_DT < @GTOT_DT"
    Private Const V_AvailableDataSelectQuery As String = "SELECT COUNT(*) FROM TRACKING WHERE @WHERE AND ACTVTY_DT = @ACTVTY_DT AND EQPMNT_STTS_ID=12"
    'CR- 003 [REMARKS IN STATUS,EQUIPMENT_HISTORY]
    Private Const V_Equipment_InformationSelectQuery As String = "SELECT RMRKS_VC FROM V_EQUIPMENT_INFORMATION WHERE EQPMNT_NO= @EQPMNT_NO AND DPT_ID=@DPT_ID ORDER BY ACTV_BT DESC"
    Private Const TrackingUpdateEquipmentInformationRemarksQuery As String = "UPDATE TRACKING SET EQPMNT_INFRMTN_RMRKS_VC=@EQPMNT_INFRMTN_RMRKS_VC,MDFD_BY=@MDFD_BY,MDFD_DT=@MDFD_DT WHERE EQPMNT_NO=@EQPMNT_NO AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO AND ACTVTY_NAM=@ACTVTY_NAM AND DPT_ID=@DPT_ID "
    Private Const IdentitySelectQryByTable = "SELECT @SELECT_COLUMN FROM @TABLE_NAME ORDER BY @ORDER_COLUMN @ORDER"
    Dim sqlDbnull As DateTime = "12:00:00 AM"

    ''Lock Implementation
    Dim Equipment_StatusSelectQueryByEquipmentNo As String = "SELECT  EQPMNT_STTS_CD FROM V_ACTIVITY_STATUS WHERE ACTVTY_STTS_ID IN(SELECT MAX(ACTVTY_STTS_ID) FROM V_ACTIVITY_STATUS WHERE EQPMNT_NO=@EQPMNT_NO AND DPT_ID=@DPT_ID)"
    Dim Activity_SubmitSelectQuery As String = "SELECT ACTVTY_SBMT_ID,ACTVTY_ID,TBL_NM,FLTR_CNDTN,ORDR_BY FROM ACTIVITY_SUBMIT WHERE ACTVTY_ID=@ACTVTY_ID AND ACTV_BT=1"
    Dim GetPrimaryKeySelectQuery As String = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_NAME), 'ISPRIMARYKEY') = 1 AND TABLE_NAME =@TABLE_NAME"

    ''Export Cleaning Method
    Dim CleaningMethodDistictDetailSelectQuery As String = "SELECT distinct CLNNG_MTHD_TYP_CD,ACTV_BT FROM CLEANING_METHOD ORDER BY CLNNG_MTHD_TYP_CD ASC"
    Dim CleaningMethodDetailSelectQuery As String = "SELECT CLNNG_MTHD_DTL_ID,CLNNG_MTHD_TYP_CD,CLNNG_MTHD_TYP_DSCRPTN_VC,CLNNG_TYP_CD,CLNNG_TYP_DSCRPTN_VC,CMMNTS_VC FROM V_CLEANING_METHOD_DETAIL ORDER BY CLNNG_MTHD_TYP_CD ASC"

    'CR : Cleaning & Inspection - Split
    Private Const TrackingInsertQuery_Clean As String = "INSERT INTO TRACKING(TRCKNG_ID,CSTMR_ID,EQPMNT_NO,ACTVTY_NAM,EQPMNT_STTS_ID,ACTVTY_NO,ACTVTY_RMRKS,YRD_LCTN,GI_TRNSCTN_NO,ACTVTY_DT,CRTD_BY,CRTD_DT,MDFD_BY,MDFD_DT,CNCLD_BY, CNCLD_DT, ADT_RMRKS, DPT_ID, RNTL_RFRNC_NO, RNTL_CSTMR_ID, EQPMNT_INFRMTN_RMRKS_VC, ADDTNL_CLNNG_BT) VALUES (@TRCKNG_ID,@CSTMR_ID,@EQPMNT_NO,@ACTVTY_NAM,@EQPMNT_STTS_ID,@ACTVTY_NO,@ACTVTY_RMRKS,@YRD_LCTN,@GI_TRNSCTN_NO,@ACTVTY_DT,@CRTD_BY,@CRTD_DT,@MDFD_BY,@MDFD_DT,@CNCLD_BY, @CNCLD_DT, @ADT_RMRKS, @DPT_ID, @RNTL_RFRNC_NO, @RNTL_CSTMR_ID, @EQPMNT_INFRMTN_RMRKS_VC, @ADDTNL_CLNNG_BT)"

    'Code & Type Merge

    Private Const GetEquipmentCodeByType_SelectQry As String = "SELECT EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_CD,EQPMNT_TYP_DSCRPTN_VC FROM EQUIPMENT_TYPE WHERE DPT_ID=@DPT_ID AND EQPMNT_TYP_CD=@EQPMNT_TYP_CD"
    Private Const GetEquipmentCodeByTypeID_SelectQry As String = "SELECT EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_CD,EQPMNT_TYP_DSCRPTN_VC FROM EQUIPMENT_TYPE WHERE DPT_ID=@DPT_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID"
    Private Const GetEquipmentCodeByTypeWithoutCode_SelectQry As String = "SELECT EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_CD,EQPMNT_TYP_DSCRPTN_VC FROM EQUIPMENT_TYPE WHERE DPT_ID=@DPT_ID AND EQPMNT_TYP_CD=@EQPMNT_TYP_CD AND NOT EQPMNT_CD_CD =@EQPMNT_CD_CD"

    'GWS
    Private Const V_DAR_CUSTOMER_SUMMAYSelectQueryGWS As String = "SELECT DISTINCT CSTMR_ID, CSTMR_CD, (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=23 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE) AS 'STR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=6 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'INS',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=7 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'AWE',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'AAR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'AUR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS 'RPC',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS 'AVL',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =24 AND CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE)AS 'APP',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'OUT',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'TOTAL', (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND @OUTWHERE)AS 'INV_OUT',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'INV_TOTAL' FROM V_DAR_ACTIVITY_STATUS VAS WHERE "
    Private Const V_DAR_TYPE_SUMMARYSelectQueryGWS As String = "SELECT DISTINCT EQPMNT_TYP_ID, EQPMNT_TYP_CD,(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=23 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE) AS 'STR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=6 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND  @WHERE)AS 'INS',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=7 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE )AS 'AWE',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=9 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE )AS 'AAR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID=10 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE)AS 'AUR',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =11 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE )AS 'RPC',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =12 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE )AS 'AVL',(SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID =24 AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND CLNNG_DT IS NULL AND @WHERE )AS 'APP', (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE EQPMNT_STTS_ID IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE )AS 'OUT', (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE )AS 'TOTAL',  (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND GTOT_DT >= @GTOT_DT AND GTOT_DT <= @GT_OUT_DT AND  @WHERE )AS 'INV_OUT', (SELECT COUNT(ACTVTY_STTS_ID) FROM ACTIVITY_STATUS WHERE DPT_ID=VAS.DPT_ID AND EQPMNT_STTS_ID NOT IN (13) AND EQPMNT_TYP_ID=VAS.EQPMNT_TYP_ID and CSTMR_ID=VAS.CSTMR_ID AND @WHERE )AS 'INV_TOTAL'   FROM V_DAR_ACTIVITY_STATUS VAS WHERE  "
    Private Const Get_AgentSlabRate_SelectQuery As String = "SELECT AGNT_STRG_DTL_ID,AGNT_CHRG_DTL_ID,AGNT_ID,AGNT_UP_TO_DYS AS UP_TO_DYS,AGNT_STRG_CHRG_NC AS STRG_CHRG_NC,AGNT_RMRKS_VC AS RMRKS_VC FROM AGENT_STORAGE_DETAIL WHERE AGNT_CHRG_DTL_ID = (SELECT AGNT_CHRG_DTL_ID FROM AGENT_CHARGE_DETAIL WHERE AGNT_ID =@AGNT_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID AND EQPMNT_CD_ID=@EQPMNT_CD_ID) ORDER BY UP_TO_DYS"
    Private Const GetGateInInfo_SelectQry As String = "SELECT BLL_ID  FROM GATEIN WHERE CSTMR_ID=@CSTMR_ID AND EQPMNT_NO=@EQPMNT_NO AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO"
    Private Const GetAgenIdFromCustomer_SelectQry As String = "SELECT AGENT_ID FROM CUSTOMER WHERE CSTMR_ID IN (@CSTMR_ID) AND DPT_ID=@DPT_ID"
    ' Private Const V_AvailableUnitSelectQuery As String = "SELECT CSTMR_ID,EQPMNT_NO,EQPMNT_TYP_CD,EQPMNT_CD_CD,GTN_DT,EIR_NO,EQPMNT_STTS_CD,YRD_LCTN,CSTMR_CD,CNSGNE,RQST_APPRVL_CNGNE,INSPCTN_DT FROM V_RPT_AVAILABLEUNITS WHERE DPT_ID=@DPT_ID "
    'Private Const V_AvailableUnitSelectQuery As String = "SELECT CSTMR_ID,EQPMNT_NO,EQPMNT_TYP_CD,EQPMNT_CD_CD,GTN_DT,EIR_NO,EQPMNT_STTS_CD,YRD_LCTN,CSTMR_CD,CNSGNE,RQST_APPRVL_CNGNE,INSPCTN_DT,(SELECT DPT_CD  FROM DEPOT WHERE DPT_ID =V.DPT_ID)DPT_CD FROM V_RPT_AVAILABLEUNITS V WHERE DPT_ID=@DPT_ID "
    Private Const V_AvailableUnitSelectQuery As String = "SELECT CSTMR_ID,EQPMNT_NO,EQPMNT_TYP_CD,EQPMNT_CD_CD,GTN_DT,EIR_NO,EQPMNT_STTS_CD,YRD_LCTN,CSTMR_CD,CNSGNE,RQST_APPRVL_CNGNE,INSPCTN_DT,(SELECT DPT_CD  FROM DEPOT WHERE DPT_ID =V.DPT_ID)DPT_CD FROM V_RPT_AVAILABLEUNITS V"
    'Private Const V_DAR_CUSTOMER_SUMMAYAvailableUnitsSelectQueryGWS As String = " SELECT DISTINCT CSTMR_CD,(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE DPT_ID=@DPT_ID @WHERE) AS 'UNITS' FROM V_ACTIVITY_STATUS VAS WHERE DPT_ID=@DPT_ID @WHERE"
    'Private Const V_DAR_CUSTOMER_SUMMAYAvailableUnitsSelectQueryGWS As String = " SELECT DISTINCT CSTMR_CD,(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE DPT_ID=@DPT_ID @WHERE) AS 'UNITS' FROM V_ACTIVITY_STATUS VAS @WHERE"
    Private Const V_DAR_CUSTOMER_SUMMAYAvailableUnitsSelectQueryGWS As String = " SELECT DISTINCT CSTMR_CD,(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS @WHERE) AS 'UNITS' FROM V_ACTIVITY_STATUS VAS @WHERE"
    'Private Const V_AvailableUnitEquipSummarySelectQuery As String = "  SELECT DISTINCT EQPMNT_TYP_CD,(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS WHERE DPT_ID=@DPT_ID @WHERE) AS 'UNITS' FROM V_ACTIVITY_STATUS VAS WHERE DPT_ID=@DPT_ID @WHERE"
    Private Const V_AvailableUnitEquipSummarySelectQuery As String = "  SELECT DISTINCT EQPMNT_TYP_CD,(SELECT COUNT(EQPMNT_NO) FROM ACTIVITY_STATUS @WHERE) AS 'UNITS' FROM V_ACTIVITY_STATUS VAS @WHERE"
    Private Const VM_FINANCE_INSPECTIONSelectQuery As String = "SELECT EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,AGNT_ID,AGNT_CRRNCY_ID,CSTMR_CD,CSTMR_NAM,AGNT_CD,AGNT_NM,INSPCTD_DT,INSPCTN_CHRG,BLLNG_FLG,GI_TRNSCTN_NO,DPT_ID,GTN_DT,ACTV_BT,DPT_CRRNCY_ID,AGNT_CRRNCY_CD,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,AGNT_INSPCTN_CHRG,AGNT_AMNT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=F.DPT_ID)DPT_CD FROM VM_FINANCE_INSPECTION F WHERE BLLNG_FLG='B'"
    'Invoice Cancel
    Private Const pub_GetInvoiceCancelReport_SelectQuery As String = "SELECT INVC_CNCL_ID,INVC_TYP,INVC_NO,FRM_BLLNG_DT,TO_BLLNG_DT,INVC_TO,INVC_FNLD_DT,GNRTD_BY,INVC_CNCLD_DT,CSTMR_TOT_CRRNCY,DPT_TOT_CRRNCY,DPT_ID,CSTMR_CRRNCY_ID,CSTMR_CRRNCY_CD,DPT_CRRNCY_ID,DPT_CRRNCY_CD,CRTD_BY,CRTD_DT,ACTV_BT,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=I.DPT_ID)DPT_CD FROM V_INVOICE_CANCEL I  "
    Private Const pub_GetInvoiceCancelDetailReport_SelectQuery As String = "SELECT INVC_CNCL_DTL_ID,INVC_CNCL_ID,EQPMNT_NO,EQPMNT_TYP,RFRNC_NO,CSTMR_TOT_CRRNCY,DPT_TOT_CRRNCY,(SELECT DPT_CD FROM V_INVOICE_CANCEL WHERE INVC_CNCL_ID= I.INVC_CNCL_ID)DPT_CD  FROM INVOICE_CANCEL_DETAIL I "
    Private Const SelectDepotCodeQuery As String = "SELECT DPT_ID,DPT_CD,DPT_NAM,CNTCT_PRSN_NAM,ADDRSS_LN1_VC,ADDRSS_LN2_VC,ADDRSS_LN3_VC,VT_NO,EML_ID,PHN_NO,FX_NO,CMPNY_LG_PTH,MDFD_BY,MDFD_DT FROM DEPOT "
    Private Const VM_FINANCE_CLEANINGDistinctCustomerSelectQuery As String = "SELECT DPT_CRRNCY_CD FROM "

    'Cleaning Slab Rate
    Private Const CleaningChargeUpdateQuery As String = "UPDATE CLEANING_CHARGE SET CLNNG_RT=@CLNNG_RT WHERE CLNNG_CHRG_ID=@CLNNG_CHRG_ID AND EQPMNT_NO=@EQPMNT_NO AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO "
    Private Const CleaingSlabFromCustomerByCustomerID As String = "SELECT CSTMR_CLNNG_DTL_ID,CSTMR_CHRG_DTL_ID,CSTMR_ID,UP_TO_CNTNRS,CLNNG_RT,RMRKS_VC,EQPMNT_TYP_ID,EQPMNT_TYP_CD,EQPMNT_CD_CD FROM V_CUSTOMER_CLEANING_DETAIL WHERE CSTMR_ID=@CSTMR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID @WHERE "
    Private Const PendingInvoice_GetDistinctEquipType As String = "SELECT DISTINCT EQPMNT_TYP_ID FROM VM_PENDING_INVOICE_REGISTER I WHERE ACTIVITY_NAME='CLN' AND ACTVTY_DT>=(@ACTVTY_DT_FROM) AND ACTVTY_DT<=(@ACTVTY_DT_TO) AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID "
    Private Const PendingInvoice_SelectQueryByCustomerIDWithoutSlab As String
    Private Const PendingInvoice_selectQueryByCustomerIDWithSlab As String
    Private Const RevenueInvoice_selectQueryByCustomerIDWithSlab As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT CLNNG_RFRNC_NO FROM CLEANING WHERE CLNNG_ID =V.CLNNG_ID)CLNNG_RFRNC_NO,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD,SLB_RT_BT,EXCHNG_RT_PR_UNT_NC FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND DPT_ID=@DPT_ID  AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID"
    Private Const RevenueInvoice_GetDistinctEquipType As String = "SELECT DISTINCT EQPMNT_TYP_ID FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND DPT_ID=@DPT_ID"
    Private Const RevenueInvoice_SelectQueryByCustomerIDWithoutSlab As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT CLNNG_RFRNC_NO FROM CLEANING WHERE CLNNG_ID =V.CLNNG_ID)CLNNG_RFRNC_NO,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD,SLB_RT_BT,EXCHNG_RT_PR_UNT_NC FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=0 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND DPT_ID=@DPT_ID "
    Private Const VM_FINANCE_CLEANINGBilledSelectQuery As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT CLNNG_RFRNC_NO FROM CLEANING WHERE CLNNG_ID =V.CLNNG_ID)CLNNG_RFRNC_NO,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD,SLB_RT_BT FROM VM_FINANCE_CLEANING V "
    Private Const CLEANING_CHARGESelectQueryByCustomerIDWithInvoicePartyWithSlab As String
    Private Const RevenueInvoice_selectQueryByInvocingPartyAndCustomerIDWithSlab As String = "SELECT CLNNG_CHRG_ID,EQPMNT_NO,EQPMNT_CD_ID,EQPMNT_CD_CD,EQPMNT_TYP_ID,EQPMNT_TYP_CD,CSTMR_ID,CSTMR_CD,CSTMR_NAM,INVCNG_PRTY_ID,CLNNG_ID,ORGNL_CLNNG_DT,ORGNL_INSPCTD_DT,ACN_DT,CLNNG_RT,BLLNG_FLG,CLNNG_CERT_NO,GI_TRNSCTN_NO,DPT_ID,PRDCT_ID,PRDCT_CD,PRDCT_DSCRPTN_VC,GTN_DT,SRVC_PRTNR_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,ACTV_BT,DPT_CRRNCY_ID,CSTMR_CRRNCY_ID,DPT_CRRNCY_CD,CSTMR_CRRNCY_CD,CSTMR_AMNT,DPT_AMNT,BILLED,BILLED_ID,FNL_INVC_NO,INVC_DT,UNBILLED_DPT_AMNT,BILLED_DPT_AMNT,(SELECT CLNNG_RFRNC_NO FROM CLEANING WHERE CLNNG_ID =V.CLNNG_ID)CLNNG_RFRNC_NO,GRP_CLSSFCTN_NAM,(SELECT DPT_CD FROM DEPOT WHERE DPT_ID=V.DPT_ID)DPT_CD,SLB_RT_BT,EXCHNG_RT_PR_UNT_NC FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND CSTMR_ID=@CSTMR_ID AND DPT_ID=@DPT_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID"

    Private Const CLEANING_CHARGESelectCountQueryByCustomerIDWithInvoicePartyWithSlab As String = "SELECT COUNT(TRCKNG_ID) FROM VM_PENDING_INVOICE_REGISTER I  WHERE ACTIVITY_NAME='CLN' AND ACTVTY_DT>=(@ACTVTY_DT_FROM) AND ACTVTY_DT<=(@ACTVTY_DT_TO) AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID AND CSTMR_ID=@CSTMR_ID"
    Private Const RevenueInvoice_selectCountQueryByInvocingPartyAndCustomerIDWithSlab As String = "SELECT COUNT(CLNNG_CHRG_ID) FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND CSTMR_ID=@CSTMR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID"
    Private Const RevenueInvoice_selectCountQueryByCustomerIDWithSlab As String = "SELECT COUNT(CLNNG_CHRG_ID) FROM VM_FINANCE_CLEANING V WHERE BILLED='NO' AND ORGNL_INSPCTD_DT >= @ORGNL_INSPCTD_DT_FROM AND ORGNL_INSPCTD_DT <= @ORGNL_INSPCTD_DT_TO AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID"
    Private Const PendingInvoice_selectCountQueryByCustomerIDWithSlab As String = "SELECT COUNT(TRCKNG_ID) FROM VM_PENDING_INVOICE_REGISTER I WHERE ACTIVITY_NAME='CLN' AND ACTVTY_DT>=(@ACTVTY_DT_FROM) AND ACTVTY_DT<=(@ACTVTY_DT_TO) AND SLB_RT_BT=1 AND SRVC_PRTNR_ID=@SRVC_PRTNR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID "

#End Region

#Region "Constructor.."

    Sub New()
        dsCommon = New CommonUIDataSet
    End Sub

#End Region

#Region "Max Sno"

    Public Shared Function GetIdentityValue(ByVal bv_strTableName As String) As Long
        Try
            Dim objData As DataObjects
            Dim intIdentityValue As Int32
            Dim hshTable As New Hashtable
            hshTable.Add("@TBL_NM", bv_strTableName)
            objData = New DataObjects(IdentitySelectQry, hshTable)
            intIdentityValue = objData.ExecuteScalar()
            UpdateIdentityValue(bv_strTableName)
            Return intIdentityValue
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Shared Function GetIdentityValue(ByVal bv_strTableName As String, ByRef br_objTrans As Transactions) As Long
        Try
            Dim objData As DataObjects
            Dim intIdentityValue As Int32
            Dim hshTable As New Hashtable
            hshTable.Add("@TBL_NM", bv_strTableName)
            objData = New DataObjects(IdentitySelectQry, hshTable)
            intIdentityValue = objData.ExecuteScalar(br_objTrans)
            UpdateIdentityValue(bv_strTableName, br_objTrans)
            Return intIdentityValue
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Shared Function UpdateIdentityValue(ByVal bv_strTableName As String) As Long
        Try
            Dim objData As DataObjects
            objData = New DataObjects(IdentityUpdateQry, "@TBL_NM", bv_strTableName)
            Return objData.ExecuteScalar
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Shared Function UpdateIdentityValue(ByVal bv_strTableName As String, ByRef br_objTrans As Transactions) As Long
        Try
            Dim objData As DataObjects
            objData = New DataObjects(IdentityUpdateQry, "@TBL_NM", bv_strTableName)
            Return objData.ExecuteScalar(br_objTrans)
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#Region "GetIdentityCode"
    Public Shared Function GetIdentityCode(ByVal intIdentityValue As Integer) As String
        Try
            Dim strIdendityCode As String
            strIdendityCode = FormatCode(intIdentityValue)
            Return strIdendityCode
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetIdentityCode"
    Public Shared Function GetIdentityCode(ByVal bv_strTableName As String, _
                                              ByVal lngMaxNo As Int64, _
                                              ByVal dtActivityDate As DateTime, _
                                              ByRef br_objTrans As Transactions) As String
        Try
            Dim objData As DataObjects
            Dim ds As New DataSet
            Dim sbrFrmt As New StringBuilder
            Dim strFormat As String = String.Empty
            Dim hshTable As New Hashtable
            hshTable.Add("@TBL_NM", bv_strTableName)
            objData = New DataObjects(IdentitySelectQry, hshTable)
            objData.Fill(CType(ds, DataSet), "MAX_SNO", br_objTrans)
            If ds.Tables("MAX_SNO").Rows.Count > 0 Then
                sbrFrmt.Append(ds.Tables("MAX_SNO").Rows(0).Item("MX_RFRNC_NO"))
            End If
            sbrFrmt.Replace("MM", dtActivityDate.ToString("MM"))
            sbrFrmt.Replace("YYYY", dtActivityDate.Year())
            sbrFrmt.Replace("MAXNO", FormatCode(lngMaxNo))

            Return sbrFrmt.Replace("|", "").ToString()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "FormatCode"
    Private Shared Function FormatCode(ByVal bv_i64IdentityValue As Int64) As String
        If bv_i64IdentityValue > 0 And bv_i64IdentityValue < 10 Then
            Return String.Concat("0000", bv_i64IdentityValue)
        ElseIf bv_i64IdentityValue >= 10 And bv_i64IdentityValue < 100 Then
            Return String.Concat("000", bv_i64IdentityValue)
        ElseIf bv_i64IdentityValue >= 100 And bv_i64IdentityValue < 1000 Then
            Return String.Concat("00", bv_i64IdentityValue)
        ElseIf bv_i64IdentityValue >= 1000 And bv_i64IdentityValue < 10000 Then
            Return String.Concat("0", bv_i64IdentityValue)
        ElseIf bv_i64IdentityValue >= 10000 Then
            Return bv_i64IdentityValue
        End If
    End Function
#End Region
#End Region

#Region "Activity"
    Private Const ActivitySelectQueryByActivityID As String = "SELECT ACTVTY_ID,ACTVTY_NAM,PRCSS_ID,LST_QRY,LST_URL,LST_TTL,LST_CLCNT,PG_URL,PG_TTL,TBL_NAM,ORDR_NO,CRT_RGHT_BT,EDT_RGHT_BT,ACTV_BT,MNU_TXT,EXCPTN_BT,ACTVTY_RL,MY_SBMTS_CLCNT,MY_SBMTS_QRY FROM ACTIVITY WHERE ACTVTY_ID=@ACTVTY_ID"

#Region "GetActivityByActivityID() TABLE NAME:ACTIVITY"
    Public Function GetActivityByActivityID(ByVal bv_intActivityID As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(ActivitySelectQueryByActivityID, CommonUIData.ACTVTY_ID, CStr(bv_intActivityID))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._ACTIVITY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "ParseQueryString"
    Public Shared Function ParseQueryString(ByVal strWFDATA As String) As Hashtable
        Dim hstble As New Hashtable
        Dim strItems() As String
        strItems = strWFDATA.Split(CChar("&"))
        If strItems.Length = 0 Then
            Throw New Exception("Input WFDATA is not a valid querystring")
        End If
        For i As Integer = 0 To strItems.Length - 1
            If strItems(i) <> "" Then
                If Not hstble.Contains(strItems(i).Split(CChar("="))(0)) Then
                    hstble.Add(strItems(i).Split(CChar("="))(0), strItems(i).Split(CChar("="))(1))
                End If
            End If
        Next i

        ParseQueryString = hstble

        hstble = Nothing
        strItems = Nothing
    End Function
#End Region

#Region "ParseWFDATA"
    Public Shared Function ParseWFDATA(ByVal strWFDATA As String, ByVal strKey As String) As String
        Dim hstble As New Hashtable
        Dim strItems() As String
        strItems = strWFDATA.Split(CChar("&"))
        Dim strKeyValue As String = ""
        If strItems.Length = 0 Then
            Throw New Exception("Input WFDATA is not a valid querystring")
        End If
        For i As Integer = 0 To strItems.Length - 1
            If strItems(i) <> "" Then
                If Not hstble.Contains(strItems(i).Split(CChar("="))(0)) Then
                    hstble.Add(strItems(i).Split(CChar("="))(0), strItems(i).Split(CChar("="))(1))
                End If
            End If
        Next i

        strKeyValue = hstble.Item(strKey)

        If strKeyValue Is Nothing Then
            strKeyValue = ""
        End If
        Return strKeyValue

        hstble = Nothing
        strItems = Nothing
    End Function
#End Region

#End Region

#Region "Role Rights"

    Private Const RoleRightSelectQueryByRoleIDAndActivityID As String = "SELECT RL_RGHT_ID,RL_ID,ACTVTY_ID,EDT_BT,CRT_BT,VW_BT FROM ROLE_RIGHT WHERE ACTVTY_ID=@ACTVTY_ID AND RL_ID=@RL_ID"
    Private Const RoleRightSelectQueryByRoleID As String = "SELECT RL_RGHT_ID,RL_ID,ACTVTY_ID,EDT_BT,CRT_BT,VW_BT FROM ROLE_RIGHT WHERE RL_ID=@RL_ID"
    Private Const UserDetailUpdateQueryFavourites As String = "UPDATE USER_DETAIL SET FAV_ACTVTY_ID_CSV=@FAV_ACTVTY_ID_CSV WHERE USR_ID=@USR_ID"
#Region "GetRoleRightByRoleIDAndActivityID()"
    Public Function GetRoleRightByRoleIDAndActivityID(ByVal bv_intRoleID As Integer, ByVal bv_intActivityID As Integer) As CommonUIDataSet
        Try
            Dim hshRoleRight As New Hashtable()
            hshRoleRight.Add(CommonUIData.RL_ID, bv_intRoleID)
            hshRoleRight.Add(CommonUIData.ACTVTY_ID, bv_intActivityID)

            objData = New DataObjects(RoleRightSelectQueryByRoleIDAndActivityID, hshRoleRight)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._ROLE_RIGHT)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetRoleRightByRoleID()"
    Public Function GetRoleRightByRoleID(ByVal bv_intRoleID As Integer) As CommonUIDataSet
        Try
            objData = New DataObjects(RoleRightSelectQueryByRoleID, CommonUIData.RL_ID, bv_intRoleID)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._ROLE_RIGHT)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateUserDetail() TABLE NAME:UserDetail"

    Public Function UpdateUserDetailFavourites(ByVal bv_i32USR_ID As Int32, ByVal bv_strFavouriteActivitys As String) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(UserData._USER_DETAIL).NewRow()
            Dim strUpdateQuery As String = ""
            With dr
                .Item(UserData.USR_ID) = bv_i32USR_ID
                If bv_strFavouriteActivitys <> "" Then
                    .Item(UserData.FAV_ACTVTY_ID_CSV) = bv_strFavouriteActivitys
                Else
                    .Item(UserData.FAV_ACTVTY_ID_CSV) = DBNull.Value
                End If
            End With
            UpdateUserDetailFavourites = objData.UpdateRow(dr, UserDetailUpdateQueryFavourites)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#End Region

#Region "iInt"
    Public Shared Function iInt(ByVal bv_objObject As Object) As Integer
        If IsDBNull(bv_objObject) Then
            Return 0
        Else
            Return CInt(bv_objObject)
        End If
    End Function
#End Region

#Region "iLng"
    Public Shared Function iLng(ByVal bv_objObject As Object) As Long
        If IsDBNull(bv_objObject) Then
            Return 0
        Else
            Return CLng(bv_objObject)
        End If
    End Function
#End Region

#Region "iDbl"
    Public Shared Function iDbl(ByVal bv_objObject As Object) As Double
        If IsDBNull(bv_objObject) Then
            Return 0.0
        Else
            Return CDbl(bv_objObject)
        End If
    End Function
#End Region

#Region "iDbl"
    Public Shared Function iDec(ByVal bv_objObject As Object) As Decimal
        If IsDBNull(bv_objObject) Then
            Return 0.0
        Else
            Return CDec(bv_objObject)
        End If
    End Function
#End Region

#Region "iDat"
    Public Shared Function iDat(ByVal bv_objObject As Object) As Date
        Dim sqldatenull As SqlDateTime
        If IsDBNull(bv_objObject) Then
            Return sqldatenull
        Else
            Return CDate(bv_objObject)
        End If
    End Function
#End Region

#Region "iBool"
    Public Shared Function iBool(ByVal bv_objObject As Object) As Boolean
        If IsDBNull(bv_objObject) Then
            Return False
        Else
            Return CBool(bv_objObject)
        End If
    End Function
#End Region

#Region "ColToCSVstring"
    ''' <summary>
    ''' This method used to get the column values as CSV string
    ''' </summary>
    ''' <param name="br_dtData">Denotes the data to be converted</param>
    ''' <param name="bv_strColumnName">Denotes column name to be converted</param>
    ''' <returns>String</returns>
    ''' <remarks></remarks>
    Public Shared Function ColToCSVstring(ByRef br_dtData As DataTable, ByVal bv_strColumnName As String) As String
        Dim strArray As Array
        Dim strResult As String = ""
        Dim alCol As New ArrayList

        If Not br_dtData Is Nothing Then
            For Each dr As DataRow In br_dtData.Rows
                'alCol.Add(CStr(dr.Item(bv_strColumnName)))
                alCol.Add(dr.Item(bv_strColumnName))
            Next
        End If
        'strArray = alCol.ToArray(GetType(System.String))
        'strResult = String.Concat("'", String.Join("','", strArray), "'")
        strResult = String.Join(",", alCol.ToArray())
        If strResult = "" Then
            strResult = "null"
        End If
        Return strResult
    End Function
#End Region

#Region "ReportParameters"

#Region "GetREPORT_PARAMETERByRPRT_ID() TABLE NAME:REPORT_PARAMETER"

    Public Function GetREPORT_PARAMETERByRPRT_ID(ByVal bv_i32RPRT_ID As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(REPORT_PARAMETERSelectQueryByRPRT_ID, CommonUIData.RPRT_ID, CStr(bv_i32RPRT_ID))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._REPORT_PARAMETER)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetReportFields() TABLE NAME:REPORT_PARAMETER"

    Public Function GetReportFields(ByVal bv_i32RPRT_ID As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(ReportFieldsSelectQuery, CommonUIData.ACTVTY_ID, CStr(bv_i32RPRT_ID))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._ACTIVITY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetREPORT_PARAMETERByRPRT_ID() TABLE NAME:REPORT_PARAMETER"

    Public Function GetReportParameterValue(ByVal bv_strQuery As String) As DataTable
        Try
            Dim dt As New DataTable()
            objData = New DataObjects(bv_strQuery)
            objData.Fill(dt)
            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#End Region

#Region "Reports"

#Region "GetDAR_ACTIVITY_STATUS() "

    Public Function GetDAR_ACTIVITY_STATUS(ByVal bv_strWhere As String) As CommonUIDataSet
        Try
            objData = New DataObjects(String.Concat(V_DAR_ACTIVITY_STATUSSelectQuery, bv_strWhere))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_ACTIVITY_STATUS)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetCustomerSummary"
    Public Function GetCustomerSummary(ByVal bv_strWhere As String, ByVal bv_OutFromDate As DateTime, _
                                       ByVal bv_OutToDate As DateTime, ByVal bv_intDepotID As Integer, _
                                       ByVal bv_strInvSplitWhere As String, ByVal bv_outWhere As String) As CommonUIDataSet
        Try
            Dim strQuery As String = V_DAR_CUSTOMER_SUMMARYSelectQuery.Replace("@WHERE", bv_strInvSplitWhere)
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.GTOT_DT, bv_OutFromDate)
            hshConfiguration.Add(CommonUIData.GT_OUT_DT, bv_OutToDate)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OUTWHERE", bv_outWhere), bv_strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_CUSTOMER_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCustomerSummaryGWS"
    Public Function GetCustomerSummaryGWS(ByVal bv_strWhere As String, ByVal bv_OutFromDate As DateTime, _
                                       ByVal bv_OutToDate As DateTime, ByVal bv_intDepotID As Integer, _
                                       ByVal bv_strInvSplitWhere As String, ByVal bv_outWhere As String) As CommonUIDataSet
        Try
            Dim strQuery As String = V_DAR_CUSTOMER_SUMMAYSelectQueryGWS.Replace("@WHERE", bv_strInvSplitWhere)
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.GTOT_DT, bv_OutFromDate)
            hshConfiguration.Add(CommonUIData.GT_OUT_DT, bv_OutToDate)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OUTWHERE", bv_outWhere), bv_strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_CUSTOMER_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetAvlUnitCustomerSummaryGWS"
    Function GetAvlUnitCustomerSummaryGWS(strWhere As String, intDepotID As Integer) As CommonUIDataSet
        Try
            Dim strQuery As String = V_DAR_CUSTOMER_SUMMAYAvailableUnitsSelectQueryGWS
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, intDepotID)
            objData = New DataObjects(strQuery.Replace("@WHERE", strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_CUSTOMER_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetEquipmentTypeSummary"
    Public Function GetEquipmentTypeSummary(ByVal bv_strWhere As String, ByVal bv_OutFromDate As DateTime, _
                                       ByVal bv_OutToDate As DateTime, ByVal bv_intDepotID As Integer, _
                                       ByVal bv_strInvSplitWhere As String, ByVal bv_outWhere As String) As CommonUIDataSet
        Try
            Dim strQuery As String = V_DAR_TYPE_SUMMARYSelectQuery.Replace("@WHERE", bv_strInvSplitWhere)
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.GTOT_DT, bv_OutFromDate)
            hshConfiguration.Add(CommonUIData.GT_OUT_DT, bv_OutToDate)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OUTWHERE", bv_outWhere), bv_strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_TYPE_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetEquipmentTypeSummaryGWS"
    Public Function GetEquipmentTypeSummaryGWS(ByVal bv_strWhere As String, ByVal bv_OutFromDate As DateTime, _
                                       ByVal bv_OutToDate As DateTime, ByVal bv_intDepotID As Integer, _
                                       ByVal bv_strInvSplitWhere As String, ByVal bv_outWhere As String) As CommonUIDataSet
        Try
            Dim strQuery As String = V_DAR_TYPE_SUMMARYSelectQueryGWS.Replace("@WHERE", bv_strInvSplitWhere)
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.GTOT_DT, bv_OutFromDate)
            hshConfiguration.Add(CommonUIData.GT_OUT_DT, bv_OutToDate)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OUTWHERE", bv_outWhere), bv_strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_TYPE_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetAvlUnitEquipmentTypeSummaryGWS"
    Function GetAvlUnitEquipmentTypeSummaryGWS(strWhere As String, intDepotID As Integer) As CommonUIDataSet
        Try
            Dim strQuery As String = V_AvailableUnitEquipSummarySelectQuery
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, intDepotID)
            objData = New DataObjects(strQuery.Replace("@WHERE", strWhere), hshConfiguration)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_DAR_TYPE_SUMMARY)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region


#End Region

#Region "Documents"
    Private Const Documentselectquerypk As String = "SELECT DT.DCMNT_TMPLT_ID,DT.DCMNT_ID,DT.TMPLT_NAM,DT.TMPLT_FL_NAM,DT.SND_ML_BT,D.DCMNT_NAM,D.DCMNT_DSCRPTN_VC FROM DOCUMENT_TEMPLATE DT,DOCUMENT D WHERE DT.DCMNT_ID=D.DCMNT_ID AND DT.DCMNT_ID=@DCMNT_ID"
    Private Const Document_Templateselectquerypk As String = "SELECT DCMNT_TMPLT_ID,DCMNT_ID,TMPLT_NAM,TMPLT_FL_NAM,SND_ML_BT,DCMNT_TMPLT_FRMT FROM DOCUMENT_TEMPLATE WHERE DCMNT_TMPLT_ID=@DCMNT_TMPLT_ID"
    Private Const GetServicePartnerQuery As String = "SELECT SRVC_PRTNR_ACTL_ID,SRVC_PRTNR_CD,SRVC_PRTNR_NAM,SRVC_PRTNR_ID,SRVC_PRTNR_TYP_CD,DPT_ID,ACTV_BT,CRRNCY_ID,CRRNCY_CD,CNTCT_ADDRSS,BLLNG_ADDRSS,ZP_CD,PHN_NO,FX_NO,RPRTNG_EML_ID,INVCNG_EML_ID,RPR_TCH_EML_ID,CNTCT_PRSN_NAM,EXCHNG_RT_PR_UNT_NC FROM V_SERVICE_PARTNER WHERE SRVC_PRTNR_ACTL_ID=@SRVC_PRTNR_ACTL_ID"



#Region "ParseParameter"
    ''' <summary>
    ''' This method is used form Parameter Data.
    ''' </summary>
    ''' <param name="qrystr">Denotes Query string</param>
    ''' <returns>Hashtable</returns>
    ''' <remarks></remarks>
    Public Shared Function ParseParameter(ByVal qrystr As String) As Hashtable
        Try
            Dim hstble As New Hashtable
            Dim strItems() As String
            strItems = qrystr.Split(CChar("&"))
            If strItems.Length = 0 Then
                Throw New Exception("Input parameter is not valid")
            End If
            For i As Integer = 0 To strItems.Length - 1
                If strItems(i) <> "" Then
                    hstble.Add(strItems(i).Split(CChar("="))(0), strItems(i).Split(CChar("="))(1))
                End If
            Next i

            ParseParameter = hstble

            hstble = Nothing
            strItems = Nothing

        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetCustomerDetail"
    Public Function pub_GetCustomerDetail(ByVal intCustomerId As Integer) As CommonUIDataSet
        Try
            objData = New DataObjects(GetServicePartnerQuery, CommonUIData.SRVC_PRTNR_ACTL_ID, intCustomerId)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_SERVICE_PARTNER)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetDocumentTemplateDocumentBydcmnt_id"
    ''' <summary>
    ''' This method is used to get Document Template Details.
    ''' </summary>
    ''' <param name="bv_int">Denotes Document ID</param>
    ''' <returns>CommonUIDataSet</returns>
    ''' <remarks></remarks>

    Public Function GetDocumentTemplateDocumentByDocumentID(ByVal bv_int As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(Documentselectquerypk, CommonUIData.DCMNT_ID, CStr(bv_int))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._DOCUMENT_TEMPLATE)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetDocumentTemplateByDocumentTemplateID"
    ''' <summary>
    ''' This method is used to get Document Template Detail.
    ''' </summary>
    ''' <param name="bv_intDocumentTemplateID">Denotes Document Template ID</param>
    ''' <returns>CommonUIDataSet</returns>
    ''' <remarks></remarks>

    Public Function GetDocumentTemplateByDocumentTemplateID(ByVal bv_intDocumentTemplateID As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(Document_Templateselectquerypk, CommonUIData.DCMNT_TMPLT_ID, CStr(bv_intDocumentTemplateID))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._DOCUMENT_TEMPLATE)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#End Region

#Region "Config"
#Region "Declaration Part.. "
    Private Const ConfigSelectQueryByDepotId As String = "SELECT CNFG_ID,CNFG_TMPLT_ID,KY_NAM,KY_DSCRPTION,KY_VL,DPT_ID,ENBLD_BT,ACTV_BT FROM CONFIG WHERE DPT_ID=@DPT_ID AND ACTV_BT=1"
    Private Const ConfigSelectQueryByKeyNameDepotId As String = "SELECT CNFG_ID,CNFG_TMPLT_ID,KY_NAM,KY_DSCRPTION,KY_VL,DPT_ID,ENBLD_BT,ACTV_BT FROM CONFIG WHERE KY_NAM=@KY_NAM AND DPT_ID=@DPT_ID AND ACTV_BT=1 AND ENBLD_BT=1"
    Private Const ConfigTemplateSelectQuery As String = "SELECT CNFG_TMPLT_ID,KY_NAM,KY_DSCRPTION,CNFG_TYP,ACTV_BT FROM CONFIG_TEMPLATE"
    Private Const ConfigInsertQuery As String = "INSERT INTO CONFIG(CNFG_ID,CNFG_TMPLT_ID,KY_NAM,KY_DSCRPTION,KY_VL,DPT_ID,ENBLD_BT,ACTV_BT)VALUES(@CNFG_ID,@CNFG_TMPLT_ID,@KY_NAM,@KY_DSCRPTION,@KY_VL,@DPT_ID,@ENBLD_BT,@ACTV_BT)"
    Private Const ConfigUpdateQuery As String = "UPDATE Config SET CNFG_TMPLT_ID=@CNFG_TMPLT_ID, KY_NAM=@KY_NAM, KY_DSCRPTION=@KY_DSCRPTION, KY_VL=@KY_VL, DPT_ID=@DPT_ID, ENBLD_BT=@ENBLD_BT, ACTV_BT=@ACTV_BT WHERE CNFG_ID=@CNFG_ID"
    Private Const SelectExchangeRateQuery As String = " SELECT TOP 1 EXCHNG_RT_PR_UNT_NC FROM EXCHANGE_RATE WHERE TO_CRRNCY_ID =@TO_CRRNCY_ID AND FRM_CRRNCY_ID=(SELECT CRRNCY_ID FROM V_BANK_DETAIL WHERE DPT_ID=@DPT_ID AND BNK_TYP_ID=44) AND ACTV_BT=@ACTV_BT ORDER BY WTH_EFFCT_FRM_DT DESC"

#End Region

#Region "GetConfigByKeyName() TABLE NAME:CONFIG"

    Public Function GetConfigByKeyName(ByVal bv_strKeyName As String, ByVal bv_intDepotId As Int64) As ConfigDataSet
        Try
            Dim ds As New ConfigDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.KY_NAM, bv_strKeyName)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotId)
            objData = New DataObjects(ConfigSelectQueryByKeyNameDepotId, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._CONFIG)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetConfigByConfigId() TABLE NAME:CONFIG"

    Public Function GetConfigByDepotId(ByVal bv_i64DepotId As Int64) As ConfigDataSet
        Try
            Dim ds As New ConfigDataSet
            objData = New DataObjects(ConfigSelectQueryByDepotId, CommonUIData.DPT_ID, CStr(bv_i64DepotId))
            objData.Fill(CType(ds, DataSet), CommonUIData._CONFIG)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetConfigTemplate() TABLE NAME:CONFIG"

    Public Function GetConfigTemplate() As ConfigDataSet
        Try
            Dim ds As New ConfigDataSet
            objData = New DataObjects(ConfigTemplateSelectQuery)
            objData.Fill(CType(ds, DataSet), CommonUIData._CONFIG_TEMPLATE)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "CreateConfig() TABLE NAME:Config"

    Public Function CreateConfig(ByVal bv_i64ConfigTemplateId As Int64, _
        ByVal bv_strKeyName As String, _
        ByVal bv_strKeyDescription As String, _
        ByVal bv_strKeyValue As String, _
        ByVal bv_i32DepotId As Int32, _
        ByVal bv_blnEnabledBit As Boolean, _
        ByVal bv_blnActiveBit As Boolean, ByRef br_objTrans As Transactions) As Long
        Try
            Dim dr As DataRow
            Dim intMax As Long
            Dim ds As New ConfigDataSet
            objData = New DataObjects()
            dr = ds.Tables(CommonUIData._CONFIG).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._CONFIG)
                .Item(CommonUIData.CNFG_ID) = intMax
                .Item(CommonUIData.CNFG_TMPLT_ID) = bv_i64ConfigTemplateId
                .Item(CommonUIData.KY_NAM) = bv_strKeyName
                .Item(CommonUIData.KY_DSCRPTION) = bv_strKeyDescription
                If bv_strKeyValue <> Nothing Then
                    .Item(CommonUIData.KY_VL) = bv_strKeyValue
                Else
                    .Item(CommonUIData.KY_VL) = String.Empty
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                If bv_blnEnabledBit <> Nothing Then
                    .Item(CommonUIData.ENBLD_BT) = bv_blnEnabledBit
                Else
                    .Item(CommonUIData.ENBLD_BT) = DBNull.Value
                End If
                .Item(CommonUIData.ACTV_BT) = bv_blnActiveBit
            End With
            objData.InsertRow(dr, ConfigInsertQuery, br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateConfig() TABLE NAME:Config"

    Public Function UpdateConfig(ByVal bv_i64ConfigId As Int64, _
        ByVal bv_i64ConfigTemplateId As Int64, _
        ByVal bv_strKeyName As String, _
        ByVal bv_strKeyDescription As String, _
        ByVal bv_strKeyValue As String, _
        ByVal bv_i32DepotId As Int32, _
        ByVal bv_blnEnabledBit As Boolean, _
        ByVal bv_blnActiveBit As Boolean, ByRef br_objTrans As Transactions) As Boolean
        Try
            Dim dr As DataRow
            Dim ds As New ConfigDataSet
            objData = New DataObjects()
            dr = ds.Tables(CommonUIData._CONFIG).NewRow()
            With dr
                .Item(CommonUIData.CNFG_ID) = bv_i64ConfigId
                .Item(CommonUIData.CNFG_TMPLT_ID) = bv_i64ConfigTemplateId
                .Item(CommonUIData.KY_NAM) = bv_strKeyName
                .Item(CommonUIData.KY_DSCRPTION) = bv_strKeyDescription
                If bv_strKeyValue <> Nothing Then
                    .Item(CommonUIData.KY_VL) = bv_strKeyValue
                Else
                    .Item(CommonUIData.KY_VL) = String.Empty
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                If bv_blnEnabledBit <> Nothing Then
                    .Item(CommonUIData.ENBLD_BT) = bv_blnEnabledBit
                Else
                    .Item(CommonUIData.ENBLD_BT) = False
                End If
                .Item(CommonUIData.ACTV_BT) = bv_blnActiveBit
            End With
            UpdateConfig = objData.UpdateRow(dr, ConfigUpdateQuery, br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#End Region

#Region "GetEquipmentStatus"
    Public Function GetEquipmentStatus(ByVal bv_strEquipmentStatusCode As String, ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.EQPMNT_STTS_CD, bv_strEquipmentStatusCode)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(SelectEquipmentStatusQuery, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._EQUIPMENT_STATUS)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetMeasureId"
    Public Function pub_GetMeasureId(ByVal bv_strMsrCode As String, ByVal bv_intDepotID As Integer) As MeasureDataSet
        Try
            Dim ds As New MeasureDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(MeasureData.MSR_CD, bv_strMsrCode)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(SelectMeasureIdQuery, hshConfiguration)
            objData.Fill(CType(ds, DataSet), MeasureData._MEASURE)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetEquipmentType"
    Public Function GetEquipmentType(ByVal bv_strEquipmentTypeCode As String, ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.EQPMNT_TYP_CD, bv_strEquipmentTypeCode)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(SelectEquipmentTypeQuery, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._EQUIPMENT_TYPE)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetEquipmentCode"
    Public Function GetAllEquipmentCode(ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim dt As New DataTable
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(SelectEquipmentCodeQuery, hshConfiguration)
            objData.Fill(dt)
            dt.TableName = CommonUIData._EQUIPMENT_TYPE
            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetEquipmentCodeByType(ByVal bv_strType As String, ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim dt As New DataTable
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            hshConfiguration.Add(CommonUIData.EQPMNT_TYP_CD, bv_strType)
            objData = New DataObjects(GetEquipmentCodeByType_SelectQry, hshConfiguration)
            objData.Fill(dt)
            dt.TableName = CommonUIData._EQUIPMENT_TYPE
            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetEquipmentCodeByTypeId(ByVal bv_strTypeID As String, ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim dt As New DataTable
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            hshConfiguration.Add(CommonUIData.EQPMNT_TYP_ID, bv_strTypeID)
            objData = New DataObjects(GetEquipmentCodeByTypeID_SelectQry, hshConfiguration)
            objData.Fill(dt)
            dt.TableName = CommonUIData._EQUIPMENT_TYPE
            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function GetEquipmentCodeByTypeWithoutCode(ByVal bv_strType As String, ByVal bv_strOldCode As String, ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim dt As New DataTable
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            hshConfiguration.Add(CommonUIData.EQPMNT_TYP_CD, bv_strType)
            hshConfiguration.Add(CommonUIData.EQPMNT_CD_CD, bv_strOldCode)
            objData = New DataObjects(GetEquipmentCodeByTypeWithoutCode_SelectQry, hshConfiguration)
            objData.Fill(dt)
            dt.TableName = CommonUIData._EQUIPMENT_TYPE
            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "pub_GetDepotDetail"
    Public Function pub_GetDepotDetail(ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            objData = New DataObjects(SelectDepotDetailQuery, CommonUIData.DPT_ID, bv_intDepotID)
            objData.Fill(CType(ds, DataSet), CommonUIData._DEPOT)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetDepotDetail"
    Public Function pub_GetDepotDetail(ByVal bv_intDepotID As Integer, ByRef br_objTrans As Transactions) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            objData = New DataObjects(SelectDepotDetailQuery, CommonUIData.DPT_ID, bv_intDepotID)
            objData.Fill(CType(ds, DataSet), CommonUIData._DEPOT, br_objTrans)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "CreateTracking() TABLE NAME:Tracking"

    Public Function CreateTracking(ByVal bv_i64ReferenceNo As Int64, _
                                   ByVal bv_i64CustomerID As Int64, _
                                   ByVal bv_strEquipmentNo As String, _
                                   ByVal bv_strActivityName As String, _
                                   ByVal bv_i64Status As Int64, _
                                   ByVal bv_strActivityNo As String, _
                                   ByVal bv_datActivityDate As DateTime, _
                                   ByVal bv_strRemarks As String, _
                                   ByVal bv_strYardLocation As String, _
                                   ByVal bv_strGateInTransactionNo As String, _
                                   ByVal bv_i64InvoicingPartyId As Int64, _
                                   ByVal bv_ReferenceNo As String, _
                                   ByVal bv_strCreatedBy As String, _
                                   ByVal bv_datCreatedDate As DateTime, _
                                   ByVal bv_strModifieddBy As String, _
                                   ByVal bv_datModifiedDate As DateTime, _
                                   ByVal bv_strCanceledBy As String, _
                                   ByVal bv_datCanceledDate As DateTime, _
                                   ByVal bv_strADTRemarks As String, _
                                   ByVal bv_i32DepotId As Int32, _
                                   ByVal bv_intRentalCustomerID As Int32, _
                                   ByVal bv_strRentalRefNo As String, _
                                   ByVal bv_strEquipmentInfoRemarks As String, _
                                   ByVal bv_blnAdditionalCleaningFlag As Boolean, _
                                   ByRef br_objTrans As Transactions) As Long
        Try
            Dim ds As New CommonUIDataSet
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = ds.Tables(CommonUIData._TRACKING).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._TRACKING, br_objTrans)
                .Item(CommonUIData.TRCKNG_ID) = intMax
                .Item(CommonUIData.CSTMR_ID) = bv_i64CustomerID
                .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                If bv_i64Status <> 0 Then
                    .Item(CommonUIData.EQPMNT_STTS_ID) = bv_i64Status
                Else
                    .Item(CommonUIData.EQPMNT_STTS_ID) = DBNull.Value
                End If
                .Item(CommonUIData.ACTVTY_NO) = bv_strActivityNo
                .Item(CommonUIData.ACTVTY_DT) = bv_datActivityDate
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.ACTVTY_RMRKS) = bv_strRemarks
                Else
                    .Item(CommonUIData.ACTVTY_RMRKS) = DBNull.Value
                End If
                If bv_strYardLocation <> Nothing Then
                    .Item(CommonUIData.YRD_LCTN) = bv_strYardLocation
                Else
                    .Item(CommonUIData.YRD_LCTN) = DBNull.Value
                End If
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateInTransactionNo
                If bv_i64InvoicingPartyId <> 0 Then
                    .Item(CommonUIData.INVCNG_PRTY_ID) = bv_i64InvoicingPartyId
                Else
                    .Item(CommonUIData.INVCNG_PRTY_ID) = DBNull.Value
                End If
                If bv_ReferenceNo <> Nothing Then
                    .Item(CommonUIData.RFRNC_NO) = bv_ReferenceNo
                Else
                    .Item(CommonUIData.RFRNC_NO) = DBNull.Value
                End If
                .Item(CommonUIData.CRTD_BY) = bv_strCreatedBy
                .Item(CommonUIData.CRTD_DT) = bv_datCreatedDate
                .Item(CommonUIData.MDFD_BY) = bv_strModifieddBy
                .Item(CommonUIData.MDFD_DT) = bv_datModifiedDate
                If bv_strCanceledBy <> Nothing Then
                    .Item(CommonUIData.CNCLD_BY) = bv_strCanceledBy
                Else
                    .Item(CommonUIData.CNCLD_BY) = DBNull.Value
                End If
                If bv_datCanceledDate <> Nothing Then
                    .Item(CommonUIData.CNCLD_DT) = bv_datCanceledDate
                Else
                    .Item(CommonUIData.CNCLD_DT) = DBNull.Value
                End If
                If bv_strADTRemarks <> Nothing Then
                    .Item(CommonUIData.ADT_RMRKS) = bv_strADTRemarks
                Else
                    .Item(CommonUIData.ADT_RMRKS) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                If bv_strRentalRefNo <> Nothing Then
                    .Item(CommonUIData.RNTL_RFRNC_NO) = bv_strRentalRefNo
                Else
                    .Item(CommonUIData.RNTL_RFRNC_NO) = DBNull.Value
                End If
                If bv_intRentalCustomerID <> 0 Then
                    .Item(CommonUIData.RNTL_CSTMR_ID) = bv_intRentalCustomerID
                Else
                    .Item(CommonUIData.RNTL_CSTMR_ID) = DBNull.Value
                End If
                If bv_strEquipmentInfoRemarks <> Nothing Then
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = bv_strEquipmentInfoRemarks
                Else
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = DBNull.Value
                End If
                .Item(CommonUIData.ADDTNL_CLNNG_BT) = bv_blnAdditionalCleaningFlag
            End With
            objData.InsertRow(dr, TrackingInsertQuery, br_objTrans)
            dr = Nothing
            CreateTracking = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateActivityStatus() TABLE NAME:Activity_Status"

    Public Function UpdateActivityStatus(ByVal bv_i64ActivityStatusId As Int64, _
                                        ByVal bv_i64EquipmentStatusId As Int64, _
                                        ByVal bv_datActivityDate As DateTime, _
                                        ByVal bv_strRemarks As String, _
                                        ByVal bv_i32DepoID As Int32, _
                                        ByVal bv_strYardLocation As String, _
                                        ByRef br_objTransaction As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._ACTIVITY_STATUS).NewRow()
            With dr
                .Item(CommonUIData.ACTVTY_STTS_ID) = bv_i64ActivityStatusId
                .Item(CommonUIData.EQPMNT_STTS_ID) = bv_i64EquipmentStatusId
                .Item(CommonUIData.ACTVTY_DT) = bv_datActivityDate
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.RMRKS_VC) = bv_strRemarks
                Else
                    .Item(CommonUIData.RMRKS_VC) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepoID
                .Item(CleaningData.SCHDL_DT) = DBNull.Value
                If bv_strYardLocation <> Nothing Then
                    .Item(CommonUIData.YRD_LCTN) = bv_strYardLocation
                Else
                    .Item(CommonUIData.YRD_LCTN) = DBNull.Value
                End If
            End With
            UpdateActivityStatus = objData.UpdateRow(dr, Activity_StatusUpdateQuery, br_objTransaction)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function


    Public Function UpdateActivityStatus_WithRefNO(ByVal bv_i64ActivityStatusId As Int64, _
                                         ByVal bv_i64EquipmentStatusId As Int64, _
                                         ByVal bv_datActivityDate As DateTime, _
                                         ByVal bv_strRemarks As String, _
                                         ByVal bv_i32DepoID As Int32, _
                                         ByVal bv_strYardLocation As String, _
                                         ByVal bv_CleaningInspectionReportRefNo As String, _
                                         ByRef br_objTransaction As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._ACTIVITY_STATUS).NewRow()
            With dr
                .Item(CommonUIData.ACTVTY_STTS_ID) = bv_i64ActivityStatusId
                .Item(CommonUIData.EQPMNT_STTS_ID) = bv_i64EquipmentStatusId
                .Item(CommonUIData.ACTVTY_DT) = bv_datActivityDate
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.RMRKS_VC) = bv_strRemarks
                Else
                    .Item(CommonUIData.RMRKS_VC) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepoID
                .Item(CleaningData.SCHDL_DT) = DBNull.Value

                If bv_CleaningInspectionReportRefNo <> Nothing Then
                    .Item(CleaningData.CLNNG_INSPCTN_REF_NO) = bv_CleaningInspectionReportRefNo
                Else
                    .Item(CleaningData.CLNNG_INSPCTN_REF_NO) = DBNull.Value
                End If

                If bv_strYardLocation <> Nothing Then
                    .Item(CommonUIData.YRD_LCTN) = bv_strYardLocation
                Else
                    .Item(CommonUIData.YRD_LCTN) = DBNull.Value
                End If
            End With
            UpdateActivityStatus_WithRefNO = objData.UpdateRow(dr, Activity_StatusUpdateQuery, br_objTransaction)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetWorkFlowActivity"
    Public Function GetWorkFlowActivity(ByVal bv_strActivity As String, ByVal bv_ActvBit As Boolean, ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.WF_ACTIVITY_NAME, bv_strActivity)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            hshConfiguration.Add(CommonUIData.ACTV_BT, bv_ActvBit)
            objData = New DataObjects(WF_ACTIVITY_SelectQueryByActivity, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._WF_ACTIVITY)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetEquipmentPreviousActivityDate"
    Public Function GetEquipmentPreviousActivityDate(ByVal bv_strEquipmentNo As String, ByVal bv_intDepotID As Integer, _
                                                     ByVal bv_strActivityName As String) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.EQPMNT_NO, bv_strEquipmentNo)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)
            hshConfiguration.Add(CommonUIData.ACTVTY_NAM, bv_strActivityName)
            objData = New DataObjects(Tracking_SelectQueryByEquipmentNo, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._TRACKING)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetParameter() TABLE NAME:Hashtable"
    Public Function pub_GetParameter(ByVal bv_strKey As String, ByVal bv_paramdata As String) As String
        Dim NMColl As Hashtable
        Dim strKeyValue As String = ""
        NMColl = ParseParameter(bv_paramdata)
        If NMColl.Contains(bv_strKey) Then
            If NMColl.Item(bv_strKey).ToString <> "" Then
                strKeyValue = NMColl.Item(bv_strKey).ToString
            End If
        End If
        Return strKeyValue
    End Function
#End Region

#Region "CreateServicePartner() TABLE NAME:SERVICE_PARTNER"

    Public Function CreateServicePartner(ByVal bv_i64ServicePartnerActualID As Int64, _
                                   ByVal bv_strServicePartnerType As String, _
                                   ByVal bv_i32DepotId As Int32, _
                                   ByRef br_objTrans As Transactions) As Long
        Try
            Dim ds As New CommonUIDataSet
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = ds.Tables(CommonUIData._SERVICE_PARTNER).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._SERVICE_PARTNER, br_objTrans)
                .Item(CommonUIData.SRVC_PRTNR_ID) = intMax
                .Item(CommonUIData.SRVC_PRTNR_ACTL_ID) = bv_i64ServicePartnerActualID
                .Item(CommonUIData.SRVC_PRTNR_TYP_CD) = bv_strServicePartnerType
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
            End With
            objData.InsertRow(dr, Service_PartnerInsertQuery, br_objTrans)
            dr = Nothing
            CreateServicePartner = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetServicePartnerByCode() TABLE NAME:V_SERVICE_PARTNER"

    Public Function GetServicePartnerByCode(ByVal bv_strCode As String, ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.SRVC_PRTNR_CD, bv_strCode)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)

            objData = New DataObjects(V_SERVICE_PARTNERSelectQuery, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._V_SERVICE_PARTNER)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetServicePartnerByID() TABLE NAME:V_SERVICE_PARTNER"

    Public Function GetServicePartnerByID(ByVal bv_i64ServicePartner As Integer, ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim dtServPartner As New DataTable
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.SRVC_PRTNR_ACTL_ID, bv_i64ServicePartner)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intDepotID)

            objData = New DataObjects(V_SERVICE_PARTNERByServicePartnerIDSelectQuery, hshConfiguration)
            objData.Fill(dtServPartner)
            Return dtServPartner
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateTracking_Date_Remarks() TABLE NAME:Tracking"

    Public Function UpdateTracking_Date_Remarks(ByVal bv_strEQPMNT_NO As String, _
                                                ByVal bv_datActivity As DateTime, _
                                                ByVal bv_strActivityName As String, _
                                                ByVal strGI_TRNSCTN_NO As String, _
                                                ByVal bv_strReferenceNo As String, _
                                                ByVal bv_strRemarks As String, _
                                                ByVal bv_i32DepotId As Int32, _
                                                ByVal bv_strModifiedBy As String, _
                                                ByVal bv_dtModifiedDate As DateTime, _
                                                ByVal bv_strEquipmentInfoRemarks As String, _
                                                ByRef br_ObjTransactions As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._TRACKING).NewRow()
            With dr
                .Item(CommonUIData.EQPMNT_NO) = bv_strEQPMNT_NO
                .Item(CommonUIData.ACTVTY_DT) = bv_datActivity
                If strGI_TRNSCTN_NO <> Nothing Then
                    .Item(CommonUIData.GI_TRNSCTN_NO) = strGI_TRNSCTN_NO
                Else
                    .Item(CommonUIData.GI_TRNSCTN_NO) = DBNull.Value
                End If
                If bv_strReferenceNo <> Nothing Then
                    .Item(CommonUIData.RFRNC_NO) = bv_strReferenceNo
                Else
                    .Item(CommonUIData.RFRNC_NO) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.ACTVTY_RMRKS) = bv_strRemarks
                Else
                    .Item(CommonUIData.ACTVTY_RMRKS) = DBNull.Value
                End If
                .Item(CommonUIData.MDFD_BY) = bv_strModifiedBy
                .Item(CommonUIData.MDFD_DT) = bv_dtModifiedDate
                If bv_strEquipmentInfoRemarks <> Nothing Then
                    .Item(GateinData.EQPMNT_INFRMTN_RMRKS_VC) = bv_strEquipmentInfoRemarks
                Else
                    .Item(GateinData.EQPMNT_INFRMTN_RMRKS_VC) = DBNull.Value
                End If
            End With
            UpdateTracking_Date_Remarks = objData.UpdateRow(dr, TrackingUpdateQueryWithDateAndRemarks, br_ObjTransactions)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "UpdateTracking_Date_Remarks_And_YardLocation() TABLE NAME:Tracking"

    Public Function UpdateTracking_Date_Remarks_And_YardLocation(ByVal bv_strEQPMNT_NO As String, _
                ByVal bv_datActivity As DateTime, _
                ByVal bv_strActivityName As String, _
                ByVal strGI_TRNSCTN_NO As String, _
                ByVal strReferenceNo As String, _
                ByVal bv_strRemarks As String, _
                ByVal bv_strYardLocation As String, _
                ByVal bv_i32DepotId As Int32, _
                ByVal bv_strModifiedBy As String, _
                ByVal bv_strModifiedDate As DateTime, _
                ByVal bv_strEIRemarks As String, _
                ByRef br_ObjTransactions As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._TRACKING).NewRow()
            With dr
                .Item(CommonUIData.EQPMNT_NO) = bv_strEQPMNT_NO
                .Item(CommonUIData.ACTVTY_DT) = bv_datActivity
                If strGI_TRNSCTN_NO <> Nothing Then
                    .Item(CommonUIData.GI_TRNSCTN_NO) = strGI_TRNSCTN_NO
                Else
                    .Item(CommonUIData.GI_TRNSCTN_NO) = DBNull.Value
                End If
                If strReferenceNo <> Nothing Then
                    .Item(CommonUIData.RFRNC_NO) = strReferenceNo
                Else
                    .Item(CommonUIData.RFRNC_NO) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.ACTVTY_RMRKS) = bv_strRemarks
                Else
                    .Item(CommonUIData.ACTVTY_RMRKS) = DBNull.Value
                End If
                If bv_strYardLocation <> Nothing Then
                    .Item(CommonUIData.YRD_LCTN) = bv_strYardLocation
                Else
                    .Item(CommonUIData.YRD_LCTN) = DBNull.Value
                End If
                .Item(CommonUIData.MDFD_BY) = bv_strModifiedBy
                .Item(CommonUIData.MDFD_DT) = bv_strModifiedDate
                If bv_strEIRemarks <> Nothing Then
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = bv_strEIRemarks
                Else
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = DBNull.Value
                End If

            End With
            UpdateTracking_Date_Remarks_And_YardLocation = objData.UpdateRow(dr, TrackingUpdateQueryWithDateAndRemarksWithYard, br_ObjTransactions)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "CreateAttachment() TABLE NAME:Attachment"

    Public Function CreateAttachment(ByVal bv_i64RepairEstimateID As Int64, _
                                     ByVal bv_strActivityName As String, _
                                     ByVal bv_strRepairEstimateNo As String, _
                                     ByVal bv_strGateinTransactionNo As String, _
                                     ByVal bv_strAttachmentPath As String, _
                                     ByVal bv_strActualFileName As String, _
                                     ByVal bv_strModifiedBy As String, _
                                     ByVal bv_datModifiedDate As DateTime, _
                                     ByVal bv_i32DepotID As Int32, _
                                     ByRef br_objTrans As Transactions) As Long
        Try
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._ATTACHMENT).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._ATTACHMENT, br_objTrans)
                .Item(CommonUIData.ATTCHMNT_ID) = intMax
                .Item(CommonUIData.RPR_ESTMT_ID) = bv_i64RepairEstimateID
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                .Item(CommonUIData.RPR_ESTMT_NO) = bv_strRepairEstimateNo
                '  .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateinTransactionNo
                .Item(CommonUIData.ATTCHMNT_PTH) = bv_strAttachmentPath
                .Item(CommonUIData.ACTL_FL_NM) = bv_strActualFileName
                .Item(CommonUIData.MDFD_BY) = bv_strModifiedBy
                .Item(CommonUIData.MDFD_DT) = bv_datModifiedDate
                .Item(CommonUIData.DPT_ID) = bv_i32DepotID
                '  If bv_strGateinTransactionNo <> Nothing Then
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateinTransactionNo
                '  Else
                '.Item(CommonUIData.GI_TRNSCTN_NO) = DBNull.Value
                ' End If
            End With
            objData.InsertRow(dr, AttachmentInsertQuery, br_objTrans)
            dr = Nothing
            CreateAttachment = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "DeleteAttachmentByActivityName() TABLE NAME:ATTACHMENT"

    Public Function DeleteAttachmentByActivityName(ByVal bv_strGateInTransactionNo As String, _
                                                   ByVal bv_i64RepairEstimateId As Int64, _
                                                   ByVal bv_strRepairEstimateNo As String, _
                                                   ByVal bv_intDepotId As Integer, _
                                                   ByRef br_objTransaction As Transactions) As Boolean
        Dim dr As DataRow
        objData = New DataObjects()
        Try
            ' Dim dt As New DataTable
            dr = dsCommon.Tables(RepairEstimateData._ATTACHMENT).NewRow()
            With dr
                .Item(RepairEstimateData.GI_TRNSCTN_NO) = bv_strGateInTransactionNo
                .Item(RepairEstimateData.RPR_ESTMT_ID) = bv_i64RepairEstimateId
                .Item(RepairEstimateData.RPR_ESTMT_NO) = bv_strRepairEstimateNo
                .Item(RepairEstimateData.DPT_ID) = bv_intDepotId
            End With
            DeleteAttachmentByActivityName = objData.DeleteRow(dr, AttachmentDeleteQuery, br_objTransaction)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "Generate Invoice"

#Region "Declarations"
    Private Const INVOICETableUpdateQueryInvoiceNoBillingFlag As String = "UPDATE @INVOICE_TABLE SET BLLNG_FLG=@BLLNG_FLG,DRFT_INVC_NO=@DRFT_INVC_NO WHERE DPT_ID=@DPT_ID AND "
    Private Const Invoice_HistoryInsertQuery As String = "INSERT INTO INVOICE_HISTORY(INVC_BIN,INVC_NO,INVC_DT,INVC_FL_PTH,INVC_TYP,INVC_CRRNCY_ID,EXCHNG_RT_NC,CSTMR_CRRNCY_ID,BLLNG_TYP_ID,FRM_BLLNG_DT,TO_BLLNG_DT,TTL_CST_IN_CSTMR_CRRNCY_NC,TTL_CST_IN_INVC_CRRNCY_NC,BLLNG_FLG,CSTMR_ID,INVCNG_PRTY_ID,DPT_ID,ACTV_BT,CRTD_BY,CRTD_DT,MDFD_BY,MDFD_DT,FL_NM,NO_OF_EQPMNT)VALUES(@INVC_BIN,@INVC_NO,@INVC_DT,@INVC_FL_PTH,@INVC_TYP,@INVC_CRRNCY_ID,@EXCHNG_RT_NC,@CSTMR_CRRNCY_ID,@BLLNG_TYP_ID,@FRM_BLLNG_DT,@TO_BLLNG_DT,@TTL_CST_IN_CSTMR_CRRNCY_NC,@TTL_CST_IN_INVC_CRRNCY_NC,@BLLNG_FLG,@CSTMR_ID,@INVCNG_PRTY_ID,@DPT_ID,@ACTV_BT,@CRTD_BY,@CRTD_DT,@MDFD_BY,@MDFD_DT,@FL_NM,@NO_OF_EQPMNT)"
    Private Const Invoice_HistorySelectQueryByInvoiceNo As String = "SELECT INVC_BIN,INVC_NO,INVC_DT,INVC_FL_PTH,INVC_TYP,INVC_CRRNCY_ID,EXCHNG_RT_NC,CSTMR_CRRNCY_ID,BLLNG_TYP_ID,FRM_BLLNG_DT,TO_BLLNG_DT,TTL_CST_IN_CSTMR_CRRNCY_NC,TTL_CST_IN_INVC_CRRNCY_NC,BLLNG_FLG,CSTMR_ID,INVCNG_PRTY_ID,DPT_ID,ACTV_BT,CRTD_BY,CRTD_DT FROM INVOICE_HISTORY WHERE  ACTV_BT=1 AND DPT_ID=@DPT_ID AND INVC_NO=@INVC_NO AND BLLNG_FLG=@BLLNG_FLG"
    Private Const Invoice_HistoryUpdateQuery As String = "UPDATE INVOICE_HISTORY SET INVC_DT=@INVC_DT,INVC_CRRNCY_ID=@INVC_CRRNCY_ID,EXCHNG_RT_NC=@EXCHNG_RT_NC,CSTMR_CRRNCY_ID=@CSTMR_CRRNCY_ID,FRM_BLLNG_DT=@FRM_BLLNG_DT,TO_BLLNG_DT=@TO_BLLNG_DT,TTL_CST_IN_CSTMR_CRRNCY_NC=@TTL_CST_IN_CSTMR_CRRNCY_NC,TTL_CST_IN_INVC_CRRNCY_NC=@TTL_CST_IN_INVC_CRRNCY_NC,MDFD_BY=@MDFD_BY,MDFD_DT=@MDFD_DT,NO_OF_EQPMNT=@NO_OF_EQPMNT,INVC_CNCL=NULL WHERE INVC_BIN=@INVC_BIN AND DPT_ID=@DPT_ID"
    Private Const INVOICE_TABLEUpdateQueryInvoiceNo As String = "UPDATE @INVOICE_TABLE SET DRFT_INVC_NO=NULL WHERE DPT_ID=@DPT_ID AND DRFT_INVC_NO IN("
    'Private Const INOVICE_HISTORYUpdateQuerybyInvoiceNo As String = "UPDATE INVOICE_HISTORY SET ACTV_BT=0 WHERE DPT_ID=@DPT_ID AND ACTV_BT=1 AND INVC_TYP=@INVC_TYP AND INVC_NO<>@INVC_NO AND  BLLNG_FLG=@BLLNG_FLG AND ((FRM_BLLNG_DT>=@FRM_BLLNG_DT AND FRM_BLLNG_DT<=@TO_BLLNG_DT)OR (TO_BLLNG_DT>=@FRM_BLLNG_DT AND TO_BLLNG_DT<=@TO_BLLNG_DT)) AND "
    Private Const SERVICE_PARTNERSelectQuery As String = "SELECT SRVC_PRTNR_ACTL_ID AS CSTMR_ID,SRVC_PRTNR_CD AS CSTMR_CD,SRVC_PRTNR_NAM AS CSTMR_NAM,DPT_ID,ACTV_BT,CRRNCY_ID,CRRNCY_CD AS CSTMR_CRRNCY_CD,CNTCT_ADDRSS,BLLNG_ADDRSS,ZP_CD,PHN_NO,FX_NO,RPRTNG_EML_ID,INVCNG_EML_ID,CNTCT_PRSN_NAM,EXCHNG_RT_PR_UNT_NC FROM V_SERVICE_PARTNER WHERE DPT_ID=@DPT_ID AND ACTV_BT=1 AND SRVC_PRTNR_ACTL_ID=@SRVC_PRTNR_ID AND SRVC_PRTNR_TYP_CD=@SRVC_PRTNR_TYP_CD"
    Private Const Bank_Detail_SelectQueryForLocalCurrency As String = "SELECT BNK_DTL_BIN,BNK_TYP_ID,BNK_TYP_CD,BNK_NM,BNK_ADDRSS,ACCNT_NO,IBAN_NO,SWIFT_CD,CRRNCY_ID,CRRNCY_CD,DPT_ID FROM V_BANK_DETAIL WHERE DPT_ID=@DPT_ID AND BNK_TYP_ID=44"
    Private Const Bank_Detail_SelectQueryForForeignCurrency As String = "SELECT BNK_DTL_BIN,BNK_TYP_ID,BNK_TYP_CD,BNK_NM,BNK_ADDRSS,ACCNT_NO,IBAN_NO,SWIFT_CD,CRRNCY_ID,CRRNCY_CD,DPT_ID FROM V_BANK_DETAIL WHERE DPT_ID=@DPT_ID AND BNK_TYP_ID=45"
    Private Const INOVICE_HISTORYUpdateQuerybyInvoiceNo As String = "UPDATE INVOICE_HISTORY SET ACTV_BT=0 WHERE DPT_ID=@DPT_ID AND ACTV_BT=1 AND INVC_TYP=@INVC_TYP AND  BLLNG_FLG=@BLLNG_FLG AND INVC_NO IN(  "
    Private Const Customer_Storage_DetailSelectQuery As String = "SELECT CSTMR_STRG_DTL_ID,CSTMR_CHRG_DTL_ID,CSTMR_ID,UP_TO_DYS,STRG_CHRG_NC,RMRKS_VC FROM CUSTOMER_STORAGE_DETAIL WHERE CSTMR_CHRG_DTL_ID = (SELECT CSTMR_CHRG_DTL_ID FROM CUSTOMER_CHARGE_DETAIL WHERE CSTMR_ID =@CSTMR_ID AND EQPMNT_TYP_ID=@EQPMNT_TYP_ID AND EQPMNT_CD_ID=@EQPMNT_CD_ID) ORDER BY UP_TO_DYS"
    Private Const Activity_StatusUpdateQueryForInvoiceGeneratedBit As String = "UPDATE ACTIVITY_STATUS SET INVC_GNRT_BT=@INVC_GNRT_BT WHERE EQPMNT_NO=@EQPMNT_NO AND GI_TRNSCTN_NO=@GI_TRNSCTN_NO AND DPT_ID=@DPT_ID"
    Private Const Invoice_History_DetailInsertQuery As String = "INSERT INTO INVOICE_HISTORY_DETAIL(INVC_HSTRY_DTL_ID,INVC_NO,EQPMNT_NO,GI_TRNSCTN_NO,RNTL_RFRNC_NO,HNDLNG_IN_AMNT_NC,HNDLNG_OT_AMNT_NC,STRG_AMNT_NC,DPT_AMNT_NC,CSTMR_AMNT_NC,STRG_DYS,FR_DYS,ON_HR_SRVY_NC,OFF_HR_SRVY_NC,OTHR_CHRG_NC,FRM_BLLNG_DT,TO_BLLNG_DT)VALUES(@INVC_HSTRY_DTL_ID,@INVC_NO,@EQPMNT_NO,@GI_TRNSCTN_NO,@RNTL_RFRNC_NO,@HNDLNG_IN_AMNT_NC,@HNDLNG_OT_AMNT_NC,@STRG_AMNT_NC,@DPT_AMNT_NC,@CSTMR_AMNT_NC,@STRG_DYS,@FR_DYS,@ON_HR_SRVY_NC,@OFF_HR_SRVY_NC,@OTHR_CHRG_NC,@FRM_BLLNG_DT,@TO_BLLNG_DT)"

#End Region

#Region "pub_UpdateInvoiceTableInvoiceNoBillingFlag"
    Public Function pub_UpdateInvoiceTableInvoiceNoBillingFlag(ByVal bv_strTable1PrimaryID As String, _
                                                               ByVal bv_strTable2PrimaryID As String, _
                                                               ByVal bv_strBillingFlag As String, _
                                                               ByRef bv_strInvoiceNo As String, _
                                                               ByVal bv_i64CustomerCurrencyID As Int64, _
                                                               ByVal bv_i64DepotCurrencyID As Int64, _
                                                               ByVal bv_decExchangeRate As Decimal, _
                                                               ByVal bv_datFromDate As Date, _
                                                               ByVal bv_datToDate As Date, _
                                                               ByVal bv_dblTotalCustomerAmount As Double, _
                                                               ByVal bv_dblTotalDepotAmount As Double, _
                                                               ByVal bv_i64CustomerID As Int64, _
                                                               ByVal bv_i64InvoicingPartyID As Int64, _
                                                               ByVal bv_i32DepotID As Int32, _
                                                               ByVal bv_strUserName As String, _
                                                               ByVal bv_blnGenerateInvoiceNo As Boolean, _
                                                               ByVal bv_i32InvoiceTypeID As Int32, _
                                                               ByVal bv_strInvoiceType As String, _
                                                               ByVal bv_strBillingMode As String, _
                                                               ByVal bv_strOldInvoiceNo As String, _
                                                               ByRef br_strInvoiceFileName As String, _
                                                               ByVal bv_strGITransactionNo As String, _
                                                               ByVal bv_strEquipmentNo As String, _
                                                               ByVal bv_dsDataset As DataSet, _
                                                               ByVal bv_intNoofEquipment As Integer,
                                                               ByVal bv_strInvoicePrefix As String, _
                                                               ByVal bv_blnFinanceKey As Boolean, _
                                                               ByVal bv_dtInvoiceHeader As DataTable, _
                                                               ByRef bv_Error_Msg As String) As Boolean
        Dim objTrans As New Transactions
        Try
            Dim dtInvoiceHistory As New DataTable
            Dim strTableName As String = String.Empty
            Dim strPrimaryKey As String = String.Empty
            Dim strInvoiceFormat As String = String.Empty
            Dim strMaxNoInvoiceFormat As String = String.Empty
            Dim strUpdateFieldsQuery As String = String.Empty
            Dim strInvoiceNo As String = String.Empty
            Dim strUpdateInvoiceHistoryInvcNo As String = String.Empty
            Dim strSplitInvoiceNo As String()
            Dim blnCurrentInvoiceGen As Boolean = False
            Dim strInvoiceTypeDataTableName As String = Nothing
            Dim strInvoiceType As String = Nothing
            Dim bv_i32ServicePartnerId As Int32
            If bv_strInvoiceNo <> String.Empty Then
                bv_strOldInvoiceNo = bv_strInvoiceNo
                strInvoiceNo = bv_strInvoiceNo
            End If

            If IsDBNull(bv_i64CustomerID) OrElse bv_i64CustomerID = 0 Then
                bv_i32ServicePartnerId = bv_i64InvoicingPartyID
            Else
                bv_i32ServicePartnerId = bv_i64CustomerID
            End If
            Select Case bv_i32InvoiceTypeID
                Case 78 'Handling & Storage
                    strInvoiceTypeDataTableName = "Handling_Storage_Invoice"
                    strInvoiceType = "HANDLING & STORAGE"
                    Dim dtStorage As New DataTable
                    strTableName = CommonUIData._STORAGE_CHARGE
                    strPrimaryKey = CommonUIData.STRG_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.HANDLINGSTORAGE_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                        dtStorage = pub_GetDetails(String.Concat("SELECT * FROM ", strTableName, " WHERE ", CommonUIData.DPT_ID, "=", bv_i32DepotID, " AND ", CommonUIData.STRG_CHRG_ID, " IN (", bv_strTable2PrimaryID, ") "), _
                                                   objTrans)
                    End If
                    strInvoiceFormat = CommonUIData.HANDLINGSTORAGE_INVOICE_DRAFT

                    If bv_strInvoiceNo <> String.Empty Then
                        pub_UpdateInvoiceTableInvoiceNo(bv_strInvoiceNo, strUpdateInvoiceHistoryInvcNo, _
                                                        bv_i32DepotID, strTableName, objTrans)
                    End If

                    If bv_strTable2PrimaryID.Contains(CChar(",")) Then
                        strInvoiceNo = String.Empty
                        If bv_strInvoiceNo <> String.Empty AndAlso bv_strInvoiceNo.Contains(",") Then
                            strSplitInvoiceNo = bv_strInvoiceNo.Split(CChar(","))
                            For i As Integer = 0 To strSplitInvoiceNo.Length - 1
                                strInvoiceNo = strSplitInvoiceNo(i)
                                Exit For
                            Next
                        ElseIf bv_strInvoiceNo <> String.Empty Then
                            strInvoiceNo = bv_strInvoiceNo
                        End If

                        Dim strTable2PrimaryIDsplit() As String = bv_strTable2PrimaryID.Split(CChar(","))
                        For i As Integer = 0 To strTable2PrimaryIDsplit.Length - 1
                            If UCase(bv_strBillingMode) <> "DRAFT" Then
                                strUpdateFieldsQuery = String.Empty
                                pub_GetStorageUpdateFieldQuery(bv_dsDataset, strTable2PrimaryIDsplit(i), dtStorage, strUpdateFieldsQuery, bv_datToDate)
                            End If
                            UpdateInvoiceNoBillingFlag(strTable2PrimaryIDsplit(i), _
                                                       bv_strBillingFlag, _
                                                       strInvoiceNo, _
                                                       bv_i32DepotID, _
                                                       bv_blnGenerateInvoiceNo, _
                                                       strTableName, _
                                                       strPrimaryKey, _
                                                       strMaxNoInvoiceFormat, _
                                                       strInvoiceFormat, _
                                                       bv_strBillingMode, _
                                                       strUpdateFieldsQuery, _
                                                       bv_i32ServicePartnerId, _
                                                       objTrans)
                            If Not blnCurrentInvoiceGen AndAlso bv_blnGenerateInvoiceNo Then
                                bv_strInvoiceNo = strInvoiceNo
                                bv_blnGenerateInvoiceNo = False
                                blnCurrentInvoiceGen = True
                            End If
                        Next
                    Else
                        If UCase(bv_strBillingMode) <> "DRAFT" Then
                            strUpdateFieldsQuery = String.Empty
                            pub_GetStorageUpdateFieldQuery(bv_dsDataset, bv_strTable2PrimaryID, dtStorage, strUpdateFieldsQuery, bv_datToDate)
                        End If
                        UpdateInvoiceNoBillingFlag(bv_strTable2PrimaryID, _
                                                   bv_strBillingFlag, _
                                                   strInvoiceNo, _
                                                   bv_i32DepotID, _
                                                   bv_blnGenerateInvoiceNo, _
                                                   strTableName, _
                                                   strPrimaryKey, _
                                                   strMaxNoInvoiceFormat, _
                                                   strInvoiceFormat, _
                                                   bv_strBillingMode, _
                                                   strUpdateFieldsQuery, _
                                                   bv_i32ServicePartnerId, _
                                                   objTrans)
                        If Not blnCurrentInvoiceGen AndAlso bv_blnGenerateInvoiceNo Then
                            bv_strInvoiceNo = strInvoiceNo
                            blnCurrentInvoiceGen = True
                            bv_blnGenerateInvoiceNo = False
                        End If
                    End If

                    bv_blnGenerateInvoiceNo = False
                    strTableName = CommonUIData._HANDLING_CHARGE
                    strPrimaryKey = CommonUIData.HNDLNG_CHRG_ID
                Case 79 'Heating
                    strInvoiceTypeDataTableName = "HEATING_INVOICE"
                    strInvoiceType = "HEATING"
                    strTableName = CommonUIData._HEATING_CHARGE
                    strPrimaryKey = CommonUIData.HTNG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.HEATING_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.HEATING_INVOICE_DRAFT
                Case 80 'Cleaning
                    strInvoiceTypeDataTableName = "Cleaning_Invoice"
                    strInvoiceType = "Cleaning"
                    strTableName = CommonUIData._CLEANING_CHARGE
                    strPrimaryKey = CommonUIData.CLNNG_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.CLEANING_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.CLEANING_INVOICE_DRAFT

                    ''Cleaning SlabRate Implementation
                    Dim str_073Config As String = DecryptString(GetConfigByKeyName("073", GetHeadQuarterID()).Tables(CommonUIData._CONFIG).Rows(0).Item(ConfigData.KY_VL))
                    If UCase(bv_strBillingMode) = "DRAFT" AndAlso str_073Config.ToLower = "true" Then
                        Dim dtCleaning As DataTable
                        dtCleaning = pub_GetDetails(String.Concat("SELECT * FROM ", strTableName, " WHERE ", CommonUIData.DPT_ID, "=", bv_i32DepotID, " AND ", strPrimaryKey, " IN (", bv_strTable1PrimaryID, ") AND ", CleaningData.SLB_RT_BT, " = 1 "), objTrans)
                        For intClean As Integer = 0 To dtCleaning.Rows.Count - 1
                            Dim strGITransctnNo As String = dtCleaning.Rows(intClean).Item(CommonUIData.GI_TRNSCTN_NO).ToString
                            Dim intClnngID As Integer = dtCleaning.Rows(intClean).Item(CommonUIData.CLNNG_CHRG_ID).ToString
                            Dim strEqpmntNo As String = dtCleaning.Rows(intClean).Item(CommonUIData.EQPMNT_NO).ToString
                            Dim dr As DataRow() = bv_dsDataset.Tables(CommonUIData._V_CLEANING_CHARGE).Select(String.Concat(CommonUIData.EQPMNT_NO, "='", strEqpmntNo, "' AND ", CommonUIData.GI_TRNSCTN_NO, "='", strGITransctnNo, "'"))
                            Dim decCleaningRate As Decimal = iDec(dr(0).Item(CommonUIData.CLNNG_RT))
                            UpdateCleaningRateInCleaningCharge(strGITransctnNo, decCleaningRate, intClnngID, strEqpmntNo, objTrans)
                        Next
                    End If
                Case 81 'Repair
                    strInvoiceTypeDataTableName = "Repair_Invoice"
                    strInvoiceType = "Repair"
                    strTableName = CommonUIData._REPAIR_CHARGE
                    strPrimaryKey = CommonUIData.RPR_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.REPAIR_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.REPAIR_INVOICE_DRAFT
                Case 82 'Miscellaneous
                    strInvoiceTypeDataTableName = "MISCELLANEOUS_INVOICE"
                    strInvoiceType = "MISCELLANEOUS"
                    strTableName = CommonUIData._MISCELLANEOUS_INVOICE
                    strPrimaryKey = CommonUIData.MSCLLNS_INVC_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.MISCELLANEOUS_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.MISCELLANEOUS_INVOICE_DRAFT
                Case 140 'Credit Note
                    strInvoiceTypeDataTableName = "MISCELLANEOUS_INVOICE"
                    strInvoiceType = "CREDIT NOTE"
                    strTableName = CommonUIData._MISCELLANEOUS_INVOICE
                    strPrimaryKey = CommonUIData.MSCLLNS_INVC_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.CREDITNOTE_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.CREDITNOTE_INVOICE_DRAFT
                Case 83 'Transportation
                    strInvoiceTypeDataTableName = "TRANSPORTATION_INVOICE"
                    strInvoiceType = "TRANSPORTATION"
                    strTableName = CommonUIData._TRANSPORTATION_CHARGE
                    strPrimaryKey = CommonUIData.TRNSPRTTN_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.TRANSPORTATION_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.TRANSPORTATION_INVOICE_DRAFT
                Case 84 'Rental
                    strInvoiceTypeDataTableName = "RENTAL_INVOICE"
                    strInvoiceType = "RENTAL"
                    strTableName = CommonUIData._RENTAL_CHARGE
                    strPrimaryKey = CommonUIData.RNTL_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.RENTAL_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.RENTAL_INVOICE_DRAFT
                Case 151 'Inspection
                    strInvoiceTypeDataTableName = "INSPECTION_INVOICE"
                    strInvoiceType = "INSPECTION"
                    strTableName = CommonUIData._INSPECTION_CHARGES
                    strPrimaryKey = CommonUIData.INSPCTN_CHRG_ID
                    If UCase(bv_strBillingMode) = "DRAFT" Then
                        strMaxNoInvoiceFormat = CommonUIData.INSPECTION_INVOICE_DRAFT
                    Else
                        strMaxNoInvoiceFormat = CommonUIData.FINAL_INVOICE
                    End If
                    strInvoiceFormat = CommonUIData.INSPECTION_INVOICE_DRAFT
            End Select

            strUpdateFieldsQuery = String.Empty

            strInvoiceNo = String.Empty
            strUpdateInvoiceHistoryInvcNo = String.Empty
            strSplitInvoiceNo = Nothing

            If bv_strInvoiceNo <> String.Empty AndAlso Not blnCurrentInvoiceGen Then
                pub_UpdateInvoiceTableInvoiceNo(bv_strInvoiceNo, strUpdateInvoiceHistoryInvcNo, _
                                                bv_i32DepotID, strTableName, objTrans)
            End If

            If bv_strTable1PrimaryID <> String.Empty Then
                strInvoiceNo = String.Empty

                If Not blnCurrentInvoiceGen Then
                    If bv_strInvoiceNo <> String.Empty AndAlso bv_strInvoiceNo.Contains(",") Then
                        strSplitInvoiceNo = bv_strInvoiceNo.Split(CChar(","))
                        For i As Integer = 0 To strSplitInvoiceNo.Length - 1
                            strInvoiceNo = strSplitInvoiceNo(i)
                            Exit For
                        Next
                    ElseIf bv_strInvoiceNo <> String.Empty Then
                        strInvoiceNo = bv_strInvoiceNo
                    End If
                    bv_strInvoiceNo = strInvoiceNo
                ElseIf bv_strOldInvoiceNo <> String.Empty AndAlso Not blnCurrentInvoiceGen Then
                    bv_strInvoiceNo = bv_strOldInvoiceNo
                End If

                ''Check Billing Till Date
                'Dim strUpdateQuery As String = String.Empty
                'If UCase(bv_strBillingMode) <> "DRAFT" AndAlso bv_i32InvoiceTypeID = 84 Then

                '    'pub_GetRentalUpdateFieldQuery(bv_dsDataset, strPrimaryKey, dtRental, strUpdateFieldsQuery, bv_datToDate)
                'End If
                ''

                UpdateInvoiceNoBillingFlag(bv_strTable1PrimaryID, _
                                           bv_strBillingFlag, _
                                           bv_strInvoiceNo, _
                                           bv_i32DepotID, _
                                           bv_blnGenerateInvoiceNo, _
                                           strTableName, _
                                           strPrimaryKey, _
                                           strMaxNoInvoiceFormat, _
                                           strInvoiceFormat, _
                                           bv_strBillingMode, _
                                           strUpdateFieldsQuery, _
                                           bv_i32ServicePartnerId, _
                                            objTrans)
            End If

            If UCase(bv_strBillingMode) = "DRAFT" Then
                br_strInvoiceFileName = String.Concat(bv_strInvoiceType, "_", bv_strBillingMode, "_", bv_strInvoiceNo).Replace("/", "_")
            Else
                br_strInvoiceFileName = String.Concat(bv_strInvoicePrefix, bv_strInvoiceType, bv_strInvoiceNo).Replace("/", "_")
            End If

            dtInvoiceHistory = GetInvoice_HistoryByInvoiceNo(bv_strInvoiceNo, UCase(bv_strBillingMode), bv_i32DepotID, objTrans).Tables(CommonUIData._INVOICE_HISTORY)

            If dtInvoiceHistory.Rows.Count = 0 Then
                CreateInvoiceHistory(bv_strInvoiceNo, _
                                     DateTime.Now, _
                                     String.Empty, _
                                     bv_strInvoiceType, _
                                     bv_i64CustomerCurrencyID, _
                                     bv_decExchangeRate, bv_i64DepotCurrencyID, _
                                     0, bv_datFromDate, bv_datToDate, _
                                     bv_dblTotalCustomerAmount, _
                                     bv_dblTotalDepotAmount, _
                                     UCase(bv_strBillingMode), bv_i64CustomerID, _
                                     bv_i64InvoicingPartyID, _
                                     bv_i32DepotID, True, _
                                     bv_strUserName, DateTime.Now, _
                                     br_strInvoiceFileName, _
                                     bv_intNoofEquipment, objTrans)

                If UCase(bv_strBillingMode) <> "DRAFT" Then
                    If bv_strOldInvoiceNo <> String.Empty Then
                        bv_strOldInvoiceNo = String.Concat("'", bv_strOldInvoiceNo, "'")
                    End If
                    UpdateInvoiceHistoryActiveBit(bv_i64CustomerID, "DRAFT", _
                                                  bv_i32DepotID, bv_datFromDate, _
                                                  bv_datToDate, bv_i64InvoicingPartyID, _
                                                  bv_strInvoiceType, bv_strOldInvoiceNo, _
                                                  objTrans)
                End If

            Else
                If Not bv_blnGenerateInvoiceNo AndAlso strUpdateInvoiceHistoryInvcNo <> String.Empty Then
                    UpdateInvoiceHistoryActiveBit(bv_i64CustomerID, "DRAFT", _
                                                  bv_i32DepotID, bv_datFromDate, _
                                                  bv_datToDate, bv_i64InvoicingPartyID, _
                                                  bv_strInvoiceType, strUpdateInvoiceHistoryInvcNo, _
                                                  objTrans)
                End If

                UpdateInvoiceHistory(CLng(dtInvoiceHistory.Rows(0).Item(CommonUIData.INVC_BIN)), _
                                     DateTime.Now, _
                                     bv_i64CustomerCurrencyID, _
                                     bv_decExchangeRate, bv_i64DepotCurrencyID, _
                                     bv_datFromDate, bv_datToDate, _
                                     bv_dblTotalCustomerAmount, _
                                     bv_dblTotalDepotAmount, _
                                     bv_i32DepotID, _
                                     bv_strUserName, DateTime.Now, _
                                     bv_intNoofEquipment, _
                                     objTrans)
            End If

            Dim strGITransactionNo As String = String.Empty
            Dim strEquipmentNo As String = String.Empty
            If bv_strGITransactionNo <> String.Empty AndAlso bv_strEquipmentNo <> String.Empty Then
                If bv_strGITransactionNo.Contains(CChar(",")) Then
                    Dim dtEquipmentNo As New DataTable
                    dtEquipmentNo.Columns.Add(CommonUIData.EQPMNT_NO, GetType(System.String))
                    dtEquipmentNo.Columns.Add(CommonUIData.GI_TRNSCTN_NO, GetType(System.String))
                    Dim strSplitGITransactionNo() As String = bv_strGITransactionNo.Split(CChar(","))
                    Dim strSplitEquipmentNo() As String = bv_strEquipmentNo.Split(CChar(","))
                    For intSplit As Integer = 0 To strSplitGITransactionNo.Length - 1
                        Dim drEquipmentNo As DataRow = dtEquipmentNo.NewRow
                        strGITransactionNo = strSplitGITransactionNo(intSplit)
                        strEquipmentNo = strSplitEquipmentNo(intSplit)
                        drEquipmentNo.Item(CommonUIData.EQPMNT_NO) = strEquipmentNo
                        drEquipmentNo.Item(CommonUIData.GI_TRNSCTN_NO) = strGITransactionNo
                        UpdateActivityStatusForInvoiceGeneratedBit(strEquipmentNo, strGITransactionNo, True, bv_i32DepotID, objTrans)
                        If bv_i32InvoiceTypeID = 78 AndAlso UCase(bv_strBillingMode) <> "DRAFT" AndAlso dtEquipmentNo.Select(String.Concat(CommonUIData.EQPMNT_NO, "='", strEquipmentNo, "' AND ", CommonUIData.GI_TRNSCTN_NO, "='", strGITransactionNo, "'")).Length = 0 Then 'Handling & Storage
                            pub_HandlingStorageInvoiceHistoryDetail(bv_dsDataset, strEquipmentNo, _
                                                                    strGITransactionNo, bv_strInvoiceNo, _
                                                                    bv_datFromDate, bv_datToDate, _
                                                                    objTrans)
                        End If
                        dtEquipmentNo.Rows.Add(drEquipmentNo)
                    Next
                Else
                    UpdateActivityStatusForInvoiceGeneratedBit(bv_strEquipmentNo, bv_strGITransactionNo, True, bv_i32DepotID, objTrans)
                    If bv_i32InvoiceTypeID = 78 AndAlso UCase(bv_strBillingMode) <> "DRAFT" Then 'Handling & Storage
                        pub_HandlingStorageInvoiceHistoryDetail(bv_dsDataset, bv_strEquipmentNo, _
                                                                bv_strGITransactionNo, bv_strInvoiceNo, _
                                                                bv_datFromDate, bv_datToDate, _
                                                                objTrans)
                    End If
                End If
            End If

            If bv_i32InvoiceTypeID = 83 Then  'Transportation
                If bv_strTable2PrimaryID.Contains(CChar(",")) Then
                    Dim strTable2PrimaryIDsplit() As String = bv_strTable2PrimaryID.Split(CChar(","))
                    For I As Integer = 0 To strTable2PrimaryIDsplit.Length - 1
                        If UCase(bv_strBillingMode) <> "DRAFT" Then
                            UpdateTransportationStatusId(CLng(strTable2PrimaryIDsplit(I)), objTrans)
                        End If
                    Next
                Else
                    If UCase(bv_strBillingMode) <> "DRAFT" Then
                        UpdateTransportationStatusId(CLng(bv_strTable2PrimaryID), objTrans)
                    End If
                End If
            ElseIf bv_i32InvoiceTypeID = 84 AndAlso UCase(bv_strBillingMode) <> "DRAFT" Then 'Rental
                pub_RentalInvoiceHistoryDetail(bv_dsDataset, bv_strInvoiceNo, bv_i32DepotID, bv_strTable1PrimaryID, bv_datFromDate, bv_datToDate, objTrans)
            End If


            ''''''''''''''''''''''''''''''''''''''''''''''''

            'Finance Integrations
            'Sage_Invoice_Generations()
            bv_Error_Msg = String.Empty

            If bv_strBillingMode.ToUpper() = "FINAL" AndAlso bv_blnFinanceKey = True Then

                bv_Error_Msg = Sage_Invoice_Generations(strInvoiceType, bv_strInvoiceNo, bv_dtInvoiceHeader, bv_dsDataset.Tables(strInvoiceTypeDataTableName), objTrans)
            End If

            '''''''''''''''''''''''''''''''''''''''''''''''

            If bv_Error_Msg = String.Empty Then
                objTrans.commit()
            End If

            'objTrans.commit()
            ' objTrans.RollBack()
            Return True
        Catch ex As Exception

            objTrans.RollBack()
            Throw ex
        Finally
            objTrans = Nothing
        End Try
    End Function
#End Region

#Region "UpdateCleaningRateInCleaningCharge"
    Function UpdateCleaningRateInCleaningCharge(ByVal bv_strGITransctnNo As String, _
                                                ByVal bv_decCleaningRate As Decimal, _
                                                ByVal bv_intCleaningChargeID As Integer, _
                                                ByVal bv_EquipmentNo As String, _
                                                ByRef objTransation As Transactions)
        Try
            Dim dr As DataRow

            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._CLEANING_CHARGE).NewRow()
            With dr
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGITransctnNo
                .Item(CommonUIData.CLNNG_RT) = bv_decCleaningRate
                .Item(CommonUIData.CLNNG_CHRG_ID) = bv_intCleaningChargeID
                .Item(CommonUIData.EQPMNT_NO) = bv_EquipmentNo
            End With
            UpdateCleaningRateInCleaningCharge = objData.UpdateRow(dr, CleaningChargeUpdateQuery, objTransation)
            dr = Nothing
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "Sage Finance Integrations - Methods"

    Private Function Sage_Invoice_Generations(ByVal strInvoiceType As String, ByVal bv_strInvoiceNo As String, _
                                              ByVal dtInvoiceHeader As DataTable, ByVal dtInvoiceDetails As DataTable, _
                                              ByRef br_objtrans As Transactions) As String

        Try
            'Declaration
            'Dim hshInvoiceParam As Hashtable = Nothing
            'Dim hshInvoiceDetailsParam As Hashtable = Nothing
            'Dim hshInvoicePayementParam As Hashtable = Nothing

            Dim dtFinanceIntegration As DataTable
            Dim strLedgerId As String = Nothing
            'GetFINANCE_INTEGRATION

            Dim objFINANCE_INTEGRATION As New FinanceIntegrations

            'objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(dtParam, objTrans)

            'Get Finance Integration Master based on Invoice Type
            dtFinanceIntegration = objFINANCE_INTEGRATION.GetFINANCE_INTEGRATIONByINVC_TYP_CD(strInvoiceType.ToUpper(), br_objtrans)
            'Get Customer Ledger Id

            If Not IsDBNull(dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID)) Then
                Dim intCount As Int32
                If GetMultiLocationSupportConfig().ToLower = "true" Then
                    intCount = objFINANCE_INTEGRATION.CheckCustomer_LedgerIdExist(GetHeadQuarterID(), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                Else
                    intCount = objFINANCE_INTEGRATION.CheckCustomer_LedgerIdExist(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                End If

                If intCount > 0 Then
                    If GetMultiLocationSupportConfig().ToLower = "true" Then
                        strLedgerId = objFINANCE_INTEGRATION.GetCustomer_LedgerId(GetHeadQuarterID, dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                    Else
                        strLedgerId = objFINANCE_INTEGRATION.GetCustomer_LedgerId(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                    End If
                Else
                    br_objtrans.RollBack()
                    Return "Customer does not have Ledger Id"
                End If


            ElseIf Not IsDBNull(dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID)) Then
                Dim intCount As Int32
                If GetMultiLocationSupportConfig().ToLower = "true" Then
                    intCount = objFINANCE_INTEGRATION.CheckGetInvoiceParty_LedgerIdExist(GetHeadQuarterID(), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                Else
                    intCount = objFINANCE_INTEGRATION.CheckGetInvoiceParty_LedgerIdExist(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                End If

                If intCount > 0 Then
                    If GetMultiLocationSupportConfig().ToLower = "true" Then
                        strLedgerId = objFINANCE_INTEGRATION.GetInvoiceParty_LedgerId(GetHeadQuarterID, dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                    Else
                        strLedgerId = objFINANCE_INTEGRATION.GetInvoiceParty_LedgerId(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                    End If
                Else
                    br_objtrans.RollBack()
                    Return "Invoicing Party does not have Ledger Id"
                End If

            End If
            Dim datLogDate As DateTime = DateTime.Now
            If GetMultiLocationSupportConfig.ToLower = "true" Then
                strLedgerId = String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), strLedgerId)
            End If

            Select Case strInvoiceType.ToUpper()


                Case "CLEANING"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("CLEANING ")

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        'TNK - 10No, 

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1


                    ''''''''''''''''''''

                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(strFilter).Length
                        Dim strTextDesc As String = String.Concat("CLEANING ", dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intTypeCount, "No")

                        If dtInvoiceDetails.Select(strFilter).Length > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)

                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''







                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(strFilter).Length
                        Dim strTextDesc As String = String.Concat("CLEANING ", dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intTypeCount, "No")

                        If dtInvoiceDetails.Select(strFilter).Length > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) 'String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If

                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next


                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "REPAIR"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("REPAIR ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''

                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)

                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice
                        End If

                    Next
                    ''''''''''''''''''''''''''''

                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)

                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next

                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)


                Case "TRANSPORTATION"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("TRANSPORTATION ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D
                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice
                        End If

                    Next

                    ''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)




                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)


                Case "RENTAL"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("RENTAL ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1

                    ''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D
                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next
                    '''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "HANDLING & STORAGE"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("STORAGE ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1

                    '''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "HEATING"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("HEATING ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    '''''''''''''''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable
                    'Multilocation


                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "MISCELLANEOUS"

                    Dim sbInvoice As New StringBuilder
                    sbInvoice.Append("MISCELLANEOUS ")

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(MiscellaneousInvoiceData.MIS_CTGRY))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'Int - 20,40,, increased 20's for every line Item
                            End If

                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                            'hshInvoiceDetailsParam.Add("@TEXTDESC", "Charge Description") 'string

                            If dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN).ToString() <> Nothing Then
                                hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN)) 'string
                            Else
                                hshInvoiceDetailsParam.Add("@TEXTDESC", DBNull.Value) 'string
                            End If

                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "CREDIT NOTE"

                    Dim sbInvoice As New StringBuilder

                    'Get Distinct Equipment Types
                    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    For Each dr As DataRow In dtDistictEqpType.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                        If intCount > 0 Then
                            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                        End If

                    Next

                    sbInvoice.Length = sbInvoice.Length - 1

                    '''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D
                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next


                    '''''''''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", bv_strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 1 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(MiscellaneousInvoiceData.MIS_CTGRY))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'Int - 20,40,, increased 20's for every line Item
                            End If

                            hshInvoiceDetailsParam.Add("@IDINVC", bv_strInvoiceNo) 'string

                            If dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN).ToString() <> Nothing Then
                                hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN)) 'string
                            Else
                                hshInvoiceDetailsParam.Add("@TEXTDESC", DBNull.Value) 'string
                            End If

                            'hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

            End Select
            Return String.Empty
        Catch ex As Exception
            Throw ex
        End Try

    End Function



    Public Function Sage_Invoice_Generations_InvoiceCancel(ByVal strInvoiceType As String, _
                                                           ByRef strInvoiceNo As String, _
                                                           ByVal dtInvoiceHeader As DataTable, _
                                                           ByVal dtInvoiceDetails As DataTable, _
                                                           ByVal bv_strRemarks As String, _
                                                           ByVal bv_DepoId As Int32, _
                                                           ByRef br_objtrans As Transactions) As String



        Try

            Dim dtFinanceIntegration As DataTable
            Dim strLedgerId As String = Nothing
            Dim InvoiceCancelDate As DateTime = DateTime.Now
            Dim strMaxNoInvoiceFormat As String = Nothing
            Dim objIndexPatterns As New IndexPatterns

            'Chnage Invoice No for Credit Note - Cancelled Invoice - Add Postfix CN

            Dim InvoiceNo As String = strInvoiceNo

            strInvoiceNo = InvoiceNo.Substring(0, InvoiceNo.Length - 2)
            strInvoiceNo = String.Concat(strInvoiceNo, "CN")



            'GetFINANCE_INTEGRATION

            Dim objFINANCE_INTEGRATION As New FinanceIntegrations

            'Get Finance Integration Master based on Invoice Type
            dtFinanceIntegration = objFINANCE_INTEGRATION.GetFINANCE_INTEGRATIONByINVC_TYP_CD(strInvoiceType.ToUpper(), br_objtrans)

            'Get Customer Ledger Id
            If Not IsDBNull(dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID)) Then
                Dim intCount As Int32
                If GetMultiLocationSupportConfig().ToLower = "true" Then
                    intCount = objFINANCE_INTEGRATION.CheckCustomer_LedgerIdExist(GetHeadQuarterID(), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                Else
                    intCount = objFINANCE_INTEGRATION.CheckCustomer_LedgerIdExist(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                End If


                If intCount > 0 Then
                    If GetMultiLocationSupportConfig().ToLower = "true" Then
                        strLedgerId = objFINANCE_INTEGRATION.GetCustomer_LedgerId(GetHeadQuarterID, dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                    Else
                        strLedgerId = objFINANCE_INTEGRATION.GetCustomer_LedgerId(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(CustomerData.CSTMR_ID), br_objtrans)
                    End If

                Else
                    br_objtrans.RollBack()
                    Return "Customer does not have Ledger Id"
                End If


            ElseIf Not IsDBNull(dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID)) Then
                Dim intCount As Int32
                If GetMultiLocationSupportConfig().ToLower = "true" Then
                    intCount = objFINANCE_INTEGRATION.CheckGetInvoiceParty_LedgerIdExist(GetHeadQuarterID(), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                Else
                    intCount = objFINANCE_INTEGRATION.CheckGetInvoiceParty_LedgerIdExist(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                End If


                If intCount > 0 Then
                    If GetMultiLocationSupportConfig().ToLower = "true" Then
                        strLedgerId = objFINANCE_INTEGRATION.GetInvoiceParty_LedgerId(GetHeadQuarterID, dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                    Else
                        strLedgerId = objFINANCE_INTEGRATION.GetInvoiceParty_LedgerId(dtInvoiceHeader.Rows(0).Item(CustomerData.DPT_ID), dtInvoiceHeader.Rows(0).Item(InvoicePartyData.INVCNG_PRTY_ID), br_objtrans)
                    End If

                Else
                    br_objtrans.RollBack()
                    Return "Invoicing Party does not have Ledger Id"
                End If

            End If

            Dim datLogDate As DateTime = DateTime.Now

            If GetMultiLocationSupportConfig.ToLower = "true" Then
                strLedgerId = String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), strLedgerId)
            End If
            Select Case strInvoiceType.ToUpper()


                Case "CLEANING"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("CLEANING ")

                    'For Each dr As DataRow In dtFinanceIntegration.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    'TNK - 10No, 

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1


                    ''''''''''''''''''''

                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(strFilter).Length
                        Dim strTextDesc As String = String.Concat("CLEANING ", dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intTypeCount, "No")

                        If dtInvoiceDetails.Select(strFilter).Length > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)

                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''

                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice    
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - Default value
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute("SUM(CLNNG_RT)", strFilter))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(strFilter).Length
                        Dim strTextDesc As String = String.Concat("CLEANING ", dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intTypeCount, "No")

                        If dtInvoiceDetails.Select(strFilter).Length > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) 'String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next


                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "REPAIR"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("REPAIR ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''

                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)

                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice
                        End If

                    Next
                    ''''''''''''''''''''''''''''

                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice   
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)

                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next

                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)


                Case "TRANSPORTATION"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("TRANSPORTATION ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D
                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice
                        End If

                    Next

                    ''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice   
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)




                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)


                Case "RENTAL"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("RENTAL ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1

                    ''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D
                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then


                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next
                    '''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice 
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "HANDLING & STORAGE"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("STORAGE ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1

                    '''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice 
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "HEATING"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("HEATING ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    '''''''''''''''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice 
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtFinanceIntegration.Rows

                        Dim strFilter As String = String.Concat("SUM(", dr.Item(FinanceIntegrationData.CTGRY_CD), ")")

                        'Dim AmountPrice As Decimal = dtInvoiceDetails.Compute(strFilter, String.Empty)
                        Dim AmountPrice As Double = 0D

                        If Not dtInvoiceDetails.Compute(strFilter, String.Empty) Is DBNull.Value Then
                            AmountPrice = CDbl(dtInvoiceDetails.Compute(strFilter, String.Empty))
                        End If

                        Dim intTypeCount As Int32 = dtInvoiceDetails.Select(String.Concat(dr.Item(FinanceIntegrationData.CTGRY_CD), " > 0")).Length
                        Dim strTextDesc As String = String.Concat(dr.Item(FinanceIntegrationData.ITEM_CD), " - ", intTypeCount, "No")

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(FinanceIntegrationData.ITEM_CD))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(FinanceIntegrationData.ITEM_CD)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            hshInvoiceDetailsParam.Add("@TEXTDESC", strTextDesc) 'string
                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                Case "MISCELLANEOUS"

                    'Dim sbInvoice As New StringBuilder
                    'sbInvoice.Append("MISCELLANEOUS ")

                    ''Get Distinct Equipment Types
                    'Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    'For Each dr As DataRow In dtDistictEqpType.Rows

                    '    Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '    Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '    If intCount > 0 Then
                    '        sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '    End If

                    'Next

                    'sbInvoice.Length = sbInvoice.Length - 1


                    '''''''''''''''''''''''''''''''''''''''''''
                    Dim decHeaderTot As Decimal = 0D

                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            decHeaderTot = decHeaderTot + AmountPrice

                        End If

                    Next

                    ''''''''''''''''''''''''''''''''''''''''


                    'Create Invoice Header
                    Dim hshInvoiceParam As New Hashtable

                    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    'hshInvoiceParam.Add("@TEXTTRX", 1) 'int - By Default 1 for Invoice
                    'hshInvoiceParam.Add("@IDTRX", 11) 'Int  - By Default 11 for Invoice    
                    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 3 for Invoice
                    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 31 for Invoice 
                    'hshInvoiceParam.Add("@INVCDESC", sbInvoice.ToString()) 'String   - need calculation
                    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)


                    'Create Invoice Details
                    Dim hshInvoiceDetailsParam As New Hashtable
                    Dim IDITEM As Int32 = 0

                    For Each dr As DataRow In dtInvoiceDetails.Rows

                        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                        If AmountPrice > 0 Then

                            hshInvoiceDetailsParam = New Hashtable

                            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                            IDITEM = IDITEM + 20
                            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                            If GetMultiLocationSupportConfig.ToLower = "true" Then
                                hshInvoiceDetailsParam.Add("@IDITEM", String.Concat(dtInvoiceHeader.Rows(0).Item(DepotData.DPT_CD), dr.Item(MiscellaneousInvoiceData.MIS_CTGRY))) 'Int - 20,40,, increased 20's for every line Item
                            Else
                                hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'Int - 20,40,, increased 20's for every line Item
                            End If
                            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string
                            'hshInvoiceDetailsParam.Add("@TEXTDESC", "Charge Description") 'string

                            If dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN).ToString() <> Nothing Then
                                hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN)) 'string
                            Else
                                hshInvoiceDetailsParam.Add("@TEXTDESC", DBNull.Value) 'string
                            End If

                            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                        End If

                    Next



                    'Create Invoice Payment Schedule
                    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    DueDate = DueDate.AddDays(30)

                    Dim hshInvoicePayementParam As New Hashtable

                    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

                    'Case "CREDIT NOTE"

                    '    Dim sbInvoice As New StringBuilder

                    '    'Get Distinct Equipment Types
                    '    Dim dtDistictEqpType As DataTable = dtInvoiceDetails.DefaultView.ToTable(True, "EQPMNT_TYP_CD")

                    '    For Each dr As DataRow In dtDistictEqpType.Rows

                    '        Dim strFilter As String = String.Concat(InvoiceData.EQPMNT_TYP_CD, "='", dr.Item(InvoiceData.EQPMNT_TYP_CD), "'")
                    '        Dim intCount As Int32 = dtInvoiceDetails.Select(strFilter).Length

                    '        If intCount > 0 Then
                    '            sbInvoice.Append(String.Concat(dr.Item(InvoiceData.EQPMNT_TYP_CD), " - ", intCount, "No,"))
                    '        End If

                    '    Next

                    '    sbInvoice.Length = sbInvoice.Length - 1

                    '    '''''''''''''''''''''''''''''''''''
                    '    Dim decHeaderTot As Decimal = 0D
                    '    For Each dr As DataRow In dtInvoiceDetails.Rows

                    '        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                    '        If AmountPrice > 0 Then

                    '            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                    '            decHeaderTot = decHeaderTot + AmountPrice

                    '        End If

                    '    Next



                    '    '''''''''''''''''''''''''''''''''''


                    '    'Create Invoice Header
                    '    Dim hshInvoiceParam As New Hashtable

                    '    'hshInvoiceParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    '    hshInvoiceParam.Add("@IDCUST", strLedgerId) 'String
                    '    hshInvoiceParam.Add("@IDINVC", strInvoiceNo) 'string
                    '    hshInvoiceParam.Add("@TEXTTRX", 3) 'int - By Default 1 for Invoice
                    '    hshInvoiceParam.Add("@IDTRX", 31) 'Int  - By Default 11 for Invoice    
                    '    hshInvoiceParam.Add("@INVCDESC", "CREDIT NOTE") 'String   - need calculation
                    '    hshInvoiceParam.Add("@DATEINVC", dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT)) 'Date - Invoice Date
                    '    hshInvoiceParam.Add("@CODECURN", dtInvoiceHeader.Rows(0).Item(InvoiceData.INVC_CRRNCY_CD)) 'String - Invoice Currency
                    '    hshInvoiceParam.Add("@RATETYPE", "SP") 'String  - Always SP
                    '    hshInvoiceParam.Add("@EXCHRATEHC", CDec(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))) 'Decimal
                    '    hshInvoiceParam.Add("@TERMCODE", "30DAYS") 'String
                    '    hshInvoiceParam.Add("@AMTINVCTOT", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    '    hshInvoiceParam.Add("@CUROPER", 2) 'Int - Always 2
                    '    hshInvoiceParam.Add("@INVCTYPE", 1) 'Int - Always 1
                    '    'hshInvoiceParam.Add("@SPECINST", DateTime.Now.Date) 'String - always Blank
                    '    hshInvoiceParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    '    hshInvoiceParam.Add("@DATESYS", datLogDate) 'Date


                    '    Dim Invoice_ID As Long = objFINANCE_INTEGRATION.CreateInvoice_Procedure(hshInvoiceParam, br_objtrans)

                    '    'Create Invoice Details
                    '    Dim hshInvoiceDetailsParam As New Hashtable
                    '    Dim IDITEM As Int32 = 0

                    '    For Each dr As DataRow In dtInvoiceDetails.Rows

                    '        Dim AmountPrice As Double = CDbl(dr.Item(CommonUIData.DPT_TTL_NC))

                    '        If AmountPrice > 0 Then

                    '            hshInvoiceDetailsParam = New Hashtable

                    '            AmountPrice = RoundUp(CDbl(AmountPrice * CDbl(dtInvoiceHeader.Rows(0).Item(InvoiceData.EXCHNG_RT_NC))), 3)
                    '            IDITEM = IDITEM + 20
                    '            'hshInvoiceDetailsParam.Add("@SEQUENCE", 1) ' Int - Auto No from Max_Sno Table
                    '            hshInvoiceDetailsParam.Add("@SEQUENCELINE", Invoice_ID) 'Int
                    '            hshInvoiceDetailsParam.Add("@CNTLINE", IDITEM) ''String - IDITEM - Multiples of 20's
                    '            hshInvoiceDetailsParam.Add("@IDITEM", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'Int - 20,40,, increased 20's for every line Item
                    '            hshInvoiceDetailsParam.Add("@IDINVC", strInvoiceNo) 'string

                    '            If dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN).ToString() <> Nothing Then
                    '                hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.CHRG_DSCRPTN)) 'string
                    '            Else
                    '                hshInvoiceDetailsParam.Add("@TEXTDESC", DBNull.Value) 'string
                    '            End If

                    '            'hshInvoiceDetailsParam.Add("@TEXTDESC", dr.Item(MiscellaneousInvoiceData.MIS_CTGRY)) 'string
                    '            hshInvoiceDetailsParam.Add("@UNITMEAS", "Unit") 'String - Always Unit
                    '            hshInvoiceDetailsParam.Add("@QTYINVC", 1D) 'Decimal - Always 1
                    '            hshInvoiceDetailsParam.Add("@AMTPRIC", AmountPrice) 'Decimal - Need Calculations
                    '            hshInvoiceDetailsParam.Add("@AMTEXTN", AmountPrice) 'Decimal - Need Calculations - Same as above
                    '            hshInvoiceDetailsParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    '            hshInvoiceDetailsParam.Add("@DATESYS", datLogDate) 'Date

                    '            objFINANCE_INTEGRATION.CreateInvoiceDetails_Procedure(hshInvoiceDetailsParam, br_objtrans)

                    '        End If

                    '    Next



                    '    'Create Invoice Payment Schedule
                    '    Dim DueDate As Date = CDate(dtInvoiceHeader.Rows(0).Item(InvoiceData.TO_BLLNG_DT))
                    '    DueDate = DueDate.AddDays(30)

                    '    Dim hshInvoicePayementParam As New Hashtable

                    '    hshInvoicePayementParam.Add("@SEQUENCE", Invoice_ID) 'Int - Invoice Header Id
                    '    hshInvoicePayementParam.Add("@CNTPAYM", 1) 'Int - Always 1
                    '    hshInvoicePayementParam.Add("@DATEDUE", DueDate) 'Date - Invoice Date + 30 Days
                    '    hshInvoicePayementParam.Add("@AMTDUE", RoundUp(CDbl(decHeaderTot), 3)) 'Decimal - Customer Invoice total
                    '    hshInvoicePayementParam.Add("@INVIMPTD", 0) 'Int - Always 0
                    '    hshInvoicePayementParam.Add("@DATESYS", datLogDate)

                    '    objFINANCE_INTEGRATION.CreateInvoicePaymentSchedules_Procedure(hshInvoicePayementParam, br_objtrans)

            End Select
            Return String.Empty
        Catch ex As Exception
            Throw ex
        End Try

    End Function

    Private Function RoundUp(value As Double, decimals As Integer) As Double

        Return Math.Round(value, decimals, MidpointRounding.AwayFromZero)

        'Return Math.Ceiling(value * (10 ^ decimals)) / (10 ^ decimals)

    End Function



#End Region

#Region "pub_GetStorageUpdateFieldQuery"
    Public Function pub_GetStorageUpdateFieldQuery(ByVal bv_dsDataset As DataSet, _
                                                   ByVal bv_strTable2PrimaryID As String, _
                                                   ByVal bv_dtStorage As DataTable, _
                                                   ByRef br_strUpdateFieldsQuery As String, _
                                                   ByVal bv_datToDate As Date) As Boolean
        Try
            br_strUpdateFieldsQuery = String.Concat(CommonUIData.BLLNG_TLL_DT, "='", bv_datToDate, "',", CommonUIData.STRG_CNTN_FLG, "= (CASE WHEN IS_GT_OT_FLG='O' AND TO_BLLNG_DT<='", bv_datToDate, "' THEN 'S' ELSE 'C' END ),")
            Dim drOldValue() As DataRow = bv_dtStorage.Select(String.Concat(CommonUIData.STRG_CHRG_ID, "=", bv_strTable2PrimaryID))
            Dim intFreeDays As Integer = 0
            Dim decTotalAmount As Decimal = 0.0
            Dim intDays As Integer = 0
            If drOldValue.Length > 0 Then
                If Not IsDBNull(drOldValue(0).Item(CommonUIData.FR_DYS)) Then
                    intFreeDays = CInt(drOldValue(0).Item(CommonUIData.FR_DYS))
                End If
                If Not IsDBNull(drOldValue(0).Item(CommonUIData.TTL_CSTS_NC)) Then
                    decTotalAmount = CDec(drOldValue(0).Item(CommonUIData.TTL_CSTS_NC))
                End If
                If Not IsDBNull(drOldValue(0).Item(CommonUIData.NO_OF_DYS)) Then
                    intDays = CInt(drOldValue(0).Item(CommonUIData.NO_OF_DYS))
                End If
                Dim drValue() As DataRow = bv_dsDataset.Tables(CommonUIData._HANDLING_STORAGE_INVOICE).Select(String.Concat(CommonUIData.EQPMNT_NO, "='", CStr(drOldValue(0).Item(CommonUIData.EQPMNT_NO)), "' AND ", CommonUIData.GI_TRNSCTN_NO, "='", CStr(drOldValue(0).Item(CommonUIData.GI_TRNSCTN_NO)), "'"))
                If drValue.Length > 0 Then
                    intFreeDays = intFreeDays + CInt(drValue(0).Item(CommonUIData.FR_DYS))
                    intDays = intDays + CInt(drValue(0).Item(CommonUIData.STORAGE_DAYS))
                    decTotalAmount = decTotalAmount + CDec(drValue(0).Item(CommonUIData.DPT_TTL_NC))
                    br_strUpdateFieldsQuery = String.Concat(br_strUpdateFieldsQuery, CommonUIData.FR_DYS, "= ", intFreeDays, ",", CommonUIData.NO_OF_DYS, "=", intDays, ",", CommonUIData.TTL_CSTS_NC, "= ", decTotalAmount, ",")
                End If
            End If
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetDetails"
    Public Function pub_GetDetails(ByVal bv_strQuery As String, _
                                   ByRef br_objTransaction As Transactions) As DataTable
        Try
            Dim dtDetail As New DataTable
            objData = New DataObjects(bv_strQuery)
            objData.Fill(dtDetail, br_objTransaction)
            Return dtDetail
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_HandlingStorageInvoiceHistoryDetail"
    Public Function pub_HandlingStorageInvoiceHistoryDetail(ByVal bv_dsDataset As DataSet, _
                                                            ByVal bv_strEquipmentNo As String, _
                                                            ByVal bv_strGateInTransactionNo As String, _
                                                            ByVal bv_strInvoiceNo As String, _
                                                            ByVal bv_datFromDate As Date, _
                                                            ByVal bv_datToDate As Date, _
                                                            ByRef br_objTransaction As Transactions) As Boolean
        Try
            Dim drHndStrgChargeValue() As DataRow = bv_dsDataset.Tables(CommonUIData._HANDLING_STORAGE_INVOICE).Select(String.Concat(CommonUIData.EQPMNT_NO, "='", bv_strEquipmentNo, "' AND ", CommonUIData.GI_TRNSCTN_NO, "='", bv_strGateInTransactionNo, "'"))
            Dim decHandlingInChargeValue As Decimal = 0.0
            Dim decHandlingOutChargeValue As Decimal = 0.0
            Dim decStorageChargeValue As Decimal = 0.0
            Dim decOnHireChargeValue As Decimal = 0.0
            Dim decOffHireChargeValue As Decimal = 0.0
            Dim decOtherChargeValue As Decimal = 0.0
            Dim decDepotAmount As Double = 0.0
            Dim decCustomerAmount As Double = 0.0
            Dim intFreeDays As Integer = 0
            Dim intStorageDays As Integer = 0
            Dim datFromBillingDate As DateTime
            Dim datToBillingDate As DateTime
            If drHndStrgChargeValue.Length > 0 Then
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.HNDIN_CHRG)) Then
                    decHandlingInChargeValue = CDec(drHndStrgChargeValue(0).Item(CommonUIData.HNDIN_CHRG))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.HNDOUT_CHRG)) Then
                    decHandlingOutChargeValue = CDec(drHndStrgChargeValue(0).Item(CommonUIData.HNDOUT_CHRG))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.STRG_CHRG)) Then
                    decStorageChargeValue = CDec(drHndStrgChargeValue(0).Item(CommonUIData.STRG_CHRG))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.DPT_TTL_NC)) Then
                    decDepotAmount = CDec(drHndStrgChargeValue(0).Item(CommonUIData.DPT_TTL_NC))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.TTL_CSTS_NC)) Then
                    decCustomerAmount = CDec(drHndStrgChargeValue(0).Item(CommonUIData.TTL_CSTS_NC))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.FR_DYS)) Then
                    intFreeDays = CDec(drHndStrgChargeValue(0).Item(CommonUIData.FR_DYS))
                End If
                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.STORAGE_DAYS)) Then
                    intStorageDays = CDec(drHndStrgChargeValue(0).Item(CommonUIData.STORAGE_DAYS))
                End If

                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.FRM_BLLNG_DT)) Then
                    datFromBillingDate = drHndStrgChargeValue(0).Item(CommonUIData.FRM_BLLNG_DT)
                Else
                    datFromBillingDate = Nothing
                End If

                If Not IsDBNull(drHndStrgChargeValue(0).Item(CommonUIData.TO_BLLNG_DT)) Then
                    datToBillingDate = drHndStrgChargeValue(0).Item(CommonUIData.TO_BLLNG_DT)
                Else
                    datToBillingDate = Nothing
                End If
                CreateInvoiceHistoryDetail(bv_strInvoiceNo, bv_strEquipmentNo, bv_strGateInTransactionNo, _
                                           String.Empty, decHandlingInChargeValue, decHandlingOutChargeValue, _
                                           decStorageChargeValue, decDepotAmount, decCustomerAmount, _
                                           intStorageDays, intFreeDays, decOnHireChargeValue, _
                                           decOffHireChargeValue, decOtherChargeValue, _
                                           datFromBillingDate, datToBillingDate, _
                                           br_objTransaction)
            End If
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_RentalInvoiceHistoryDetail"
    Public Function pub_RentalInvoiceHistoryDetail(ByVal bv_dsDataset As DataSet, _
                                                   ByVal bv_strInvoiceNo As String, _
                                                   ByVal bv_i32DepotID As Int32, _
                                                   ByVal bv_strTable1PrimaryID As String, _
                                                   ByVal bv_datFromDate As Date, _
                                                   ByVal bv_datToDate As Date, _
                                                   ByRef br_objTransaction As Transactions) As Boolean
        Try
            Dim dtRental As New DataTable
            dtRental = pub_GetDetails(String.Concat("SELECT * FROM ", CommonUIData._RENTAL_CHARGE, " WHERE ", CommonUIData.DPT_ID, "=", bv_i32DepotID, " AND ", CommonUIData.RNTL_CHRG_ID, " IN (", bv_strTable1PrimaryID, ") "), _
                                                br_objTransaction)
            Dim decHandlingInChargeValue As Decimal = 0.0
            Dim decHandlingOutChargeValue As Decimal = 0.0
            Dim decStorageChargeValue As Decimal = 0.0
            Dim decDepotAmount As Decimal = 0.0
            Dim decCustomerAmount As Decimal = 0.0
            Dim intFreeDays As Integer = 0
            Dim intStorageDays As Integer = 0
            Dim decOnHireChargeValue As Decimal = 0.0
            Dim decOffHireChargeValue As Decimal = 0.0
            Dim decOtherChargeValue As Decimal = 0.0
            Dim strEquipmentNo As String = String.Empty
            Dim strGateInTransactionNo As String = String.Empty
            Dim strRentalReferenceNo As String = String.Empty
            Dim datFromBillingDate As DateTime
            Dim datToBillingDate As DateTime
            For Each drRental As DataRow In bv_dsDataset.Tables(CommonUIData._RENTAL_INVOICE).Rows
                If Not IsDBNull(drRental.Item(CommonUIData.HNDLNG_IN_NC)) Then
                    decHandlingInChargeValue = CDec(drRental.Item(CommonUIData.HNDLNG_IN_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.HNDLNG_OT_NC)) Then
                    decHandlingOutChargeValue = CDec(drRental.Item(CommonUIData.HNDLNG_OT_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.RNTL_CHRG_NC)) Then
                    decStorageChargeValue = CDec(drRental.Item(CommonUIData.RNTL_CHRG_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.DPT_TTL_NC)) Then
                    decDepotAmount = CDec(drRental.Item(CommonUIData.DPT_TTL_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.TTL_CSTS_NC)) Then
                    decCustomerAmount = CDec(drRental.Item(CommonUIData.TTL_CSTS_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.RNTL_DYS)) Then
                    intStorageDays = CDec(drRental.Item(CommonUIData.RNTL_DYS))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.ON_HR_SRVY_NC)) Then
                    decOnHireChargeValue = CDec(drRental.Item(CommonUIData.ON_HR_SRVY_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.OFF_HR_SRVY_NC)) Then
                    decOffHireChargeValue = CDec(drRental.Item(CommonUIData.OFF_HR_SRVY_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.OTHR_CHRG_NC)) Then
                    decOtherChargeValue = CDec(drRental.Item(CommonUIData.OTHR_CHRG_NC))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.EQPMNT_NO)) Then
                    strEquipmentNo = CStr(drRental.Item(CommonUIData.EQPMNT_NO))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.GI_TRNSCTN_NO)) Then
                    strGateInTransactionNo = CStr(drRental.Item(CommonUIData.GI_TRNSCTN_NO))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.RNTL_RFRNC_NO)) Then
                    strRentalReferenceNo = CStr(drRental.Item(CommonUIData.RNTL_RFRNC_NO))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.FRM_BLLNG_DT)) Then
                    datFromBillingDate = CDate(drRental.Item(CommonUIData.FRM_BLLNG_DT))
                End If
                If Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) Then
                    datToBillingDate = CDate(drRental.Item(CommonUIData.TO_BLLNG_DT))
                End If

                CreateInvoiceHistoryDetail(bv_strInvoiceNo, strEquipmentNo, strGateInTransactionNo, _
                                           strRentalReferenceNo, decHandlingInChargeValue, decHandlingOutChargeValue, _
                                           decStorageChargeValue, decDepotAmount, decCustomerAmount, _
                                           intStorageDays, intFreeDays, decOnHireChargeValue, _
                                           decOffHireChargeValue, decOtherChargeValue, _
                                           datFromBillingDate, datToBillingDate, _
                                           br_objTransaction)

                Dim strUpdateQuery As String = String.Empty
                strUpdateQuery = String.Concat(CommonUIData.BLLNG_TLL_DT, "='", bv_datToDate, "',", CommonUIData.RNTL_CNTN_FLG, "= (CASE WHEN ", CommonUIData.IS_GT_IN_FLG, "='O' AND ", CommonUIData.TO_BLLNG_DT, "<='", bv_datToDate, "' THEN 'S' ELSE 'C' END ),")

                Dim drOldValue() As DataRow = dtRental.Select(String.Concat(CommonUIData.RNTL_CHRG_ID, "=", drRental.Item(CommonUIData.RNTL_CHRG_ID)))
                Dim decTotalAmount As Decimal = 0.0
                Dim intDays As Integer = 0
                If drOldValue.Length > 0 Then
                    If Not IsDBNull(drOldValue(0).Item(CommonUIData.TTL_CSTS_NC)) Then
                        decTotalAmount = CDec(drOldValue(0).Item(CommonUIData.TTL_CSTS_NC))
                    End If
                    If Not IsDBNull(drOldValue(0).Item(CommonUIData.NO_OF_DYS)) Then
                        intDays = CInt(drOldValue(0).Item(CommonUIData.NO_OF_DYS))
                    End If
                    intDays = intDays + CInt(drRental.Item(CommonUIData.RNTL_DYS))
                    decTotalAmount = decTotalAmount + CDec(drRental.Item(CommonUIData.DPT_TTL_NC))
                    If decOnHireChargeValue <> CDec("0.00") Then
                        strUpdateQuery = String.Concat(strUpdateQuery, CommonUIData.ON_HR_BLLNG_FLG, "='Y',")
                    End If
                    If decOffHireChargeValue <> CDec("0.00") Then
                        strUpdateQuery = String.Concat(strUpdateQuery, CommonUIData.OFF_HR_BLLNG_FLG, "='Y',")
                    End If
                    strUpdateQuery = String.Concat(strUpdateQuery, CommonUIData.NO_OF_DYS, "=", intDays, ",", CommonUIData.TTL_CSTS_NC, "= ", decTotalAmount)
                End If

                Dim strQuery As String = String.Empty
                If strUpdateQuery <> String.Empty Then
                    strQuery = String.Concat("UPDATE ", CommonUIData._RENTAL_CHARGE, " SET ", strUpdateQuery, " WHERE ", CommonUIData.RNTL_CHRG_ID, "=", drRental.Item(CommonUIData.RNTL_CHRG_ID))
                    UpdateTable(strQuery, br_objTransaction)
                End If

                UpdateActivityStatusForInvoiceGeneratedBit(strEquipmentNo, strGateInTransactionNo, True, bv_i32DepotID, br_objTransaction)

            Next
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "UPDATE : UpdateTable() "

    Public Function UpdateTable(ByVal strQuery As String, _
                                ByRef br_objTransactions As Transactions) As Boolean
        Try
            objData = New DataObjects(strQuery)
            objData.ExecuteScalar(br_objTransactions)
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "CreateInvoiceHistoryDetail() TABLE NAME:Invoice_History_Detail"

    Public Function CreateInvoiceHistoryDetail(ByVal bv_strInvoiceNo As String, _
                                               ByVal bv_strEquipmentNo As String, _
                                               ByVal bv_strGateInTranscationNo As String, _
                                               ByVal bv_strRentalReferenceNo As String, _
                                               ByVal bv_dblHandlingInAmount As Double, _
                                               ByVal bv_dblHandlingOutAmount As Double, _
                                               ByVal bv_dblStorageAmount As Double, _
                                               ByVal bv_dblDepotAmount As Double, _
                                               ByVal bv_dblCustomerAmount As Double, _
                                               ByVal bv_i32StorageDays As Int32, _
                                               ByVal bv_i32FreeDays As Int32, _
                                               ByVal bv_decOnHireChargeValue As Double, _
                                               ByVal bv_decOffHireChargeValue As Double, _
                                               ByVal bv_decOtherChargeValue As Double, _
                                               ByVal bv_datFromDate As Date, _
                                               ByVal bv_datToDate As Date, _
                                               ByRef br_objTransaction As Transactions) As Long
        Try
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._INVOICE_HISTORY_DETAIL).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._INVOICE_HISTORY_DETAIL, br_objTransaction)
                .Item(CommonUIData.INVC_HSTRY_DTL_ID) = intMax
                .Item(CommonUIData.INVC_NO) = bv_strInvoiceNo
                .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateInTranscationNo
                If bv_strRentalReferenceNo <> Nothing Then
                    .Item(CommonUIData.RNTL_RFRNC_NO) = bv_strRentalReferenceNo
                Else
                    .Item(CommonUIData.RNTL_RFRNC_NO) = DBNull.Value
                End If
                .Item(CommonUIData.HNDLNG_IN_AMNT_NC) = bv_dblHandlingInAmount
                .Item(CommonUIData.HNDLNG_OT_AMNT_NC) = bv_dblHandlingOutAmount
                .Item(CommonUIData.STRG_AMNT_NC) = bv_dblStorageAmount
                .Item(CommonUIData.DPT_AMNT_NC) = bv_dblDepotAmount
                .Item(CommonUIData.CSTMR_AMNT_NC) = bv_dblCustomerAmount
                .Item(CommonUIData.STRG_DYS) = bv_i32StorageDays
                .Item(CommonUIData.FR_DYS) = bv_i32FreeDays
                .Item(CommonUIData.ON_HR_SRVY_NC) = bv_decOnHireChargeValue
                .Item(CommonUIData.OFF_HR_SRVY_NC) = bv_decOffHireChargeValue
                .Item(CommonUIData.OTHR_CHRG_NC) = bv_decOtherChargeValue
                If bv_datFromDate <> Nothing AndAlso bv_datFromDate <> sqlDbnull Then
                    .Item(CommonUIData.FRM_BLLNG_DT) = bv_datFromDate
                End If
                If bv_datToDate <> Nothing AndAlso bv_datToDate <> sqlDbnull Then
                    .Item(CommonUIData.TO_BLLNG_DT) = bv_datToDate
                End If
            End With
            objData.InsertRow(dr, Invoice_History_DetailInsertQuery, br_objTransaction)
            dr = Nothing
            CreateInvoiceHistoryDetail = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "pub_UpdateInvoiceTableInvoiceNo"
    Public Function pub_UpdateInvoiceTableInvoiceNo(ByVal bv_strInvoiceNo As String, _
                                                    ByRef strUpdateInvoiceHistoryInvcNo As String, _
                                                    ByVal bv_i32DepotID As Int32, _
                                                    ByVal strTableName As String, _
                                                    ByRef br_objTrans As Transactions) As Boolean
        Try
            Dim strSplitInvoiceNo() As String
            Dim strInvoiceNo As String = String.Empty
            If bv_strInvoiceNo <> String.Empty Then
                If bv_strInvoiceNo.Contains(",") Then
                    strSplitInvoiceNo = bv_strInvoiceNo.Split(CChar(","))
                    For i As Integer = 0 To strSplitInvoiceNo.Length - 1
                        If strInvoiceNo <> String.Empty Then
                            strInvoiceNo = String.Concat(strInvoiceNo, ",'", strSplitInvoiceNo(i), "'")
                            If strUpdateInvoiceHistoryInvcNo <> String.Empty Then
                                strUpdateInvoiceHistoryInvcNo = String.Concat(strUpdateInvoiceHistoryInvcNo, ",'", strSplitInvoiceNo(i), "'")
                            Else
                                strUpdateInvoiceHistoryInvcNo = String.Concat("'", strSplitInvoiceNo(i), "'")
                            End If
                        Else
                            strInvoiceNo = String.Concat("'", strSplitInvoiceNo(i), "'")
                        End If
                    Next
                Else
                    strInvoiceNo = String.Concat("'", bv_strInvoiceNo, "'")
                    strUpdateInvoiceHistoryInvcNo = String.Empty
                End If

                UpdateInvoiceTableInvoiceNo(strInvoiceNo, _
                                            bv_i32DepotID, _
                                            strTableName, _
                                            br_objTrans)
            End If
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "UpdateInvoiceTableInvoiceNo()"
    Public Function UpdateInvoiceTableInvoiceNo(ByRef bv_strInvoiceNo As String, _
                                                ByVal bv_i32DepotID As Int32, _
                                                ByVal bv_strInvoiceTableName As String, _
                                                ByRef br_objTrans As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            Dim strQuery As String = String.Empty
            dr = dsCommon.Tables(bv_strInvoiceTableName).NewRow()
            With dr
                .Item(CommonUIData.DPT_ID) = bv_i32DepotID
            End With
            'strQuery = String.Concat(INVOICE_TABLEUpdateQueryInvoiceNo, bv_strInvoiceType, "' AND  BLLNG_FLG='", bv_strBillingFlag, "'AND ((FRM_BLLNG_DT>='", bv_datFromBillingDate.ToString("dd-MMM-yyyy"), "' AND FRM_BLLNG_DT<='", bv_datToBillingDate.ToString("dd-MMM-yyyy"), "')OR (TO_BLLNG_DT>='", bv_datFromBillingDate.ToString("dd-MMM-yyyy"), "' AND TO_BLLNG_DT<='", bv_datToBillingDate.ToString("dd-MMM-yyyy"), "')) AND ")
            'If bv_i64CustomerId <> 0 Then
            '    strQuery = String.Concat(strQuery, CommonUIData.CSTMR_ID, "=", bv_i64CustomerId, ")")
            'ElseIf bv_i64InvoicingPartyId <> 0 Then
            '    strQuery = String.Concat(strQuery, CommonUIData.INVCNG_PRTY_ID, "=", bv_i64InvoicingPartyId, ")")
            'End If
            strQuery = String.Concat(INVOICE_TABLEUpdateQueryInvoiceNo, bv_strInvoiceNo, ")")
            UpdateInvoiceTableInvoiceNo = objData.UpdateRow(dr, strQuery.Replace("@INVOICE_TABLE", bv_strInvoiceTableName), br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "UpdateInvoiceNoBillingFlag()"
    Public Function UpdateInvoiceNoBillingFlag(ByVal bv_strPrimaryID As String, _
                                             ByVal bv_strBillingFlag As String, _
                                             ByRef bv_strInvoiceNo As String, _
                                             ByVal bv_i32DepotID As Int32, _
                                             ByVal bv_blnGenerateInvoiceNo As Boolean, _
                                             ByVal bv_strInvoiceTableName As String, _
                                             ByVal bv_strPrimaryKey As String, _
                                             ByVal bv_strMaxNoInvoiceFormat As String, _
                                             ByVal bv_strInvoiceFormat As String, _
                                             ByVal bv_strBillingMode As String, _
                                             ByVal strUpdateFieldsQuery As String, _
                                             ByVal bv_i32CustomerId As Int32, _
                                             ByRef br_objTrans As Transactions) As Boolean

        Try
            Dim dr As DataRow
            Dim intMax As Integer
            objData = New DataObjects()
            Dim strQuery As String = String.Empty
            dr = dsCommon.Tables(bv_strInvoiceTableName).NewRow()
            If bv_blnGenerateInvoiceNo Then

                'Check
                intMax = CommonUIs.GetIdentityValue(bv_strMaxNoInvoiceFormat, br_objTrans)
                '  bv_strInvoiceNo = CommonUIs.GetIdentityCode(bv_strInvoiceFormat, intMax, Now.Date, br_objTrans)
                'From Index Pattern
                If UCase(bv_strBillingMode) <> "DRAFT" Then
                    If bv_strInvoiceFormat.Contains("CLEANING_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Cleaning", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("REPAIR_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Repair", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("HANDLINGSTORAGE_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Handling & Storage", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("HEATING_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Heating", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("TRANSPORTATION_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Transportation", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("RENTAL_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Rental", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("MISCELLANEOUS_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Miscellaneous", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("CREDITNOTE_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Credit Note", ",", bv_i32CustomerId)
                    ElseIf bv_strInvoiceFormat.Contains("INSPECTION_INVOICE") Then
                        bv_strMaxNoInvoiceFormat = String.Concat(bv_strMaxNoInvoiceFormat, ",", "Inspection", ",", bv_i32CustomerId)
                    End If
                    Dim objIndexPattern As New IndexPatterns
                    bv_strInvoiceNo = objIndexPattern.GetMaxReferenceNo(bv_strMaxNoInvoiceFormat, Now.Date, br_objTrans, Nothing, bv_i32DepotID)
                Else
                    ' intMax = CommonUIs.GetIdentityValue(bv_strMaxNoInvoiceFormat, br_objTrans)
                    bv_strInvoiceNo = CommonUIs.GetIdentityCode(bv_strInvoiceFormat, intMax, Now.Date, br_objTrans)
                End If



                '   GetMaxReferenceNo(RentalEntryData._RENTAL_ENTRY, OnHireDate, objTrans, Nothing, bv_intDepotID)
                ' bv_strInvoiceNo = CommonUIs.GetIdentityCode(bv_strInvoiceFormat, intMax, Now.Date, br_objTrans)
            End If
            If UCase(bv_strBillingMode) = "DRAFT" Then
                strUpdateFieldsQuery = String.Concat(strUpdateFieldsQuery, CommonUIData.BLLNG_FLG, "='", bv_strBillingFlag, "',", CommonUIData.DRFT_INVC_NO, "='", bv_strInvoiceNo, "'")
            Else
                strUpdateFieldsQuery = String.Concat(strUpdateFieldsQuery, CommonUIData.BLLNG_FLG, "='", bv_strBillingFlag, "',", CommonUIData.FNL_INVC_NO, "='", bv_strInvoiceNo, "'")
            End If
            With dr
                .Item(CommonUIData.BLLNG_FLG) = bv_strBillingFlag
                .Item(CommonUIData.DRFT_INVC_NO) = bv_strInvoiceNo
                .Item(CommonUIData.DPT_ID) = bv_i32DepotID
            End With
            strQuery = String.Concat("UPDATE ", bv_strInvoiceTableName, " SET ", strUpdateFieldsQuery, " WHERE ", CommonUIData.DPT_ID, "=@", CommonUIData.DPT_ID, " AND ", bv_strPrimaryKey, " IN (", bv_strPrimaryID, ")")
            UpdateInvoiceNoBillingFlag = objData.UpdateRow(dr, strQuery, br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "CreateInvoiceHistory() TABLE NAME:Invoice_History"

    Public Function CreateInvoiceHistory(ByVal bv_strInvoiceNo As String, _
                                         ByVal bv_datInvoiceDate As DateTime, _
                                         ByVal bv_strInvoiceFilePath As String, _
                                         ByVal bv_strInvoiceType As String, _
                                         ByVal bv_i64InvoiceCurrencyID As Int64, _
                                         ByVal bv_decExchangeRate As Decimal, _
                                         ByVal bv_i64CustomerCurrencyID As Int64, _
                                         ByVal bv_i64BillingTypeID As Int64, _
                                         ByVal bv_datFromBillingDate As DateTime, _
                                         ByVal bv_datToBillingDate As DateTime, _
                                         ByVal bv_decTotalCostinCustomerCurrency As Decimal, _
                                         ByVal bv_decTotalCostinInvoiceCurrency As Decimal, _
                                         ByVal bv_strBillingFlag As String, _
                                         ByVal bv_i64CustomerID As Int64, _
                                         ByVal bv_i64InvoicingPartyID As Int64, _
                                         ByVal bv_i32DepotID As Int32, _
                                         ByVal bv_blnActiveBit As Boolean, _
                                         ByVal bv_strCreatedBy As String, _
                                         ByVal bv_datCreatedDate As DateTime, _
                                         ByVal bv_strFileName As String, _
                                         ByVal bv_i64NoofEquipment As Int64, _
                                         ByRef br_objTrans As Transactions) As Long
        Try
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._INVOICE_HISTORY).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._INVOICE_HISTORY, br_objTrans)
                .Item(CommonUIData.INVC_BIN) = intMax
                .Item(CommonUIData.INVC_NO) = bv_strInvoiceNo
                .Item(CommonUIData.INVC_DT) = bv_datInvoiceDate
                If bv_strInvoiceFilePath <> Nothing Then
                    .Item(CommonUIData.INVC_FL_PTH) = bv_strInvoiceFilePath
                Else
                    .Item(CommonUIData.INVC_FL_PTH) = DBNull.Value
                End If
                .Item(CommonUIData.INVC_TYP) = bv_strInvoiceType
                .Item(CommonUIData.INVC_CRRNCY_ID) = bv_i64InvoiceCurrencyID
                .Item(CommonUIData.EXCHNG_RT_NC) = bv_decExchangeRate
                .Item(CommonUIData.CSTMR_CRRNCY_ID) = bv_i64CustomerCurrencyID
                If bv_i64BillingTypeID <> 0 Then
                    .Item(CommonUIData.BLLNG_TYP_ID) = bv_i64BillingTypeID
                Else
                    .Item(CommonUIData.BLLNG_TYP_ID) = DBNull.Value
                End If
                .Item(CommonUIData.FRM_BLLNG_DT) = bv_datFromBillingDate
                .Item(CommonUIData.TO_BLLNG_DT) = bv_datToBillingDate
                .Item(CommonUIData.TTL_CST_IN_CSTMR_CRRNCY_NC) = bv_decTotalCostinCustomerCurrency
                .Item(CommonUIData.TTL_CST_IN_INVC_CRRNCY_NC) = bv_decTotalCostinInvoiceCurrency
                .Item(CommonUIData.BLLNG_FLG) = bv_strBillingFlag
                If bv_i64CustomerID <> 0 Then
                    .Item(CommonUIData.CSTMR_ID) = bv_i64CustomerID
                Else
                    .Item(CommonUIData.CSTMR_ID) = DBNull.Value
                End If
                If bv_i64InvoicingPartyID <> 0 Then
                    .Item(CommonUIData.INVCNG_PRTY_ID) = bv_i64InvoicingPartyID
                Else
                    .Item(CommonUIData.INVCNG_PRTY_ID) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotID
                .Item(CommonUIData.ACTV_BT) = bv_blnActiveBit
                .Item(CommonUIData.CRTD_BY) = bv_strCreatedBy
                .Item(CommonUIData.CRTD_DT) = bv_datCreatedDate
                .Item(CommonUIData.MDFD_BY) = bv_strCreatedBy
                .Item(CommonUIData.MDFD_DT) = bv_datCreatedDate
                .Item(CommonUIData.FL_NM) = bv_strFileName
                .Item(CommonUIData.NO_OF_EQPMNT) = bv_i64NoofEquipment
            End With
            objData.InsertRow(dr, Invoice_HistoryInsertQuery, br_objTrans)
            dr = Nothing
            CreateInvoiceHistory = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetInvoice_HistoryByInvoiceNo() TABLE NAME:Invoice_History"

    Public Function GetInvoice_HistoryByInvoiceNo(ByVal bv_strInvoiceNo As String, _
                                                  ByVal bv_strBillingFlag As String, _
                                                  ByVal bv_i32DepotId As Int32, _
                                                  ByRef br_objTrans As Transactions) As CommonUIDataSet
        Try
            Dim hshparamters As New Hashtable
            Dim strQuery As String = String.Empty
            hshparamters.Add(CommonUIData.DPT_ID, bv_i32DepotId)
            hshparamters.Add(CommonUIData.INVC_NO, bv_strInvoiceNo)
            hshparamters.Add(CommonUIData.BLLNG_FLG, bv_strBillingFlag)
            objData = New DataObjects(Invoice_HistorySelectQueryByInvoiceNo, hshparamters)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._INVOICE_HISTORY, br_objTrans)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateInvoiceHistory() TABLE NAME:Invoice_History"

    Public Function UpdateInvoiceHistory(ByVal bv_i64InvoiceBin As Int64, _
                                         ByVal bv_datInvoiceDate As DateTime, _
                                         ByVal bv_i64InvoiceCurrencyID As Int64, _
                                         ByVal bv_decExchangeRate As Decimal, _
                                         ByVal bv_i64CustomerCurrencyID As Int64, _
                                         ByVal bv_datFromBillingDate As DateTime, _
                                         ByVal bv_datToBillingDate As DateTime, _
                                         ByVal bv_decTotalCostinCustomerCurrency As Decimal, _
                                         ByVal bv_decTotalCostinInvoiceCurrency As Decimal, _
                                         ByVal bv_i32DepotID As Int32, _
                                         ByVal bv_strModifiedBy As String, _
                                         ByVal bv_datModifiedDate As DateTime, _
                                         ByVal bv_i64NoofEquipment As Int64, _
                                         ByRef br_objTrans As Transactions) As Long
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._INVOICE_HISTORY).NewRow()
            With dr
                .Item(CommonUIData.INVC_BIN) = bv_i64InvoiceBin
                .Item(CommonUIData.INVC_DT) = bv_datInvoiceDate
                .Item(CommonUIData.INVC_CRRNCY_ID) = bv_i64InvoiceCurrencyID
                .Item(CommonUIData.EXCHNG_RT_NC) = bv_decExchangeRate
                .Item(CommonUIData.CSTMR_CRRNCY_ID) = bv_i64CustomerCurrencyID
                .Item(CommonUIData.FRM_BLLNG_DT) = bv_datFromBillingDate
                .Item(CommonUIData.TO_BLLNG_DT) = bv_datToBillingDate
                .Item(CommonUIData.TTL_CST_IN_CSTMR_CRRNCY_NC) = bv_decTotalCostinCustomerCurrency
                .Item(CommonUIData.TTL_CST_IN_INVC_CRRNCY_NC) = bv_decTotalCostinInvoiceCurrency
                .Item(CommonUIData.DPT_ID) = bv_i32DepotID
                .Item(CommonUIData.MDFD_BY) = bv_strModifiedBy
                .Item(CommonUIData.MDFD_DT) = bv_datModifiedDate
                .Item(CommonUIData.NO_OF_EQPMNT) = bv_i64NoofEquipment
            End With
            UpdateInvoiceHistory = objData.UpdateRow(dr, Invoice_HistoryUpdateQuery, br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateInvoiceHistoryActiveBit() TABLE NAME:Invoice_History"

    Public Function UpdateInvoiceHistoryActiveBit(ByVal bv_i64CustomerId As Int64, _
                                                  ByVal bv_strBillingFlag As String, _
                                                  ByVal bv_i32DepotId As Int32, _
                                                  ByVal bv_datFromBillingDate As Date, _
                                                  ByVal bv_datToBillingDate As Date, _
                                                  ByVal bv_i64InvoicingPartyId As Int64, _
                                                  ByVal bv_strInvoiceType As String, _
                                                  ByVal bv_strInvoiceNo As String, _
                                                  ByRef br_objTrans As Transactions) As Long
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            Dim strQuery As String = String.Empty
            dr = dsCommon.Tables(CommonUIData._INVOICE_HISTORY).NewRow()
            With dr
                .Item(CommonUIData.INVC_TYP) = bv_strInvoiceType
                .Item(CommonUIData.FRM_BLLNG_DT) = bv_datFromBillingDate
                .Item(CommonUIData.TO_BLLNG_DT) = bv_datToBillingDate
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                .Item(CommonUIData.INVC_NO) = bv_strInvoiceNo
                .Item(CommonUIData.BLLNG_FLG) = bv_strBillingFlag
            End With
            'If bv_i64CustomerId <> 0 Then
            '    strQuery = String.Concat(INOVICE_HISTORYUpdateQuerybyInvoiceNo, CommonUIData.CSTMR_ID, "=", bv_i64CustomerId)
            'ElseIf bv_i64InvoicingPartyId <> 0 Then
            '    strQuery = String.Concat(INOVICE_HISTORYUpdateQuerybyInvoiceNo, CommonUIData.INVCNG_PRTY_ID, "=", bv_i64InvoicingPartyId)
            'End If
            strQuery = String.Concat(INOVICE_HISTORYUpdateQuerybyInvoiceNo, bv_strInvoiceNo, ")")
            UpdateInvoiceHistoryActiveBit = objData.UpdateRow(dr, strQuery, br_objTrans)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "fillDatasetforInvoiceGeneration"
    Public Function fillDatasetforInvoiceGeneration(ByVal bv_i32InvoiceTypeID As Int32, _
                                                    ByRef bv_dtInvoicetable As DataTable, _
                                                    ByVal bv_decExchangeRate As Decimal, _
                                                    ByVal bv_datFromDate As Date, _
                                                    ByVal bv_datToDate As Date, _
                                                    ByRef bv_decCustomerAmount As Decimal, _
                                                    ByRef bv_decDepotAmount As Decimal, _
                                                    Optional ByVal bv_i64CustomerID As Int64 = 0, _
                                                    Optional ByRef bv_dsDataset As DataSet = Nothing, _
                                                    Optional ByVal bv_i32DepotID As Int32 = 0, _
                                                    Optional ByVal str_067InvoiceGenerationGWSBit As String = Nothing) As Boolean
        Try

            Select Case bv_i32InvoiceTypeID
                Case 78 'Handling & Storage
                    Dim dtChargeStorage As New DataTable
                    Dim drHSInvoiceRow As DataRow
                    Dim strSelect As String = String.Empty
                    Dim decTotalCost As Decimal
                    Dim decTotalAmount As Decimal
                    Dim dtDistinctHandlingContainer As New DataTable
                    Dim dtDistinctStorageContainer As New DataTable
                    Dim intCount As Integer = 0
                    Dim drPendingInvoice As DataRow

                    dtChargeStorage = bv_dsDataset.Tables(CommonUIData._V_STORAGE_CHARGE)
                    pub_HSStorage_Calculation(dtChargeStorage, bv_datFromDate, bv_datToDate, True, bv_i32DepotID, str_067InvoiceGenerationGWSBit)

                    Dim Distinctdata As New DatasetHelpers(CType(bv_dsDataset, DataSet))
                    Dim strListGroupBy As String = String.Concat(CommonUIData.EQPMNT_NO, ",", CommonUIData.GI_TRNSCTN_NO)
                    Dim strListSelect As String = String.Concat(CommonUIData.EQPMNT_NO, ",", CommonUIData.GI_TRNSCTN_NO)

                    dtDistinctHandlingContainer = Distinctdata.SelectGroupByInto("HS_DISTINCT", bv_dsDataset.Tables(CommonUIData._V_HANDLING_CHARGE), strListSelect, "", strListGroupBy)
                    dtDistinctStorageContainer = Distinctdata.SelectGroupByInto("STR_DISTINCT", bv_dsDataset.Tables(CommonUIData._V_STORAGE_CHARGE), strListSelect, "", strListGroupBy)
                    Dim dtDistinctContainer As New DataTable
                    dtDistinctContainer = dtDistinctHandlingContainer.Copy
                    dtDistinctContainer.Merge(dtDistinctStorageContainer)

                    dtDistinctContainer = Distinctdata.SelectGroupByInto("DISTINCT", dtDistinctContainer, strListSelect, "", strListGroupBy)

                    For Each drHSInvoice As DataRow In dtDistinctContainer.Rows
                        Dim strEquipmentNo As String = drHSInvoice.Item(CommonUIData.EQPMNT_NO)
                        drHSInvoiceRow = bv_dsDataset.Tables(CommonUIData._HANDLING_STORAGE_INVOICE).NewRow()
                        intCount = intCount + 1
                        drHSInvoiceRow.Item(CommonUIData.HNDLNG_STRG_ID) = intCount
                        Dim decConvertedTotalCost As Decimal = 0
                        strSelect = String.Concat(CommonUIData.EQPMNT_NO, "= '", drHSInvoice.Item(CommonUIData.EQPMNT_NO), "' AND ", CommonUIData.GI_TRNSCTN_NO, "= '", drHSInvoice.Item(CommonUIData.GI_TRNSCTN_NO), "' AND ", CommonUIData.TTL_CSTS_NC, " <> 0")
                        Dim drHandlingDetails() As DataRow = bv_dsDataset.Tables(CommonUIData._V_HANDLING_CHARGE).Select(strSelect)
                        For Each drHandling As DataRow In drHandlingDetails
                            If drHandling.Item(CommonUIData.CST_TYP).ToString = CommonUIData.HNDIN AndAlso IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDIN_CHRG)) Then
                                drHSInvoiceRow.Item(CommonUIData.HNDIN_CHRG) = CDec(drHandling.Item(CommonUIData.TTL_CSTS_NC)).ToString("0.00")
                                decTotalCost = decTotalCost + drHandling.Item(CommonUIData.TTL_CSTS_NC)
                            ElseIf drHandling.Item(CommonUIData.CST_TYP).ToString = CommonUIData.HNDOT AndAlso IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDOUT_CHRG)) Then
                                drHSInvoiceRow.Item(CommonUIData.HNDOUT_CHRG) = CDec(drHandling.Item(CommonUIData.TTL_CSTS_NC)).ToString("0.00")
                                decTotalCost = decTotalCost + drHandling.Item(CommonUIData.TTL_CSTS_NC)
                            End If
                        Next
                        strSelect = String.Concat(CommonUIData.EQPMNT_NO, "= '", drHSInvoice.Item(CommonUIData.EQPMNT_NO), "' AND ", CommonUIData.GI_TRNSCTN_NO, "= '", drHSInvoice.Item(CommonUIData.GI_TRNSCTN_NO), "'")
                        If Not (dtChargeStorage.Columns.Contains(CommonUIData.FROM_BILLING_DATE)) Then
                            dtChargeStorage.Columns.Add(CommonUIData.FROM_BILLING_DATE, GetType(System.DateTime))
                        End If
                        If Not (dtChargeStorage.Columns.Contains(CommonUIData.TO_BILLING_DATE)) Then
                            dtChargeStorage.Columns.Add(CommonUIData.TO_BILLING_DATE, GetType(System.DateTime))
                        End If
                        Dim drStorageDetails() As DataRow = dtChargeStorage.Select(strSelect)
                        For Each drStorage As DataRow In drStorageDetails
                            drHSInvoiceRow.Item(CommonUIData.STRG_CHRG) = drStorage.Item(CommonUIData.TTL_CSTS_NC)
                            If Not IsDBNull(drStorage.Item(CommonUIData.FR_DYS)) Then
                                drHSInvoiceRow.Item(CommonUIData.FR_DYS) = drStorage.Item(CommonUIData.FR_DYS)
                            Else
                                drHSInvoiceRow.Item(CommonUIData.FR_DYS) = 0
                            End If
                            If Not IsDBNull(drStorage.Item(CommonUIData.NO_OF_DYS)) Then
                                drHSInvoiceRow.Item(CommonUIData.CHARGEABLE_DAYS) = drStorage.Item(CommonUIData.NO_OF_DYS) - CInt(drStorage.Item(CommonUIData.FR_DYS))
                            Else
                                drHSInvoiceRow.Item(CommonUIData.CHARGEABLE_DAYS) = 0
                            End If
                            drHSInvoiceRow.Item(CommonUIData.STORAGE_DAYS) = CInt(drStorage.Item(CommonUIData.NO_OF_DYS))
                            If Not IsDBNull(drStorage.Item(CommonUIData.FRM_BLLNG_DT)) AndAlso drStorage.Item(CommonUIData.TTL_CSTS_NC) > 0 Then
                                drHSInvoiceRow.Item(CommonUIData.FRM_BLLNG_DT) = drStorage.Item(CommonUIData.FRM_BLLNG_DT)
                            End If
                            If Not IsDBNull(drStorage.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drStorage.Item(CommonUIData.TTL_CSTS_NC) > 0 Then
                                drHSInvoiceRow.Item(CommonUIData.TO_BLLNG_DT) = drStorage.Item(CommonUIData.TO_BLLNG_DT)
                            End If
                            If drStorage.Item(CommonUIData.TTL_CSTS_NC) > 0 Then
                                decTotalCost = decTotalCost + drStorage.Item(CommonUIData.TTL_CSTS_NC)
                            End If
                            If drStorage.Item(CommonUIData.TTL_CSTS_NC) < 0 Then
                                drHSInvoiceRow.Item(CommonUIData.STRG_CHRG) = CDec("0.00")
                            End If
                            drHSInvoiceRow.Item(CommonUIData.STRG_CHRG_ID) = drStorage.Item(CommonUIData.STRG_CHRG_ID)
                            If drHandlingDetails.Length = 0 Then
                                drHSInvoiceRow.Item(CommonUIData.BLLNG_FLG) = drStorage.Item(CommonUIData.BLLNG_FLG)
                            End If
                            If Not IsDBNull(drStorage.Item(CommonUIData.FRM_BLLNG_DT)) AndAlso Not IsDBNull(drStorage.Item(CommonUIData.GTOT_DT)) _
                                AndAlso Not IsDBNull(drStorage.Item(CommonUIData.IS_GT_OT_FLG)) AndAlso CStr(drStorage.Item(CommonUIData.IS_GT_OT_FLG)) = "O" _
                                AndAlso Not IsDBNull(drStorage.Item(CommonUIData.TO_BLLNG_DT)) AndAlso CDate(drStorage.Item(CommonUIData.GTOT_DT)) <= bv_datToDate Then
                                drHSInvoiceRow.Item(CommonUIData.FROM_BILLING_DATE) = CDate(drStorage.Item(CommonUIData.FRM_BLLNG_DT))
                                drHSInvoiceRow.Item(CommonUIData.TO_BILLING_DATE) = CDate(drStorage.Item(CommonUIData.GTOT_DT))
                                drStorage.Item(CommonUIData.FROM_BILLING_DATE) = CDate(drStorage.Item(CommonUIData.FRM_BLLNG_DT))
                                drStorage.Item(CommonUIData.TO_BILLING_DATE) = CDate(drStorage.Item(CommonUIData.GTOT_DT))
                            ElseIf (IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDIN_CHRG)) OrElse (Not IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDIN_CHRG)) AndAlso CDec(drHSInvoiceRow.Item(CommonUIData.HNDIN_CHRG)) = 0)) _
                                AndAlso (IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDOUT_CHRG)) OrElse (Not IsDBNull(drHSInvoiceRow.Item(CommonUIData.HNDOUT_CHRG)) AndAlso CDec(drHSInvoiceRow.Item(CommonUIData.HNDOUT_CHRG)) = 0)) Then
                                drHSInvoiceRow.Item(CommonUIData.FROM_BILLING_DATE) = bv_datFromDate
                                drHSInvoiceRow.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                                ''21787 sc 2 Fix'' period from displays(11-jul) instead of actual from date (10-jul) for customer change
                                If drStorage.Item("CSTMR_CHNG_BT").ToString = "0" Then
                                    drStorage.Item(CommonUIData.FROM_BILLING_DATE) = bv_datFromDate
                                    drStorage.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                                End If
                                ''
                            End If
                            If Not IsDBNull(drStorage.Item(CommonUIData.BLLNG_TLL_DT)) AndAlso Not IsDBNull(drStorage.Item(CommonUIData.GTOT_DT)) AndAlso _
                                CDate(drStorage.Item(CommonUIData.BLLNG_TLL_DT)) > CDate(drStorage.Item(CommonUIData.GTOT_DT)) Then
                                drHSInvoiceRow.Item(CommonUIData.FR_DYS) = 0
                                drHSInvoiceRow.Item(CommonUIData.CHARGEABLE_DAYS) = 0
                                drHSInvoiceRow.Item(CommonUIData.STORAGE_DAYS) = 0
                            End If
                        Next
                        For Each dc As DataColumn In bv_dsDataset.Tables(CommonUIData._HANDLING_STORAGE_INVOICE).Columns
                            If dc.ColumnName <> CommonUIData.FR_DYS AndAlso dc.ColumnName <> CommonUIData.CHARGEABLE_DAYS AndAlso _
                                dc.ColumnName <> CommonUIData.STRG_CHRG AndAlso dc.ColumnName <> CommonUIData.HNDIN_CHRG AndAlso _
                                dc.ColumnName <> CommonUIData.HNDOUT_CHRG AndAlso dc.ColumnName <> CommonUIData.TTL_CSTS_NC AndAlso _
                                dc.ColumnName <> CommonUIData.FRM_BLLNG_DT AndAlso dc.ColumnName <> CommonUIData.TO_BLLNG_DT AndAlso _
                                dc.ColumnName <> CommonUIData.STORAGE_DAYS Then
                                If drHandlingDetails.Length > 0 Then
                                    If bv_dsDataset.Tables(CommonUIData._V_HANDLING_CHARGE).Columns.Contains(dc.ColumnName) AndAlso drHandlingDetails.Length > 0 Then
                                        drHSInvoiceRow.Item(dc.ColumnName) = drHandlingDetails(0).Item(dc.ColumnName)
                                    ElseIf drStorageDetails.Length > 0 AndAlso dtChargeStorage.Columns.Contains(dc.ColumnName) Then
                                        drHSInvoiceRow.Item(dc.ColumnName) = drStorageDetails(0).Item(dc.ColumnName)
                                    End If
                                Else
                                    If dtChargeStorage.Columns.Contains(dc.ColumnName) AndAlso drStorageDetails.Length > 0 Then
                                        drHSInvoiceRow.Item(dc.ColumnName) = drStorageDetails(0).Item(dc.ColumnName)
                                    End If
                                End If
                            ElseIf dc.ColumnName = CommonUIData.STRG_CHRG OrElse dc.ColumnName = CommonUIData.HNDIN_CHRG OrElse _
                                    dc.ColumnName = CommonUIData.HNDOUT_CHRG Then
                                If IsDBNull(drHSInvoiceRow.Item(dc.ColumnName)) Then
                                    drHSInvoiceRow.Item(dc.ColumnName) = CDec("0.00")
                                End If
                            ElseIf dc.ColumnName = CommonUIData.FR_DYS OrElse dc.ColumnName = CommonUIData.CHARGEABLE_DAYS OrElse _
                                dc.ColumnName = CommonUIData.STORAGE_DAYS Then
                                If IsDBNull(drHSInvoiceRow.Item(dc.ColumnName)) Then
                                    drHSInvoiceRow.Item(dc.ColumnName) = 0
                                End If
                            End If
                        Next
                        decTotalAmount = decTotalAmount + decTotalCost
                        drHSInvoiceRow.Item(CommonUIData.DPT_TTL_NC) = CDec(decTotalCost).ToString("0.00")
                        drHSInvoiceRow.Item(CommonUIData.TTL_CSTS_NC) = CDec(decTotalCost * bv_decExchangeRate).ToString("0.0000")
                        drHSInvoiceRow.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drHSInvoiceRow.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drHSInvoiceRow.Item(CommonUIData.TO_DATE) = bv_datToDate
                        If decTotalCost > 0 Then
                            bv_dsDataset.Tables(CommonUIData._HANDLING_STORAGE_INVOICE).Rows.Add(drHSInvoiceRow)
                            If bv_dsDataset.Tables.Contains(CommonUIData._PENDING_INVOICE) Then
                                drPendingInvoice = bv_dsDataset.Tables(InvoiceGenerationData._PENDING_INVOICE).NewRow()
                                For Each dc As DataColumn In bv_dsDataset.Tables(InvoiceGenerationData._PENDING_INVOICE).Columns
                                    If bv_dsDataset.Tables(InvoiceGenerationData._HANDLING_STORAGE_INVOICE).Columns.Contains(dc.ColumnName) AndAlso Not IsDBNull(drHSInvoiceRow.Item(dc.ColumnName)) Then
                                        drPendingInvoice.Item(dc.ColumnName) = drHSInvoiceRow.Item(dc.ColumnName)
                                    End If
                                Next
                                bv_dsDataset.Tables(InvoiceGenerationData._PENDING_INVOICE).Rows.Add(drPendingInvoice)
                            End If
                        End If
                        strSelect = String.Empty
                        decTotalCost = 0
                    Next
                Case 79 'Heating
                    For Each drHeating As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drHeating.Item(CommonUIData.TTL_RT_NC)) Then
                            drHeating.Item(CommonUIData.TTL_RT_NC) = CDec("0.00")
                        End If
                        drHeating.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drHeating.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drHeating.Item(CommonUIData.DPT_TTL_NC) = CDec(drHeating.Item(CommonUIData.TTL_RT_NC)).ToString("0.00")
                        drHeating.Item(CommonUIData.TTL_RT_NC) = CDec(CDec(drHeating.Item(CommonUIData.TTL_RT_NC)) * bv_decExchangeRate).ToString("0.0000")
                        drHeating.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drHeating.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drHeating.Item(CommonUIData.TTL_RT_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drHeating.Item(CommonUIData.DPT_TTL_NC)
                    Next
                Case 80 'Cleaning
                    For Each drCleaning As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drCleaning.Item(CommonUIData.CLNNG_RT)) Then
                            drCleaning.Item(CommonUIData.CLNNG_RT) = CDec("0.00")
                        Else
                            drCleaning.Item(CommonUIData.CLNNG_RT) = CDec(drCleaning.Item(CommonUIData.CLNNG_RT))
                        End If
                        drCleaning.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drCleaning.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drCleaning.Item(CommonUIData.DPT_TTL_NC) = CDec(drCleaning.Item(CommonUIData.CLNNG_RT)).ToString("0.00")
                        drCleaning.Item(CommonUIData.TTL_CSTS_NC) = CDec(CDec(drCleaning.Item(CommonUIData.CLNNG_RT)) * bv_decExchangeRate).ToString("0.0000")
                        drCleaning.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drCleaning.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drCleaning.Item(CommonUIData.TTL_CSTS_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drCleaning.Item(CommonUIData.DPT_TTL_NC)
                    Next
                Case 81 'Repair
                    For Each drRepair As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drRepair.Item(CommonUIData.LEAK_TEST)) Then
                            drRepair.Item(CommonUIData.LEAK_TEST) = CDec("0.00")
                        End If
                        If IsDBNull(drRepair.Item(CommonUIData.ADDTNL_CLNNG_CHRG_NC)) Then
                            drRepair.Item(CommonUIData.ADDTNL_CLNNG_CHRG_NC) = CDec("0.00")
                        End If
                        If IsDBNull(drRepair.Item(CommonUIData.PTI)) Then
                            drRepair.Item(CommonUIData.PTI) = CDec("0.00")
                        End If
                        If IsDBNull(drRepair.Item(CommonUIData.SURVEY)) Then
                            drRepair.Item(CommonUIData.SURVEY) = CDec("0.00")
                        End If
                        If IsDBNull(drRepair.Item(CommonUIData.TOTALAMOUNT)) Then
                            drRepair.Item(CommonUIData.TOTALAMOUNT) = CDec("0.00")
                            drRepair.Item(CommonUIData.REPAIRS) = CDec("0.00")
                        Else
                            Dim decRepairs As Decimal = CDec(drRepair.Item(CommonUIData.TOTALAMOUNT)) - CDec(drRepair.Item(CommonUIData.LEAK_TEST)) - CDec(drRepair.Item(CommonUIData.PTI)) - CDec(drRepair.Item(CommonUIData.SURVEY)) - CDec(drRepair.Item(CommonUIData.ADDTNL_CLNNG_CHRG_NC))
                            If decRepairs > 0 Then
                                drRepair.Item(CommonUIData.REPAIRS) = decRepairs
                            Else
                                drRepair.Item(CommonUIData.REPAIRS) = CDec("0.00")
                            End If
                        End If
                        If IsDBNull(drRepair.Item(CommonUIData.TTL_CSTS_NC)) Then
                            drRepair.Item(CommonUIData.TTL_CSTS_NC) = CDec("0.00")
                        Else
                            drRepair.Item(CommonUIData.TTL_CSTS_NC) = CDec(drRepair.Item(CommonUIData.TTL_CSTS_NC))
                        End If
                        drRepair.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drRepair.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drRepair.Item(CommonUIData.DPT_TTL_NC) = CDec(drRepair.Item(CommonUIData.TOTALAMOUNT)).ToString("0.00")
                        drRepair.Item(CommonUIData.TTL_CSTS_NC) = CDec(CDec(drRepair.Item(CommonUIData.TOTALAMOUNT)) * bv_decExchangeRate).ToString("0.0000")
                        drRepair.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drRepair.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drRepair.Item(CommonUIData.TTL_CSTS_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drRepair.Item(CommonUIData.DPT_TTL_NC)
                    Next
                Case 82 'Miscellaneous
                    For Each drMiscellaneous As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drMiscellaneous.Item(CommonUIData.AMNT_NC)) Then
                            drMiscellaneous.Item(CommonUIData.AMNT_NC) = CDec("0.00")
                        End If
                        drMiscellaneous.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drMiscellaneous.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drMiscellaneous.Item(CommonUIData.DPT_TTL_NC) = CDec(drMiscellaneous.Item(CommonUIData.AMNT_NC)).ToString("0.00")
                        drMiscellaneous.Item(CommonUIData.AMNT_NC) = CDec(CDec(drMiscellaneous.Item(CommonUIData.AMNT_NC)) * bv_decExchangeRate).ToString("0.0000")
                        drMiscellaneous.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drMiscellaneous.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drMiscellaneous.Item(CommonUIData.AMNT_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drMiscellaneous.Item(CommonUIData.DPT_TTL_NC)
                    Next
                Case 140 'Credit Note
                    For Each drCreditNote As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drCreditNote.Item(CommonUIData.AMNT_NC)) Then
                            drCreditNote.Item(CommonUIData.AMNT_NC) = CDec("0.00")
                        End If
                        drCreditNote.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drCreditNote.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drCreditNote.Item(CommonUIData.DPT_TTL_NC) = CDec(drCreditNote.Item(CommonUIData.AMNT_NC)).ToString("0.00")
                        drCreditNote.Item(CommonUIData.AMNT_NC) = CDec(CDec(drCreditNote.Item(CommonUIData.AMNT_NC)) * bv_decExchangeRate).ToString("0.0000")
                        drCreditNote.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drCreditNote.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drCreditNote.Item(CommonUIData.AMNT_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drCreditNote.Item(CommonUIData.DPT_TTL_NC)
                    Next
                Case 83 'Transportation
                    Dim intFullTrips As Integer = 0
                    Dim intEmptySingleTrips As Integer = 0
                    Dim intEmptyNonSingleTrips As Integer = 0
                    If Not IsDBNull(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(94,121,122)"))) Then
                        intFullTrips = CInt(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(94,121,122)")))
                    End If
                    If Not IsDBNull(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(93,120) AND EMPTY_SNGL_ID=108"))) Then
                        intEmptySingleTrips = CInt(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(93,120) AND EMPTY_SNGL_ID=108")))
                    End If
                    If Not IsDBNull(Math.Ceiling(CInt(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(93,120) AND (EMPTY_SNGL_ID=109 OR EMPTY_SNGL_ID IS NULL)"))) / 2)) Then
                        intEmptyNonSingleTrips = CInt(Math.Ceiling(CInt(bv_dtInvoicetable.Compute("COUNT(" & CommonUIData.EQPMNT_NO & ")", String.Concat(CommonUIData.EQPMNT_STT_ID, " IN(93,120) AND (EMPTY_SNGL_ID=109 OR EMPTY_SNGL_ID IS NULL)"))) / 2))
                    End If
                    For Each drTransportation As DataRow In bv_dtInvoicetable.Rows
                        drTransportation.Item(CommonUIData.NO_OF_TRIPS) = intFullTrips + intEmptySingleTrips + intEmptyNonSingleTrips
                        drTransportation.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drTransportation.Item(CommonUIData.TO_DATE) = bv_datToDate
                        drTransportation.Item(CommonUIData.CHECKED) = True
                        drTransportation.Item(CommonUIData.CSTMR_AMNT) = CDec(CDec(drTransportation.Item(CommonUIData.DPT_AMNT)) * bv_decExchangeRate).ToString("0.0000")
                        bv_decCustomerAmount = bv_decCustomerAmount + drTransportation.Item(CommonUIData.CSTMR_AMNT)
                        bv_decDepotAmount = bv_decDepotAmount + drTransportation.Item(CommonUIData.DPT_AMNT)
                    Next
                Case 84 'Rental
                    If Not (bv_dtInvoicetable.Columns.Contains(CommonUIData.FROM_BILLING_DATE)) Then
                        bv_dtInvoicetable.Columns.Add(CommonUIData.FROM_BILLING_DATE, GetType(System.DateTime))
                    End If
                    If Not (bv_dtInvoicetable.Columns.Contains(CommonUIData.TO_BILLING_DATE)) Then
                        bv_dtInvoicetable.Columns.Add(CommonUIData.TO_BILLING_DATE, GetType(System.DateTime))
                    End If
                    pvt_RentalInvoiceCalculation(bv_dtInvoicetable, bv_datFromDate, _
                                                 bv_datToDate, bv_decExchangeRate, True)
                    'GWS
                Case 151 'Inspection
                    For Each drInspection As DataRow In bv_dtInvoicetable.Rows
                        If IsDBNull(drInspection.Item(CommonUIData.INSPCTN_CHRG)) Then
                            drInspection.Item(CommonUIData.TTL_CSTS_NC) = CDec("0.00")
                        Else
                            drInspection.Item(CommonUIData.TTL_CSTS_NC) = CDec(drInspection.Item(CommonUIData.INSPCTN_CHRG))
                        End If
                        drInspection.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                        drInspection.Item(CommonUIData.TO_DATE) = bv_datToDate
                        If IsDBNull(drInspection.Item(CommonUIData.INSPCTN_CHRG)) Then
                            drInspection.Item(CommonUIData.DPT_TTL_NC) = CDec("0.00")
                            drInspection.Item(CommonUIData.TTL_CSTS_NC) = CDec("0.00")
                        Else
                            drInspection.Item(CommonUIData.DPT_TTL_NC) = CDec(drInspection.Item(CommonUIData.INSPCTN_CHRG)).ToString("0.00")
                            drInspection.Item(CommonUIData.TTL_CSTS_NC) = CDec(CDec(drInspection.Item(CommonUIData.INSPCTN_CHRG)) * bv_decExchangeRate).ToString("0.0000")
                        End If


                        drInspection.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                        drInspection.Item(CommonUIData.CHECKED) = True
                        bv_decCustomerAmount = bv_decCustomerAmount + drInspection.Item(CommonUIData.TTL_CSTS_NC)
                        bv_decDepotAmount = bv_decDepotAmount + drInspection.Item(CommonUIData.DPT_TTL_NC)
                    Next
            End Select
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pvt_RentalInvoiceCalculation()"
    Public Sub pvt_RentalInvoiceCalculation(ByRef br_dtInvoicetable As DataTable, _
                                            ByVal bv_datFromDate As Date, _
                                            ByVal bv_datToDate As Date, _
                                            ByVal bv_decExchangeRate As Decimal, _
                                            ByVal bv_blnInvoiceRecord As Boolean)
        Try
            For Each drRental As DataRow In br_dtInvoicetable.Rows
                Dim strTodate As Date
                Dim strLastInvoiceDate As String = String.Empty
                Dim blnApplyNegative As Boolean = False
                Dim intRentalDays As Integer = 0
                Dim intAlreadychrgd As Integer
                Dim decRentalCharge As Decimal = 0
                Dim decTotalCost As Decimal = 0

                If bv_blnInvoiceRecord Then
                    If IsDBNull(drRental.Item(CommonUIData.ON_HR_SRVY_NC)) Then
                        drRental.Item(CommonUIData.ON_HR_SRVY_NC) = CDec("0.00")
                    End If

                    If IsDBNull(drRental.Item(CommonUIData.OFF_HR_SRVY_NC)) Then
                        drRental.Item(CommonUIData.OFF_HR_SRVY_NC) = CDec("0.00")
                    End If

                    If IsDBNull(drRental.Item(CommonUIData.HNDLNG_IN_NC)) Then
                        drRental.Item(CommonUIData.HNDLNG_IN_NC) = CDec("0.00")
                    End If

                    If IsDBNull(drRental.Item(CommonUIData.HNDLNG_OT_NC)) Then
                        drRental.Item(CommonUIData.HNDLNG_OT_NC) = CDec("0.00")
                    End If

                    If IsDBNull(drRental.Item(CommonUIData.OTHR_CHRG_NC)) Then
                        drRental.Item(CommonUIData.OTHR_CHRG_NC) = CDec("0.00")
                    End If

                    If IsDBNull(drRental.Item(CommonUIData.RNTL_PR_DY_NC)) Then
                        drRental.Item(CommonUIData.RNTL_PR_DY_NC) = CDec("0.00")
                    End If
                End If

                If Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso CommonUIs.iDat(drRental.Item(CommonUIData.TO_BLLNG_DT)) > bv_datToDate Then
                    strTodate = bv_datToDate
                ElseIf Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) Then
                    strTodate = CommonUIs.iDat(drRental.Item(CommonUIData.TO_BLLNG_DT))
                Else
                    strTodate = bv_datToDate
                End If

                If Not IsDBNull(drRental.Item(CommonUIData.BLLNG_TLL_DT)) Then
                    strLastInvoiceDate = drRental.Item(CommonUIData.BLLNG_TLL_DT).ToString
                Else
                    strLastInvoiceDate = ""
                End If

                'If drRental.Item(CommonUIData.IS_LT_FLG) = False Then
                If strLastInvoiceDate = "" Then
                    intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate)) + 1)
                    intAlreadychrgd = 0
                    drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT))
                    drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strTodate)
                Else
                    intAlreadychrgd = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(drRental.Item(CommonUIData.BLLNG_TLL_DT)))) + 1
                    If drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) AndAlso Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso _
                                drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) Then
                        If (drRental.Item(CommonUIData.BLLNG_TLL_DT) > Convert.ToDateTime(strTodate)) OrElse (drRental.Item(CommonUIData.BLLNG_TLL_DT) < Convert.ToDateTime(strTodate)) Then
                            drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate).AddDays(1)
                        Else
                            drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate)
                        End If
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(strTodate))) + 1
                        If drRental.Item(CommonUIData.TO_BLLNG_DT) > Convert.ToDateTime(strTodate) Then
                            drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strTodate)
                        Else
                            drRental.Item(CommonUIData.TO_BILLING_DATE) = drRental.Item(CommonUIData.TO_BLLNG_DT)
                        End If
                    ElseIf Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) _
                                AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(bv_datToDate) Then
                        drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                        drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                    ElseIf Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) _
                                AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) Then
                        drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                        drRental.Item(CommonUIData.TO_BILLING_DATE) = drRental.Item(CommonUIData.TO_BLLNG_DT)
                    ElseIf IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) Then
                        drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                        drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                    ElseIf IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) Then
                        drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate).AddDays(1)
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(strTodate))) + 1
                        drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                    ElseIf drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) AndAlso Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso _
                            drRental.Item(CommonUIData.TO_BLLNG_DT) < Convert.ToDateTime(strLastInvoiceDate) Then
                        drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(drRental.Item(CommonUIData.TO_BLLNG_DT)).AddDays(1)
                        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(drRental.Item(CommonUIData.TO_BLLNG_DT)))) + 1
                        drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate)
                    End If
                End If

                drRental.Item(CommonUIData.RNTL_DYS) = intRentalDays

                'ElseIf drRental.Item(CommonUIData.IS_LT_FLG) = True Then
                '    If strLastInvoiceDate = "" Then
                '        intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate)) + 1)
                '        intAlreadychrgd = 0
                '        drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT))
                '        drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strTodate)
                '    Else
                '        intAlreadychrgd = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strLastInvoiceDate).AddDays(1)))
                '        If Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) _
                '           AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.TO_BLLNG_DT).AddDays(1)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, drRental.Item(CommonUIData.FRM_BLLNG_DT), Convert.ToDateTime(drRental.Item(CommonUIData.TO_BLLNG_DT)).AddDays(1)))
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate)
                '            If drRental.Item(CommonUIData.TO_BLLNG_DT) <= Convert.ToDateTime(strTodate) Then
                '                drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate).AddDays(1)
                '            Else
                '                drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate)
                '            End If
                '            drRental.Item(CommonUIData.RNTL_DYS) = intRentalDays - intAlreadychrgd
                '        ElseIf Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) _
                '                AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(bv_datToDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                '        ElseIf Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.TO_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) _
                '             AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = drRental.Item(CommonUIData.TO_BLLNG_DT)
                '        ElseIf IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) >= Convert.ToDateTime(strLastInvoiceDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = drRental.Item(CommonUIData.FRM_BLLNG_DT)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(drRental.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate))) + 1
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                '        ElseIf IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate).AddDays(1)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(strTodate))) + 1
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = bv_datToDate
                '        ElseIf drRental.Item(CommonUIData.FRM_BLLNG_DT) <= Convert.ToDateTime(strLastInvoiceDate) AndAlso Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso _
                '                drRental.Item(CommonUIData.TO_BLLNG_DT) < Convert.ToDateTime(strLastInvoiceDate) Then
                '            drRental.Item(CommonUIData.FROM_BILLING_DATE) = Convert.ToDateTime(drRental.Item(CommonUIData.TO_BLLNG_DT)).AddDays(1)
                '            intRentalDays = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(drRental.Item(CommonUIData.TO_BLLNG_DT)))) + 1
                '            drRental.Item(CommonUIData.TO_BILLING_DATE) = Convert.ToDateTime(strLastInvoiceDate)
                '        End If
                '    End If
                '    drRental.Item(CommonUIData.RNTL_DYS) = intRentalDays
                '    'drRental.Item(CommonUIData.ON_HR_SRVY_NC) = CDec("0.00")
                '    'drRental.Item(CommonUIData.OFF_HR_SRVY_NC) = CDec("0.00")
                '    'drRental.Item(CommonUIData.HNDLNG_IN_NC) = CDec("0.00")
                '    'drRental.Item(CommonUIData.HNDLNG_OT_NC) = CDec("0.00")
                '    'drRental.Item(CommonUIData.OTHR_CHRG_NC) = CDec("0.00")
                '  End If

                If Not IsDBNull(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso Not IsDBNull(drRental.Item(CommonUIData.TO_BILLING_DATE)) _
                    AndAlso Convert.ToDateTime(strTodate) < CDate(drRental.Item(CommonUIData.TO_BLLNG_DT)) AndAlso bv_blnInvoiceRecord Then
                    drRental.Item(CommonUIData.OFF_HR_SRVY_NC) = CDec("0.00")
                    drRental.Item(CommonUIData.HNDLNG_IN_NC) = CDec("0.00")
                    drRental.Item(CommonUIData.OTHR_CHRG_NC) = CDec("0.00")
                End If
                decRentalCharge = drRental.Item(CommonUIData.RNTL_DYS) * drRental.Item(CommonUIData.RNTL_PR_DY_NC)

                If bv_blnInvoiceRecord Then
                    drRental.Item(CommonUIData.RNTL_CHRG_NC) = decRentalCharge
                    decTotalCost = decRentalCharge + drRental.Item(CommonUIData.ON_HR_SRVY_NC) + drRental.Item(CommonUIData.OFF_HR_SRVY_NC) + _
                                        drRental.Item(CommonUIData.HNDLNG_IN_NC) + drRental.Item(CommonUIData.HNDLNG_OT_NC) + drRental.Item(CommonUIData.OTHR_CHRG_NC)
                    drRental.Item(CommonUIData.TTL_CSTS_NC) = decTotalCost
                    drRental.Item(CommonUIData.DPT_TTL_NC) = CDec(decTotalCost * bv_decExchangeRate).ToString("0.0000")
                    drRental.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC) = bv_decExchangeRate
                    drRental.Item(CommonUIData.FROM_DATE) = bv_datFromDate
                    drRental.Item(CommonUIData.TO_DATE) = bv_datToDate
                Else
                    drRental.Item(CommonUIData.CSTMR_AMNT) = decRentalCharge * CDec(drRental.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC))
                    drRental.Item(CommonUIData.DPT_AMNT) = decRentalCharge
                End If

                If Not IsDBNull(drRental.Item(CommonUIData.RNTL_DYS)) AndAlso CInt(drRental.Item(CommonUIData.RNTL_DYS)) < 0 Then
                    drRental.Item(CommonUIData.RNTL_DYS) = -intRentalDays
                ElseIf Not IsDBNull(drRental.Item(CommonUIData.RNTL_DYS)) AndAlso CInt(drRental.Item(CommonUIData.RNTL_DYS)) > 0 Then
                    drRental.Item(CommonUIData.RNTL_DYS) = intRentalDays
                End If
            Next
        Catch ex As Exception
            Throw ex
        End Try
    End Sub
#End Region

#Region "pub_HSStorage_Calculation"
    Public Function pub_HSStorage_Calculation(ByRef dtStorageCharge As DataTable, _
                                              ByVal fromInvoiceDate As DateTime, _
                                              ByVal toInvoiceDate As DateTime, _
                                              ByVal bv_blnInvoiceRecord As Boolean, _
                                              Optional ByVal bv_i32DepotID As Int32 = 0, _
                                              Optional ByVal str_067InvoiceGenerationGWSBit As String = Nothing) As Boolean
        Try
            Dim noofdays As Integer
            Dim intAlreadychrgd As Integer
            Dim dtCustomerStorageDetail As New DataTable
            Dim strTodate As Date
            Dim intUpToDys As Integer
            Dim strLastInvoiceDate As String = String.Empty

            If Not bv_blnInvoiceRecord Then
                If Not (dtStorageCharge.Columns.Contains(CommonUIData.FROM_BILLING_DATE)) Then
                    dtStorageCharge.Columns.Add(CommonUIData.FROM_BILLING_DATE, GetType(System.DateTime))
                End If
                If Not (dtStorageCharge.Columns.Contains(CommonUIData.TO_BILLING_DATE)) Then
                    dtStorageCharge.Columns.Add(CommonUIData.TO_BILLING_DATE, GetType(System.DateTime))
                End If
                If Not (dtStorageCharge.Columns.Contains(CommonUIData.TTL_CSTS_NC)) Then
                    dtStorageCharge.Columns.Add(CommonUIData.TTL_CSTS_NC, GetType(System.Decimal))
                End If
            End If

            For intcount As Integer = 0 To dtStorageCharge.Rows.Count - 1
                Dim blnApplyNegative As Boolean = False
                If CommonUIs.iBool(dtStorageCharge.Rows(intcount).Item(CommonUIData.IS_LT_FLG)) = False Then
                    With dtStorageCharge.Rows(intcount)

                        If IsDBNull(.Item(CommonUIData.TO_BLLNG_DT)) Then
                            strTodate = toInvoiceDate
                        ElseIf CommonUIs.iDat(.Item(CommonUIData.TO_BLLNG_DT)) > toInvoiceDate Then
                            strTodate = toInvoiceDate
                        Else
                            strTodate = CommonUIs.iDat(.Item(CommonUIData.TO_BLLNG_DT))
                        End If
                        If Not IsDBNull(.Item(CommonUIData.BLLNG_TLL_DT)) Then
                            strLastInvoiceDate = .Item(CommonUIData.BLLNG_TLL_DT).ToString
                        Else
                            strLastInvoiceDate = ""
                        End If

                        If strLastInvoiceDate = "" Then
                            intUpToDys = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strTodate)) + 1)
                            intAlreadychrgd = 0
                            .Item(CommonUIData.FRM_BLLNG_DT) = Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT))
                            .Item(CommonUIData.TO_BLLNG_DT) = Convert.ToDateTime(strTodate)
                        Else
                            intUpToDys = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(strLastInvoiceDate).AddDays(1), Convert.ToDateTime(strTodate))) + 1
                            intAlreadychrgd = CommonUIs.iInt(DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(strLastInvoiceDate))) + 1
                            .Item(CommonUIData.FRM_BLLNG_DT) = Convert.ToDateTime(strLastInvoiceDate).AddDays(1)
                            .Item(CommonUIData.TO_BLLNG_DT) = Convert.ToDateTime(strTodate)
                        End If

                        dtCustomerStorageDetail = New DataTable
                        dtCustomerStorageDetail = Get_SlabRate(CLng(.Item(CommonUIData.CSTMR_ID)), _
                                                               CLng(.Item(CommonUIData.EQPMNT_TYP_ID)), _
                                                               CLng(.Item(CommonUIData.EQPMNT_CD_ID)))



                        'For GWS Key:067
                        If str_067InvoiceGenerationGWSBit <> Nothing AndAlso str_067InvoiceGenerationGWSBit.ToUpper() = "TRUE" Then

                            Dim dtGateIn As DataTable = Nothing
                            Dim dtAgent As DataTable = Nothing
                            Dim intAgentID As String = Nothing

                            'Check Bill To from Gate In
                            dtGateIn = GetGateInInfo(.Item(CommonUIData.EQPMNT_NO), .Item(CommonUIData.GI_TRNSCTN_NO), .Item(CommonUIData.CSTMR_ID))


                            If dtGateIn.Rows.Count > 0 Then

                                'Check Agent
                                If Not dtGateIn.Rows(0).Item(GateinData.BLL_ID) Is DBNull.Value AndAlso dtGateIn.Rows(0).Item(GateinData.BLL_ID).ToString().ToUpper() = "AGENT" Then

                                    'Get Agent Details from Customer

                                    dtAgent = GetAgenIdFromCustomer(.Item(CommonUIData.CSTMR_ID), bv_i32DepotID)

                                    If dtAgent.Rows.Count > 0 Then



                                        If Not dtAgent.Rows(0).Item(GateOutData.AGENT_ID) Is DBNull.Value AndAlso dtAgent.Rows(0).Item(GateOutData.AGENT_ID).ToString() <> Nothing Then

                                            intAgentID = dtAgent.Rows(0).Item(GateOutData.AGENT_ID).ToString()
                                            'Get Agent Slap Details
                                            dtCustomerStorageDetail = New DataTable

                                            dtCustomerStorageDetail = Get_AgentSlabRate(intAgentID, CLng(.Item(CommonUIData.EQPMNT_TYP_ID)), _
                                                                      CLng(.Item(CommonUIData.EQPMNT_CD_ID)))
                                        End If



                                    End If

                                End If

                            End If



                            'Get_AgentSlabRate
                        End If


                        .Item(CommonUIData.NO_OF_DYS) = intUpToDys
                        noofdays = CommonUIs.iInt(.Item(CommonUIData.NO_OF_DYS))
                        If dtCustomerStorageDetail.Rows.Count > 0 Then
                            Dim decStrgSlabrate As Decimal = pvt_CalculateSlabRateRecurring(noofdays, dtCustomerStorageDetail, intAlreadychrgd)

                            If Not IsDBNull(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.STRG_CHRG_NC)) AndAlso CDec(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.STRG_CHRG_NC)) = 0 Then
                                If noofdays < CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) AndAlso intAlreadychrgd = 0 Then
                                    .Item(CommonUIData.FR_DYS) = noofdays
                                ElseIf noofdays >= CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) AndAlso intAlreadychrgd = 0 Then
                                    .Item(CommonUIData.FR_DYS) = CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS))
                                ElseIf intAlreadychrgd < CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) Then
                                    Dim intRemainingFreeDays As Integer
                                    intRemainingFreeDays = CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) - intAlreadychrgd
                                    If intRemainingFreeDays > noofdays Then
                                        .Item(CommonUIData.FR_DYS) = noofdays
                                    Else
                                        .Item(CommonUIData.FR_DYS) = intRemainingFreeDays
                                    End If
                                Else
                                    .Item(CommonUIData.FR_DYS) = 0
                                End If
                            Else
                                .Item(CommonUIData.FR_DYS) = 0
                            End If
                            .Item(CommonUIData.TTL_CSTS_NC) = decStrgSlabrate
                        Else
                            .Item(CommonUIData.TTL_CSTS_NC) = 0
                        End If
                    End With
                ElseIf CommonUIs.iBool(dtStorageCharge.Rows(intcount).Item(CommonUIData.IS_LT_FLG)) = True Then
                    With dtStorageCharge.Rows(intcount)
                        Dim datFromBillingDate As Date
                        Dim datToBillingDate As Date
                        If ((DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT)))) + 1 < Convert.ToInt32(.Item(CommonUIData.FR_DYS))) Then
                            .Item(CommonUIData.NO_OF_DYS) = 0
                        Else
                            If ((DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT)))) > Convert.ToInt32(.Item(CommonUIData.FR_DYS))) Then
                                .Item(CommonUIData.NO_OF_DYS) = -(DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT)), Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))) - 1)
                                noofdays = CommonUIs.iInt(.Item(CommonUIData.NO_OF_DYS))
                                datFromBillingDate = Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT))
                                datToBillingDate = Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))
                                .Item(CommonUIData.FRM_BLLNG_DT) = Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT))
                                .Item(CommonUIData.TO_BLLNG_DT) = Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))

                            ElseIf ((DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.FRM_BLLNG_DT)), Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT)))) <= Convert.ToInt32(.Item(CommonUIData.FR_DYS))) Then
                                .Item(CommonUIData.NO_OF_DYS) = -(DateDiff(DateInterval.Day, Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT)), Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))))
                                noofdays = CommonUIs.iInt(.Item(CommonUIData.NO_OF_DYS))
                                datFromBillingDate = Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT))
                                datToBillingDate = Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))
                                .Item(CommonUIData.FRM_BLLNG_DT) = Convert.ToDateTime(.Item(CommonUIData.TO_BLLNG_DT))

                                .Item(CommonUIData.TO_BLLNG_DT) = Convert.ToDateTime(.Item(CommonUIData.BLLNG_TLL_DT))
                            End If
                        End If

                        dtCustomerStorageDetail = Get_SlabRate(CommonUIs.iLng(.Item(CommonUIData.CSTMR_ID)), _
                                                               CommonUIs.iLng(.Item(CommonUIData.EQPMNT_TYP_ID)), _
                                                               CommonUIs.iLng(.Item(CommonUIData.EQPMNT_CD_ID)))
                        If dtCustomerStorageDetail.Rows.Count > 0 Then
                            intAlreadychrgd = CommonUIs.iInt(DateDiff(DateInterval.Day, datFromBillingDate, datToBillingDate) + 1)
                            If noofdays < 0 Then
                                noofdays = -(noofdays)
                                blnApplyNegative = True
                            End If
                            Dim decStrgSlabrate As Decimal = pvt_CalculateSlabRateRecurring(noofdays, dtCustomerStorageDetail, intAlreadychrgd)
                            If Not IsDBNull(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.STRG_CHRG_NC)) AndAlso CDec(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.STRG_CHRG_NC)) = 0 Then
                                If noofdays < CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) AndAlso intAlreadychrgd = 0 Then
                                    .Item(CommonUIData.FR_DYS) = noofdays
                                ElseIf noofdays >= CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) AndAlso intAlreadychrgd = 0 Then
                                    .Item(CommonUIData.FR_DYS) = CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS))
                                ElseIf intAlreadychrgd < CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) Then
                                    Dim intRemainingFreeDays As Integer
                                    intRemainingFreeDays = CInt(dtCustomerStorageDetail.Rows(0).Item(CommonUIData.UP_TO_DYS)) - intAlreadychrgd
                                    If intRemainingFreeDays > noofdays Then
                                        .Item(CommonUIData.FR_DYS) = noofdays
                                    Else
                                        .Item(CommonUIData.FR_DYS) = intRemainingFreeDays
                                    End If
                                End If
                            End If
                            If blnApplyNegative = True Then
                                .Item(CommonUIData.TTL_CSTS_NC) = -decStrgSlabrate
                            Else
                                .Item(CommonUIData.TTL_CSTS_NC) = decStrgSlabrate
                            End If
                        Else
                            .Item(CommonUIData.TTL_CSTS_NC) = 0
                        End If
                    End With
                End If
                If Not bv_blnInvoiceRecord Then
                    With dtStorageCharge.Rows(intcount)
                        .Item(CommonUIData.FROM_BILLING_DATE) = CDate(.Item(CommonUIData.FRM_BLLNG_DT))
                        .Item(CommonUIData.TO_BILLING_DATE) = CDate(.Item(CommonUIData.TO_BLLNG_DT))
                        .Item(CommonUIData.DPT_AMNT) = CDec(.Item(CommonUIData.TTL_CSTS_NC))
                        .Item(CommonUIData.CSTMR_AMNT) = CDec(.Item(CommonUIData.TTL_CSTS_NC)) * CDec(.Item(CommonUIData.EXCHNG_RT_PR_UNT_NC))
                    End With
                End If
            Next
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "pvt_CalculateSlabRateRecurring"
    Private Function pvt_CalculateSlabRateRecurring(ByRef br_intChargableDays As Integer, _
                                                    ByRef br_dtCustomerStorageDetail As DataTable, _
                                                    ByVal bv_AlreadyChargedDays As Integer) As Decimal

        Dim decTotalStorageCharge As Decimal = 0
        Dim intDays As Integer = br_intChargableDays
        Dim drRate As DataRow
        Dim intDaySpan As Integer = 0
        Dim intDaySpanSum As Integer = 0
        Dim intCalculationStart As Integer = 0
        Try
            For i = 0 To br_dtCustomerStorageDetail.Rows.Count - 1
                drRate = br_dtCustomerStorageDetail.Rows(i)

                If bv_AlreadyChargedDays >= CInt(drRate.Item(CommonUIData.UP_TO_DYS).ToString()) Then
                    Continue For
                Else
                    intCalculationStart = intCalculationStart + 1

                    If bv_AlreadyChargedDays > CommonUIs.iInt(drRate.Item(CommonUIData.UP_TO_DYS).ToString()) Then
                        decTotalStorageCharge = decTotalStorageCharge + CDec(br_dtCustomerStorageDetail.Rows(br_dtCustomerStorageDetail.Rows.Count - 1).Item(CommonUIData.STRG_CHRG_NC)) * br_intChargableDays
                        Return decTotalStorageCharge
                    End If

                    If intCalculationStart = 1 Then
                        intDaySpan = CommonUIs.iInt(drRate.Item(CommonUIData.UP_TO_DYS).ToString()) - bv_AlreadyChargedDays
                    Else
                        If i = 0 Then
                            intDaySpan = CommonUIs.iInt(drRate.Item(CommonUIData.UP_TO_DYS).ToString())
                        Else
                            intDaySpan = CommonUIs.iInt(drRate.Item(CommonUIData.UP_TO_DYS).ToString()) - CInt(br_dtCustomerStorageDetail.Rows(i - 1).Item(CommonUIData.UP_TO_DYS).ToString())
                        End If
                    End If
                    If intDaySpan < intDays Then
                        decTotalStorageCharge = decTotalStorageCharge + CDec(drRate.Item(CommonUIData.STRG_CHRG_NC)) * intDaySpan
                        intDays = intDays - intDaySpan
                    Else
                        decTotalStorageCharge = decTotalStorageCharge + CDec(drRate.Item(CommonUIData.STRG_CHRG_NC)) * intDays
                        intDays = 0
                        Exit For
                    End If
                End If

            Next

            If intDays <> 0 Then
                decTotalStorageCharge = decTotalStorageCharge + CDec(br_dtCustomerStorageDetail.Rows(br_dtCustomerStorageDetail.Rows.Count - 1).Item(CommonUIData.STRG_CHRG_NC)) * intDays
            End If

            Return decTotalStorageCharge
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "Get_SlabRate"

    Public Function Get_SlabRate(ByVal bv_i64CustomerId As Int64, _
                                  ByVal bv_i64EqpmntTypyId As Int64, _
                                  ByVal bv_i64EqpmntCodeId As Int64) As DataTable
        Try
            Dim hshparameters As New Hashtable
            Dim dtStorage As New DataTable
            hshparameters.Add(CommonUIData.CSTMR_ID, bv_i64CustomerId)
            hshparameters.Add(CommonUIData.EQPMNT_TYP_ID, bv_i64EqpmntTypyId)
            hshparameters.Add(CommonUIData.EQPMNT_CD_ID, bv_i64EqpmntCodeId)
            objData = New DataObjects(Customer_Storage_DetailSelectQuery, hshparameters)
            objData.Fill(dtStorage)
            Return dtStorage
        Catch
            Throw New Exception
        End Try
    End Function

    Public Function Get_AgentSlabRate(ByVal bv_i64AgentId As Int64, _
                                 ByVal bv_i64EqpmntTypeId As Int64, _
                                 ByVal bv_i64EqpmntCodeId As Int64) As DataTable
        Try
            Dim hshparameters As New Hashtable
            Dim dtStorage As New DataTable
            hshparameters.Add(GateinData.AGNT_ID, bv_i64AgentId)
            hshparameters.Add(CommonUIData.EQPMNT_TYP_ID, bv_i64EqpmntTypeId)
            hshparameters.Add(CommonUIData.EQPMNT_CD_ID, bv_i64EqpmntCodeId)
            objData = New DataObjects(Get_AgentSlabRate_SelectQuery, hshparameters)
            objData.Fill(dtStorage)
            Return dtStorage
        Catch
            Throw New Exception
        End Try
    End Function

    Public Function GetGateInInfo(ByVal bv_strEquipment As String, _
                                  ByVal bv_strGI_Transaction As String, _
                                  ByVal bv_strCustomerId As String) As DataTable
        Try
            Dim hshparameters As New Hashtable
            Dim dt As New DataTable

            hshparameters.Add(GateinData.EQPMNT_NO, bv_strEquipment)
            hshparameters.Add(CommonUIData.GI_TRNSCTN_NO, bv_strGI_Transaction)
            hshparameters.Add(CommonUIData.CSTMR_ID, bv_strCustomerId)

            objData = New DataObjects(GetGateInInfo_SelectQry, hshparameters)
            objData.Fill(dt)
            Return dt
        Catch
            Throw New Exception
        End Try
    End Function

    Public Function GetAgenIdFromCustomer(ByVal bv_StrCustomerId As String, _
                                       ByVal bv_intDepotID As Integer) As DataTable
        Try
            Dim hshTable As New Hashtable()
            Dim dt As New DataTable
            hshTable.Add(GateinData.CSTMR_ID, bv_StrCustomerId)
            hshTable.Add(GateinData.DPT_ID, bv_intDepotID)

            objData = New DataObjects(GetAgenIdFromCustomer_SelectQry, hshTable)
            objData.Fill(dt)

            Return dt
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetCustomerByDepotIdCustomerID() TABLE NAME:V_CUSTOMER"

    Public Function GetCustomerByDepotIdCustomerID(ByVal bv_i64ServiceId As Int64, _
                                                   ByVal bv_strCustomerType As String, _
                                                   ByVal bv_i32DepotId As Int32) As CommonUIDataSet
        Try
            Dim hshparamters As New Hashtable
            Dim strQuery As String = String.Empty
            hshparamters.Add(CommonUIData.DPT_ID, bv_i32DepotId)
            hshparamters.Add(CommonUIData.SRVC_PRTNR_ID, bv_i64ServiceId)
            hshparamters.Add(CommonUIData.SRVC_PRTNR_TYP_CD, bv_strCustomerType)
            objData = New DataObjects(SERVICE_PARTNERSelectQuery, hshparamters)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_CUSTOMER)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetBankDetailByDepotId() TABLE NAME: BANK_DETAIL"

    Public Function GetBankDetailByDepotId(ByVal bv_i32DepotId As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(Bank_Detail_SelectQueryForLocalCurrency, CommonUIData.DPT_ID, bv_i32DepotId)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_BANK_DETAIL)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetBankDetailByDepotIdForForeignCurrency() TABLE NAME: BANK_DETAIL"

    Public Function GetBankDetailByDepotIdForForeignCurrency(ByVal bv_i32DepotId As Int32) As CommonUIDataSet
        Try
            objData = New DataObjects(Bank_Detail_SelectQueryForForeignCurrency, CommonUIData.DPT_ID, bv_i32DepotId)
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._FOREIGN_BANK_DETAIL)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateActivityStatusForInvoiceGeneratedBit() TABLE NAME:Activity_Status"

    Public Function UpdateActivityStatusForInvoiceGeneratedBit(ByVal bv_strEquipmentNo As String, _
                                                               ByVal bv_strGateInTransactionNo As String, _
                                                               ByVal bv_blnInvoiceGeneratedBit As Boolean, _
                                                               ByVal bv_i32DepoID As Int32, _
                                                               ByRef br_objTransactions As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._ACTIVITY_STATUS).NewRow()
            With dr
                .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateInTransactionNo
                .Item(CommonUIData.INVC_GNRT_BT) = bv_blnInvoiceGeneratedBit
                .Item(CommonUIData.DPT_ID) = bv_i32DepoID
            End With
            UpdateActivityStatusForInvoiceGeneratedBit = objData.UpdateRow(dr, Activity_StatusUpdateQueryForInvoiceGeneratedBit, br_objTransactions)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region


#End Region

#Region "GetEquipmentActivityReport() "

    Public Function GetEquipmentActivityReport(ByVal bv_strCustomer As String, ByVal bv_strEquipmentTyp As String, ByVal bv_dtPeriodFromDate As Date, _
                                               ByVal bv_dtPeriodToDate As Date, ByVal bv_intDepotID As String) As CommonUIDataSet
        Try
            Dim strWhere As String = String.Concat(" WHERE DPT_ID IN (", bv_intDepotID, ")")
            If bv_strCustomer <> "" Then
                strWhere = String.Concat(strWhere, " AND ", CommonUIData.CSTMR_ID, " IN (", bv_strCustomer, ")")
            End If
            If bv_strEquipmentTyp <> "" Then
                strWhere = String.Concat(strWhere, " AND ", CommonUIData.EQPMNT_TYP_ID, " IN (", bv_strEquipmentTyp, ") ")
            End If
            If bv_dtPeriodFromDate <> Nothing And bv_dtPeriodToDate <> Nothing Then
                strWhere = String.Concat(strWhere, " AND ", CommonUIData.ACTVTY_DT, " >= ('", bv_dtPeriodFromDate.ToString("dd-MMM-yyyy"), "') AND ", CommonUIData.ACTVTY_DT, " <= '", bv_dtPeriodToDate.ToString("dd-MMM-yyyy"), "' ORDER BY ACTVTY_DT_SORT  ASC")
            End If
            objData = New DataObjects(String.Concat(V_EQUIPMENT_ACTIVTY_DATESelectQuery, strWhere))
            objData.Fill(CType(dsCommon, DataSet), CommonUIData._V_EQUIPMENT_ACTIVTY_DATE)
            Return dsCommon
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

    'Modified by [MMS]
#Region "GetAdditionalReportData() "
    Public Function GetOpenStockReportData(ByVal bv_strWhere As String, ByVal dt_frm_dt As Date) As Integer
        Try
            Dim dtAdditionalReportData As New DataTable
            Dim hshparameters As New Hashtable
            Dim strQuery As String = V_AdditionalReportDataSelectQuery.Replace("@WHERE", bv_strWhere)
            hshparameters.Add(CommonUIData.GTN_DT, dt_frm_dt)
            hshparameters.Add(CommonUIData.GTOT_DT, dt_frm_dt)
            objData = New DataObjects(strQuery, hshparameters)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetAdditionalReportData() "
    Public Function GetAvailableReportData(ByVal bv_strWhere As String, ByVal dt_frm_dt As Date) As Integer
        Try
            Dim dtAdditionalReportData As New DataTable
            Dim hshparameters As New Hashtable
            Dim strQuery As String = V_AvailableDataSelectQuery.Replace("@WHERE", bv_strWhere)
            hshparameters.Add(CommonUIData.ACTVTY_DT, dt_frm_dt)
            objData = New DataObjects(strQuery, hshparameters)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetGateMovesReport() "
    Public Function GetGateMovesReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtGateMoves As New DataTable
            objData = New DataObjects(String.Concat(V_DAR_ACTIVITY_STATUSSelectQuery, bv_strWhere))
            objData.Fill(dtGateMoves)
            Return dtGateMoves
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetGateMoves_DetailReport() "
    Public Function GetGateMoves_DetailReport(ByVal bv_strGateInDate As String, ByVal bv_strGateOutDate As String, ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtGateMoves As New DataTable
            Dim strQuery As String = V_GATE_MOVES_DETAILSelectQuery.Replace("@GATEINDATE", bv_strGateInDate)
            objData = New DataObjects(String.Concat(strQuery.Replace("@GATEOUTDATE", bv_strGateOutDate), bv_strWhere))
            objData.Fill(dtGateMoves)
            Return dtGateMoves
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetEquipmentYardLocationReport() "
    Public Function GetEquipmentYardLocationReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtEqpYard As New DataTable
            objData = New DataObjects(String.Concat(V_ACTIVITY_STATUSSelectQuery, bv_strWhere))
            objData.Fill(dtEqpYard)
            Return dtEqpYard
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetAvailableUnitData()"
    Function GetAvailableUnitData(strWhere As String, ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim dsAvailUnits As New CommonUIDataSet
            Dim hshparameters As New Hashtable
            '  hshparameters.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects((String.Concat(V_AvailableUnitSelectQuery, strWhere)), hshparameters)
            objData.Fill(CType(dsAvailUnits, DataSet), CommonUIData._V_RPT_AVAILABLEUNITS)
            Return dsAvailUnits
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetTankTestDetailReport() "
    Public Function GetTankTestDetailReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtTankTestDetail As New DataTable
            objData = New DataObjects(String.Concat(VM_TANK_TEST_DETAILSelectQuery, bv_strWhere))
            objData.Fill(dtTankTestDetail)
            Return dtTankTestDetail
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetHeatingReport() "
    Public Function GetHeatingReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtHeating As New DataTable
            objData = New DataObjects(String.Concat(VM_HEATINGSelectQuery, bv_strWhere))
            objData.Fill(dtHeating)
            Return dtHeating
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceHeatingReport() "
    Public Function GetRevenueHeatingReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceHeating As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_HEATINGSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceHeating)
            Return dtFinanceHeating
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceCleaningReport() "
    Public Function GetFinanceCleaningReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceCleaning As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_CLEANINGSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceCleaning)
            Return dtFinanceCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceInspectionReport()"
    Public Function GetFinanceInspectionReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceInspection As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_INSPECTIONSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceInspection)
            Return dtFinanceInspection
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetFinanceRepairReport() "
    Public Function GetFinanceRepairReport(ByVal bv_strWhere As String, _
                                           ByVal bv_decRepairCost As Decimal) As DataTable
        Try
            Dim dtFinanceRepair As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_REPAIRSelectQuery.Replace("@REPAIR_COST", bv_decRepairCost), bv_strWhere))
            objData.Fill(dtFinanceRepair)
            Return dtFinanceRepair
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetDAR_ACTIVITY_STATUS_CleaningActivity() "

    Public Function GetDAR_ACTIVITY_STATUS_CleaningActivity(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaningActivity As New DataTable
            objData = New DataObjects(String.Concat(V_DAR_ACTIVITY_STATUSSelectQuery, bv_strWhere))
            objData.Fill(dtCleaningActivity)
            Return dtCleaningActivity
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinanceInvoiceRegisterReport() "
    Public Function GetFinanceInvoiceRegisterReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_INVOICE_REGISTERSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceInvoiceRegister)
            Return dtFinanceInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetEquipmentRepairStatusReport() "
    Public Function GetEquipmentRepairStatusReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtEquipmentRepairStatus As New DataTable
            objData = New DataObjects(String.Concat(VM_EQUIPMENT_REPAIR_STATUSSelectQuery, bv_strWhere))
            objData.Fill(dtEquipmentRepairStatus)
            Return dtEquipmentRepairStatus
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinancePendingInvoiceRegisterReport() "
    Public Function GetFinancePendingInvoiceRegisterReport(ByRef dtPendingInvoiceRegister As DataTable, _
                                                          ByVal bv_strWhere As String, _
                                                           ByVal bv_strTableName As String) As DataTable
        Try
            Dim dtTempPendingInvoiceRegister As DataTable = dtPendingInvoiceRegister.Clone()
            objData = New DataObjects(String.Concat(VM_PENDING_INVOICE_REGISTERSelectQuery, bv_strTableName, " I ", bv_strWhere, " AND DPT_AMNT>0 AND DPT_AMNT IS NOT NULL "))
            objData.Fill(dtTempPendingInvoiceRegister)
            Return dtTempPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetKPIHeatingReport() "
    Public Function GetKPIHeatingReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPIHeating As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_HEATINGSelectQuery, bv_strWhere))
            objData.Fill(dtKPIHeating)
            Return dtKPIHeating
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPICleaningReport() "
    Public Function GetKPICleaningReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPICleaning As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_CLEANINGSelectQuery, bv_strWhere))
            objData.Fill(dtKPICleaning)
            Return dtKPICleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPIRepairReport() "
    Public Function GetKPIRepairReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPIRepair As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_REPAIRSelectQuery, bv_strWhere))
            objData.Fill(dtKPIRepair)
            Return dtKPIRepair
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPIRepairLaborReport() "
    Public Function GetKPIRepairLaborReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPIRepairLabor As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_REPAIR_LABORSelectQuery, bv_strWhere))
            objData.Fill(dtKPIRepairLabor)
            Return dtKPIRepairLabor
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCountRepairType() "
    Public Function GetCountRepairType() As Long
        Try
            objData = New DataObjects(REPAIRTYPECOUNT_SELECTQUERY)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPIOVerallReport() "
    Public Function GetKPIOVerallReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPIOverall As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_OVERALLSelectQuery, bv_strWhere))
            objData.Fill(dtKPIOverall)
            Return dtKPIOverall
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPIReport_RepairType() "
    Public Function GetKPIReport_RepairType(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPIRepairType As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICSRepairTypeSelectQuery, bv_strWhere))
            objData.Fill(dtKPIRepairType)
            Return dtKPIRepairType
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetTransportationReport() "
    Public Function GetTransportationReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtTransportation As New DataTable
            objData = New DataObjects(String.Concat(VM_TRANSPORTATIONSelectQuery, bv_strWhere))
            objData.Fill(dtTransportation)
            Return dtTransportation
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceTransportationReport() "
    Public Function GetFinanceTransportationReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceTransportation As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_TRANSPORTATIONSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceTransportation)
            Return dtFinanceTransportation
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetKPITransportationReport() "
    Public Function GetKPITransportationReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtKPITransportation As New DataTable
            objData = New DataObjects(String.Concat(VM_METRICS_TRANSPORTATIONSelectQuery, bv_strWhere))
            objData.Fill(dtKPITransportation)
            Return dtKPITransportation
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "CreateAuditLog() TABLE NAME:Audit_Log"

    Public Function CreateAuditLog(ByVal bv_strEquipmentNo As String, _
                                   ByVal bv_strEstimationNo As String, _
                                   ByVal bv_strActivity As String, _
                                   ByVal bv_strAction As String, _
                                   ByVal bv_datActionDate As DateTime, _
                                   ByVal bv_stroldValue As String, _
                                   ByVal bv_strNewValue As String, _
                                   ByVal bv_strReason As String, _
                                   ByVal bv_strModifiedBy As String, _
                                   ByVal bv_intDepotId As Int32, _
                                   ByRef br_objTransaction As Transactions) As Long
        Try
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._AUDIT_LOG).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._AUDIT_LOG, br_objTransaction)
                .Item(CommonUIData.ADT_LG_ID) = intMax
                If bv_strEquipmentNo <> Nothing Then
                    .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                Else
                    .Item(CommonUIData.EQPMNT_NO) = DBNull.Value
                End If

                .Item(CommonUIData.RFRNC_NO) = bv_strEstimationNo
                If bv_strActivity <> Nothing Then
                    .Item(CommonUIData.ACTVTY_NAM) = bv_strActivity
                Else
                    .Item(CommonUIData.ACTVTY_NAM) = DBNull.Value
                End If
                If bv_strAction <> Nothing Then
                    .Item(CommonUIData.ACTN_VC) = bv_strAction
                Else
                    .Item(CommonUIData.ACTN_VC) = DBNull.Value
                End If
                If bv_datActionDate <> Nothing Then
                    .Item(CommonUIData.ACTN_DT) = bv_datActionDate
                Else
                    .Item(CommonUIData.ACTN_DT) = DBNull.Value
                End If
                If bv_stroldValue <> Nothing Then
                    .Item(CommonUIData.OLD_VL) = bv_stroldValue
                Else
                    .Item(CommonUIData.OLD_VL) = DBNull.Value
                End If
                If bv_strNewValue <> Nothing Then
                    .Item(CommonUIData.NEW_VL) = bv_strNewValue
                Else
                    .Item(CommonUIData.NEW_VL) = DBNull.Value
                End If
                If bv_strReason <> Nothing Then
                    .Item(CommonUIData.RSN_VC) = bv_strReason
                Else
                    .Item(CommonUIData.RSN_VC) = DBNull.Value
                End If
                'If bv_strHeaderName <> Nothing Then
                '    .Item(RepairInvoiceUpdateData.HDR_NM) = bv_strHeaderName
                'Else
                '    .Item(RepairInvoiceUpdateData.HDR_NM) = DBNull.Value
                'End If
                .Item(RepairInvoiceUpdateData.MDFD_BY) = bv_strModifiedBy
                .Item(RepairInvoiceUpdateData.DPT_ID) = bv_intDepotId
            End With
            objData.InsertRow(dr, Audit_LogInsertQuery, br_objTransaction)
            dr = Nothing
            CreateAuditLog = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "UpdateTransportationStatusId() "
    Public Function UpdateTransportationStatusId(ByVal bv_i64TransportationId As Int64, _
                                                 ByRef br_objTransaction As Transactions)
        Try
            Dim dr As DataRow
            Dim ds As New CommonUIDataSet
            objData = New DataObjects()
            dr = ds.Tables(TransportationData._TRANSPORTATION).NewRow()
            With dr
                .Item(TransportationData.TRNSPRTTN_ID) = bv_i64TransportationId
            End With
            UpdateTransportationStatusId = objData.UpdateRow(dr, TransportationStatusUpdateQuery, br_objTransaction)
            dr = Nothing
        Catch ex As Exception
            Throw ex
        End Try
    End Function


#End Region

#Region "GetRentalReport() "
    Public Function GetRentalReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtRental As New DataTable
            objData = New DataObjects(String.Concat(VM_RENTALSelectQuery, bv_strWhere))
            objData.Fill(dtRental)
            Return dtRental
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetRentalDetailReport() "
    Public Function GetRentalDetailReport(ByVal bv_strOnHireDate As String, _
                                          ByVal bv_strOffHireDate As String, _
                                          ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtRental As New DataTable
            Dim strQuery As String = VM_RENTALDetailSelectQuery.Replace("@ON_HR_DT", bv_strOnHireDate)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OFF_HR_DT", bv_strOffHireDate), bv_strWhere))
            objData.Fill(dtRental)
            Return dtRental
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetRentalKPIDetailReport() "
    Public Function GetRentalKPIDetailReport(ByVal bv_strOffHireDateFrom As String, _
                                             ByVal bv_strOffHireDateTo As String, _
                                             ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtRental As New DataTable
            Dim strQuery As String = VM_RENTALKPIDetailSelectQuery.Replace("@OFF_HR_DT", bv_strOffHireDateFrom)
            objData = New DataObjects(String.Concat(strQuery.Replace("@OFF_HR_DT", bv_strOffHireDateTo)), bv_strWhere)
            objData.Fill(dtRental)
            Return dtRental
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetRentalKPIReport() "
    Public Function GetRentalKPIReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtRental As New DataTable
            objData = New DataObjects(String.Concat(VM_KPI_RENTALSelectQuery, bv_strWhere))
            objData.Fill(dtRental)
            Return dtRental
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceRentalReport() "
    Public Function GetFinanceRentalReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceRental As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_RENTALSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceRental)
            Return dtFinanceRental
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinancePendingInvoiceRegisterTransport() "
    Public Function GetFinancePendingInvoiceRegisterTransport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtPendingInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_TRANSPORTATION_PENDING_INV_REGSITERSelectQuery, bv_strWhere))
            objData.Fill(dtPendingInvoiceRegister)
            Return dtPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinancePendingInvoiceRegisterOnHireOffHire() "
    Public Function GetFinancePendingInvoiceRegisterOnHireOffHire(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtPendingInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_ONHIREOFFHIRE_PENDING_INV_REGSITERSelectQuery, bv_strWhere))
            objData.Fill(dtPendingInvoiceRegister)
            Return dtPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinancePendingInvoiceRegisterRentalCharge() "
    Public Function GetFinancePendingInvoiceRegisterRentalCharge(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtPendingInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_RENTALCHARGE_PENDING_INV_REGSITERSelectQuery, bv_strWhere))
            objData.Fill(dtPendingInvoiceRegister)
            Return dtPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinancePendingInvoiceRegisterStorageCharge() "
    Public Function GetFinancePendingInvoiceRegisterStorageCharge(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtPendingInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_STORAGECHARGE_PENDING_INV_REGSITERSelectQuery, bv_strWhere))
            objData.Fill(dtPendingInvoiceRegister)
            Return dtPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetFinanceHandlingAndStorageReport() "
    Public Function GetFinanceHandlingAndStorageReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceHandlingAndStorage As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_HandlingAndStorageSelectQuery, bv_strWhere))
            objData.Fill(dtFinanceHandlingAndStorage)
            Return dtFinanceHandlingAndStorage
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetEquipmentInformation() TABLE NAME:Equipment_Information"
    'CR- 003 [REMARKS IN STATUS,EQUIPMENT_HISTORY]
    Public Function GetEquipmentInformation(ByVal bv_strEquipmentNo As String, _
                                            ByVal bv_intDepotID As Integer, _
                                            ByRef br_objTransaction As Transactions) As String
        Try
            Dim hshparameters As New Hashtable
            Dim dtEquipmentInformation As New DataTable
            Dim strEquipmentRemarks As String = String.Empty
            hshparameters.Add(CommonUIData.EQPMNT_NO, bv_strEquipmentNo)
            hshparameters.Add(CommonUIData.DPT_ID, bv_intDepotID)
            objData = New DataObjects(V_Equipment_InformationSelectQuery, hshparameters)
            objData.Fill(dtEquipmentInformation, br_objTransaction)
            If dtEquipmentInformation.Rows.Count > 0 AndAlso Not IsDBNull(dtEquipmentInformation.Rows(0).Item(EquipmentInformationData.RMRKS_VC)) Then
                strEquipmentRemarks = dtEquipmentInformation.Rows(0).Item(EquipmentInformationData.RMRKS_VC)
            End If
            Return strEquipmentRemarks
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "UpdateTrackingEIRemarks() Table Name: TRACKING"
    Public Function UpdateTrackingEIRemarks(ByVal bv_strEquipmentNo As String, _
                                            ByVal bv_strGateinTransactionNo As String, _
                                            ByVal bv_strActivityName As String, _
                                            ByVal bv_strEIRemarks As String, _
                                            ByVal bv_intDepotId As Int32, _
                                            ByVal bv_strModifiedBy As String, _
                                            ByVal bv_datModifiedDate As DateTime, _
                                            ByRef br_objTransactinon As Transactions) As Boolean
        Try
            Dim dr As DataRow
            objData = New DataObjects()
            dr = dsCommon.Tables(CommonUIData._TRACKING).NewRow()
            With dr
                .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                If bv_strGateinTransactionNo <> Nothing Then
                    .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateinTransactionNo
                Else
                    .Item(CommonUIData.GI_TRNSCTN_NO) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_intDepotId
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                If bv_strEIRemarks <> Nothing Then
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = bv_strEIRemarks
                Else
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = DBNull.Value
                End If
                .Item(CommonUIData.MDFD_BY) = bv_strModifiedBy
                .Item(CommonUIData.MDFD_DT) = bv_datModifiedDate
            End With
            UpdateTrackingEIRemarks = objData.UpdateRow(dr, TrackingUpdateEquipmentInformationRemarksQuery, br_objTransactinon)
            dr = Nothing
            Return True
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "FormatCode"
    Private Shared Function ProductFormatCode(ByVal bv_i64IdentityValue As Int64) As String
        Try
            If bv_i64IdentityValue > 0 And bv_i64IdentityValue < 10 Then
                Return String.Concat("00", bv_i64IdentityValue)
            ElseIf bv_i64IdentityValue >= 10 And bv_i64IdentityValue < 100 Then
                Return String.Concat("0", bv_i64IdentityValue)
            ElseIf bv_i64IdentityValue >= 100 Then
                Return bv_i64IdentityValue
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "getIdentityValue()"
    Public Function getIdentityValue(ByVal bv_strTableName As String, _
                                     ByVal bv_strSelectColumn As String, _
                                     ByVal bv_strOrderByColumn As String, _
                                     ByVal bv_strOrder As String, _
                                     ByVal bv_blnFormatValue As Boolean, _
                                     ByVal bv_intIncrmentValue As Int32) As String
        Try
            Dim objData As DataObjects
            Dim intIdentityValue As Int64 = 0
            Dim strValue As String = String.Empty
            Dim strQuery As String = IdentitySelectQryByTable.Replace("@SELECT_COLUMN", bv_strSelectColumn)
            strQuery = strQuery.Replace("@TABLE_NAME", bv_strTableName)
            strQuery = strQuery.Replace("@ORDER_COLUMN", bv_strOrderByColumn)
            strQuery = strQuery.Replace("@ORDER", bv_strOrder)
            objData = New DataObjects(strQuery)
            intIdentityValue = objData.ExecuteScalar()
            intIdentityValue = intIdentityValue + bv_intIncrmentValue
            If bv_blnFormatValue Then
                strValue = ProductFormatCode(intIdentityValue)
            Else
                strValue = CStr(intIdentityValue)
            End If
            Return strValue
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinancePendingInvoiceRegisterRepairReport() "
    Public Function GetFinancePendingInvoiceRegisterRepairReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtPendingInvoiceRegister As New DataTable
            objData = New DataObjects(String.Concat(VM_PENDING_INVOICE_REGISTERSelectQuery, bv_strWhere))
            objData.Fill(dtPendingInvoiceRegister)
            Return dtPendingInvoiceRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetEquipment_Status"
    Public Function GetEquipment_Status(ByVal bv_strEquipmentNo As String, ByVal bv_strDepotID As Integer) As String
        Try
            Dim hshparameters As New Hashtable
            hshparameters.Add(GateinData.EQPMNT_NO, bv_strEquipmentNo)
            hshparameters.Add(GateinData.DPT_ID, bv_strDepotID)
            objData = New DataObjects(Equipment_StatusSelectQueryByEquipmentNo, hshparameters)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetActivitySubmitSelect()"
    Private Function GetActivitySubmitSelect(ByVal bv_intActivityId As Integer) As DataTable
        Try
            Dim dtActivitySubmit As New DataTable
            objData = New DataObjects(Activity_SubmitSelectQuery, CommonUIData.ACTVTY_ID, bv_intActivityId)
            objData.Fill(dtActivitySubmit)
            Return dtActivitySubmit
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetActivitySubmitSelect()"
    Private Function GetActivitySubmitSelect(ByVal bv_intActivityId As Integer, _
                                             ByRef br_objTrans As Transactions) As DataTable
        Try
            Dim dtActivitySubmit As New DataTable
            objData = New DataObjects(Activity_SubmitSelectQuery, CommonUIData.ACTVTY_ID, bv_intActivityId)
            objData.Fill(dtActivitySubmit, br_objTrans)
            Return dtActivitySubmit
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetActivitySubmit()"
    Public Function GetActivitySubmit(ByVal bv_intActivityId As Integer, _
                                      ByVal bv_drActivitySubmit As DataRow, _
                                      ByVal bv_blnIsTransaction As Boolean, _
                                      Optional ByRef br_objTrans As Transactions = Nothing) As Boolean
        Try
            Dim strBaseQuery As String = String.Empty
            Dim dtActivitySubmit As New DataTable
            Dim blnSubmit As Boolean = False
            If bv_blnIsTransaction Then
                dtActivitySubmit = GetActivitySubmitSelect(bv_intActivityId, br_objTrans)
            Else
                dtActivitySubmit = GetActivitySubmitSelect(bv_intActivityId)
            End If

            For Each drActivitySubmit As DataRow In dtActivitySubmit.Rows
                Dim strPrimaryKey As String = String.Empty
                Dim sbrWhereCondition As New StringBuilder
                Dim strSplitCondition() As String = Nothing
                Dim strCondition As String = String.Empty
                Dim strOrderBy As String = String.Empty
                Dim strSelectQuery As String = "SELECT "
                Dim dt As New DataTable

                If Not IsDBNull(drActivitySubmit.Item(CommonUIData.ORDR_BY)) Then
                    strOrderBy = (CStr(drActivitySubmit.Item(CommonUIData.ORDR_BY)))
                End If
                strCondition = CStr(drActivitySubmit.Item(CommonUIData.FLTR_CNDTN))
                strSplitCondition = strCondition.Split(CChar(","))
                For i = 0 To strSplitCondition.Length - 1
                    If sbrWhereCondition.Length > 0 Then
                        sbrWhereCondition.Append(" AND ")
                    End If
                    If strSplitCondition(i).Contains("=") OrElse strSplitCondition(i).Contains("<>") Then
                        sbrWhereCondition.Append(Trim(strSplitCondition(i)))
                    Else
                        sbrWhereCondition.Append(String.Concat(Trim(strSplitCondition(i)), "='", bv_drActivitySubmit.Item(Trim(strSplitCondition(i))), "'"))
                    End If
                Next
                If bv_blnIsTransaction Then
                    strPrimaryKey = GetPrimaryKey(CStr(drActivitySubmit.Item(CommonUIData.TBL_NM)), br_objTrans)
                Else
                    strPrimaryKey = GetPrimaryKey(CStr(drActivitySubmit.Item(CommonUIData.TBL_NM)))
                End If
                If strOrderBy.Length > 0 Then
                    strSelectQuery = String.Concat(strSelectQuery, " COUNT(", strPrimaryKey, ") AS ", strPrimaryKey, " FROM ", CStr(drActivitySubmit.Item(CommonUIData.TBL_NM)), " WHERE ", sbrWhereCondition, " ORDER BY ", strOrderBy)
                Else
                    strSelectQuery = String.Concat(strSelectQuery, " COUNT(", strPrimaryKey, ") AS ", strPrimaryKey, " FROM ", CStr(drActivitySubmit.Item(CommonUIData.TBL_NM)), " WHERE ", sbrWhereCondition)
                End If
                objData = New DataObjects(strSelectQuery)
                If bv_blnIsTransaction Then
                    objData.Fill(dt, br_objTrans)
                Else
                    objData.Fill(dt)
                End If

                If dt.Rows(0).Item(strPrimaryKey) > 0 Then
                    blnSubmit = True
                    Exit For
                Else
                    blnSubmit = False
                End If
            Next
            Return blnSubmit
        Catch ex As Exception
            Throw ex
            Return False
        End Try
    End Function
#End Region

#Region "GetPrimaryKey()"
    Private Function GetPrimaryKey(ByVal bv_strTableName As String, _
                                   ByRef br_objTrans As Transactions) As String
        Try
            objData = New DataObjects(GetPrimaryKeySelectQuery, CommonUIData.TABLE_NAME, bv_strTableName)
            Return objData.ExecuteScalar(br_objTrans)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetPrimaryKey()"
    Private Function GetPrimaryKey(ByVal bv_strTableName As String) As String
        Try
            objData = New DataObjects(GetPrimaryKeySelectQuery, CommonUIData.TABLE_NAME, bv_strTableName)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "validateFinalizedInvoiceActivityWise() "
    Public Function validateFinalizedInvoiceActivityWise(ByVal bv_strQuery As String) As Int32
        Try
            objData = New DataObjects(bv_strQuery)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetBllngTilDt"
    Public Function GetBllngTilDt(ByVal bv_strEqupmntNo As String, ByVal bv_strReferenceNo As String) As String
        Try
            Dim hshparameters As New Hashtable
            hshparameters.Add(CommonUIData.EQPMNT_NO, bv_strEqupmntNo)
            hshparameters.Add(CommonUIData.RNTL_RFRNC_NO, bv_strReferenceNo)
            objData = New DataObjects("SELECT BLLNG_TLL_DT FROM RENTAL_CHARGE WHERE EQPMNT_NO=@EQPMNT_NO AND RNTL_RFRNC_NO = @RNTL_RFRNC_NO", hshparameters)
            Return objData.ExecuteScalar()
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "pub_GetCleaningMethodDetail"
    Public Function pub_GetCleaningMethodDetail(ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            objData = New DataObjects(CleaningMethodDetailSelectQuery, CommonUIData.DPT_ID, bv_intDepotID)
            objData.Fill(CType(ds, DataSet), CommonUIData._V_CLEANING_METHOD_DETAIL)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "pub_GetCleaningMethodTypes"
    Public Function pub_GetCleaningMethodTypes(ByVal bv_intDepotID As Integer) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            objData = New DataObjects(CleaningMethodDistictDetailSelectQuery, CommonUIData.DPT_ID, bv_intDepotID)
            objData.Fill(CType(ds, DataSet), CommonUIData._V_CLEANING_METHOD_DETAIL)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "pub_GetCleaningTypes"
    Public Function pub_GetCleaningTypes(ByVal bv_strquery As String) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            objData = New DataObjects(bv_strquery)
            objData.Fill(CType(ds, DataSet), CommonUIData._CLEANING_TYPE)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

    'UIG Fix
#Region "GetTableSchema() TABLE NAME:CODE_MASTER"

    Public Function GetTableSchema(ByVal bv_strtablename As String) As DataTable
        Try
            Dim dt As New DataTable
            Dim strQry As String
            Dim htblParm As New Hashtable
            strQry = String.Concat("SELECT * FROM ", bv_strtablename, "")
            objData = New DataObjects(strQry)
            objData.Fill(dt)
            Return dt
        Catch ex As Exception
            Throw ex.InnerException
        End Try
    End Function

#End Region
#Region "ExtractConsontant"
    Public Function ExtractConsontant(ByVal inputString As String, ByVal includeY As Boolean) As String
        Try
            If Not inputString = "" Then
                Dim charstart As Char
                Dim pattern As String = If(includeY, "[aeiouyAEIOUY]", "[aeiouAEIOU]")
                inputString = Regex.Replace(inputString.Trim(), "((^[a-z]+)|([A-Z]{1}[a-z]+)|([A-Z]+(?=([A-Z][a-z])|($))))", "$1 ").Trim()
                Dim strarray As String() = inputString.Split(" ")
                If strarray.Length = 1 Then
                    Dim strSplit As String() = strarray(0).Split("_")
                    If strSplit.Length = 1 Then
                        charstart = inputString(0)
                        inputString = inputString.Substring(1, inputString.Length - 1)
                        Return String.Concat(charstart.ToString, System.Text.RegularExpressions.Regex.Replace(inputString, pattern, String.Empty).Replace(" ", String.Empty))
                    Else
                        Dim strFirst As String = strSplit(0)
                        Dim strLast As String = strSplit(1)
                        Dim start As Char
                        Dim endChar As Char
                        start = strFirst(0)
                        endChar = strLast(0)
                        strFirst = strFirst.Substring(1, strFirst.Length - 1)
                        strLast = strLast.Substring(1, strLast.Length - 1)
                        Dim strFirstPart As String = String.Concat(start, System.Text.RegularExpressions.Regex.Replace(strFirst, pattern, String.Empty).Replace(" ", String.Empty))
                        Dim strSecondPart As String = String.Concat(endChar, System.Text.RegularExpressions.Regex.Replace(strLast, pattern, String.Empty).Replace(" ", String.Empty))
                        Return String.Concat(strFirstPart, "_", strSecondPart)
                    End If
                Else
                    inputString = ""
                    For i = 0 To strarray.Length - 1
                        Dim bolFormated = True
                        Dim strng = strarray(i)
                        If Not strng = "" Then
                            If strng.ToUpper = "NAME" Or strng.ToUpper = "NO" Then
                                If strng.ToUpper = "NAME" Then
                                    inputString = String.Concat(inputString, "NAM")
                                    bolFormated = False
                                Else
                                    inputString = String.Concat(inputString, "NO")
                                    bolFormated = False
                                End If
                            End If
                            If bolFormated Then
                                charstart = strng(0)
                                strng = strng.Substring(1, strng.Length - 1)
                                Dim res As String = System.Text.RegularExpressions.Regex.Replace(strng, pattern, String.Empty).Replace(" ", String.Empty)
                                If i = strarray.Length - 1 Then
                                    inputString = String.Concat(inputString, charstart, res)
                                Else
                                    inputString = String.Concat(inputString, charstart, res, "_")
                                End If
                            Else
                                If Not i = strarray.Length - 1 Then
                                    inputString = String.Concat(inputString, "_")
                                End If
                            End If
                        End If
                    Next
                    If inputString.ToUpper.IndexOf("DSCRPTN") > 0 Or inputString.ToUpper.IndexOf("RMRKS") > 0 Then
                        inputString = String.Concat(inputString, "_VC")
                    End If
                    Return inputString
                End If
            Else
                Return String.Empty
            End If
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region



    'Cleaning & Inspection - Split

#Region "Cleaning Inspection - Split"

#Region "Cleaning - Operations"

    Public Function CreateTracking_Clean(ByVal bv_i64CustomerID As Int64, _
                                ByVal bv_strEquipmentNo As String, _
                                ByVal bv_strActivityName As String, _
                                ByVal bv_i64Status As Int64, _
                                ByVal bv_strActivityNo As String, _
                                ByVal bv_strRemarks As String, _
                                ByVal bv_strYardLocation As String, _
                                ByVal bv_strGateInTransactionNo As String, _
                                ByVal bv_datLastCleaningDate As DateTime, _
                                ByVal bv_strCreatedBy As String, _
                                ByVal bv_datCreatedDate As DateTime, _
                                ByVal bv_strModifieddBy As String, _
                                ByVal bv_datModifiedDate As DateTime, _
                                ByVal bv_strCanceledBy As String, _
                                ByVal bv_datCanceledDate As DateTime, _
                                ByVal bv_strADTRemarks As String, _
                                ByVal bv_i32DepotId As Int32, _
                                ByVal bv_intRentalCustomerID As Int32, _
                                ByVal bv_strRentalRefNo As String, _
                                ByVal bv_strEquipmentInfoRemarks As String, _
                                ByVal bv_blnAdditionalCleaningFlag As Boolean, _
                                ByRef br_objTrans As Transactions) As Long
        Try
            Dim ds As New CommonUIDataSet
            Dim dr As DataRow
            Dim intMax As Long
            objData = New DataObjects()
            dr = ds.Tables(CommonUIData._TRACKING).NewRow()
            With dr
                intMax = CommonUIs.GetIdentityValue(CommonUIData._TRACKING, br_objTrans)
                .Item(CommonUIData.TRCKNG_ID) = intMax
                .Item(CommonUIData.CSTMR_ID) = bv_i64CustomerID
                .Item(CommonUIData.EQPMNT_NO) = bv_strEquipmentNo
                .Item(CommonUIData.ACTVTY_NAM) = bv_strActivityName
                If bv_i64Status <> 0 Then
                    .Item(CommonUIData.EQPMNT_STTS_ID) = bv_i64Status
                Else
                    .Item(CommonUIData.EQPMNT_STTS_ID) = DBNull.Value
                End If
                .Item(CommonUIData.ACTVTY_NO) = bv_strActivityNo
                If bv_strRemarks <> Nothing Then
                    .Item(CommonUIData.ACTVTY_RMRKS) = bv_strRemarks
                Else
                    .Item(CommonUIData.ACTVTY_RMRKS) = DBNull.Value
                End If
                If bv_strYardLocation <> Nothing Then
                    .Item(CommonUIData.YRD_LCTN) = bv_strYardLocation
                Else
                    .Item(CommonUIData.YRD_LCTN) = DBNull.Value
                End If
                .Item(CommonUIData.GI_TRNSCTN_NO) = bv_strGateInTransactionNo

                If bv_datLastCleaningDate <> Nothing Then
                    .Item(CommonUIData.ACTVTY_DT) = bv_datLastCleaningDate
                Else
                    .Item(CommonUIData.ACTVTY_DT) = DBNull.Value
                End If
                .Item(CommonUIData.CRTD_BY) = bv_strCreatedBy
                .Item(CommonUIData.CRTD_DT) = bv_datCreatedDate
                .Item(CommonUIData.MDFD_BY) = bv_strModifieddBy
                .Item(CommonUIData.MDFD_DT) = bv_datModifiedDate
                If bv_strCanceledBy <> Nothing Then
                    .Item(CommonUIData.CNCLD_BY) = bv_strCanceledBy
                Else
                    .Item(CommonUIData.CNCLD_BY) = DBNull.Value
                End If
                If bv_datCanceledDate <> Nothing Then
                    .Item(CommonUIData.CNCLD_DT) = bv_datCanceledDate
                Else
                    .Item(CommonUIData.CNCLD_DT) = DBNull.Value
                End If
                If bv_strADTRemarks <> Nothing Then
                    .Item(CommonUIData.ADT_RMRKS) = bv_strADTRemarks
                Else
                    .Item(CommonUIData.ADT_RMRKS) = DBNull.Value
                End If
                .Item(CommonUIData.DPT_ID) = bv_i32DepotId
                If bv_strRentalRefNo <> Nothing Then
                    .Item(CommonUIData.RNTL_RFRNC_NO) = bv_strRentalRefNo
                Else
                    .Item(CommonUIData.RNTL_RFRNC_NO) = DBNull.Value
                End If
                If bv_intRentalCustomerID <> 0 Then
                    .Item(CommonUIData.RNTL_CSTMR_ID) = bv_intRentalCustomerID
                Else
                    .Item(CommonUIData.RNTL_CSTMR_ID) = DBNull.Value
                End If
                If bv_strEquipmentInfoRemarks <> Nothing Then
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = bv_strEquipmentInfoRemarks
                Else
                    .Item(CommonUIData.EQPMNT_INFRMTN_RMRKS_VC) = DBNull.Value
                End If
                '.Item(CommonUIData.ADDTNL_CLNNG_BT) = bv_blnAdditionalCleaningFlag
                .Item(CommonUIData.ADDTNL_CLNNG_BT) = False
            End With

            objData.InsertRow(dr, TrackingInsertQuery_Clean, br_objTrans)
            dr = Nothing
            CreateTracking_Clean = intMax
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "Inspection - Operations"

#End Region


#End Region

    'Invoice cancel

#Region "pub_GetInvoiceCancelReport() "
    Public Function pub_GetInvoiceCancelReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtInvoiceCancel As New DataTable
            objData = New DataObjects(String.Concat(pub_GetInvoiceCancelReport_SelectQuery, bv_strWhere, "  ORDER BY INVC_CNCL_ID DESC"))
            objData.Fill(dtInvoiceCancel)
            Return dtInvoiceCancel
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Public Function pub_GetInvoiceCancelDetailReport(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtInvoiceCancel As New DataTable
            objData = New DataObjects(String.Concat(pub_GetInvoiceCancelDetailReport_SelectQuery, bv_strWhere))
            objData.Fill(dtInvoiceCancel)
            Return dtInvoiceCancel
        Catch ex As Exception
            Throw ex
        End Try
    End Function

#End Region

#Region "GetHeadQuarterID"
    Public Function GetHeadQuarterID() As String
        Try
            Dim strHeadQuarterID As String = String.Empty
            Dim dsDepot As New DepotDataSet
            Dim objDepot As New Depots
            Dim drDepot As DataRow()
            dsDepot = objDepot.GetAllDepot()
            drDepot = dsDepot.Tables(DepotData._V_DEPOT).Select(String.Concat(DepotData.ORGNZTN_TYP_CD, " = 'HQ' "))
            If drDepot.Length > 0 Then
                For Each dr As DataRow In drDepot
                    strHeadQuarterID = CStr(dr.Item(DepotData.DPT_ID))
                Next
            End If
            Return strHeadQuarterID
        Catch ex As Exception

        End Try
    End Function
#End Region

#Region "GetMultiLocationSupportConfig"
    Public Function GetMultiLocationSupportConfig() As String
        Try
            Dim strKeyValue As String = ""
            Dim objCommonUIs As New CommonUIs
            Dim dsConfig As New DataSet
            Dim intHQId As Int64 = CLng(GetHeadQuarterID())
            dsConfig = objCommonUIs.GetConfigByKeyName("070", intHQId)
            If dsConfig.Tables(CommonUIData._CONFIG).Rows.Count > 0 Then
                strKeyValue = DecryptString(dsConfig.Tables(CommonUIData._CONFIG).Rows(0).Item(CommonUIData.KY_VL).ToString)
            End If
            Return strKeyValue
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "DecryptString"
    Public Function DecryptString(Message As String) As String
        Dim Results As Byte()
        Dim UTF8 As New System.Text.UTF8Encoding()
        Dim HashProvider As New MD5CryptoServiceProvider()
        Dim TDESAlgorithm As New TripleDESCryptoServiceProvider()
        Dim pvt_strKeyPhrase As String
        Try
            'pvt_strKeyPhrase = IO.File.GetLastWriteTime(String.Concat(AppDomain.CurrentDomain.BaseDirectory, ConfigurationManager.AppSettings("KeyFileName"))).ToString("yyMMddHHHmmss")
            pvt_strKeyPhrase = "IIC"
            Dim TDESKey As Byte() = HashProvider.ComputeHash(UTF8.GetBytes(pvt_strKeyPhrase))
            TDESAlgorithm.Key = TDESKey
            TDESAlgorithm.Mode = CipherMode.ECB
            TDESAlgorithm.Padding = PaddingMode.PKCS7
            Dim DataToDecrypt As Byte() = Convert.FromBase64String(Message)
            Dim Decryptor As ICryptoTransform = TDESAlgorithm.CreateDecryptor()
            Results = Decryptor.TransformFinalBlock(DataToDecrypt, 0, DataToDecrypt.Length)
        Catch ex As Exception
            Throw ex
        Finally
            TDESAlgorithm.Clear()
            HashProvider.Clear()
        End Try
        Return UTF8.GetString(Results)
    End Function
#End Region

    'get Exchange Rate
#Region "GetExchangeRateForMultilocation"
    Public Function GetExchangeRateForMultilocation(ByVal bv_intTO_CRRNCY_ID As Int64, ByVal bv_intFRM_CRRNCY_ID As Int64) As String
        Try
            Dim ds As New ConfigDataSet
            Dim hshConfiguration As New Hashtable()
            hshConfiguration.Add(CommonUIData.TO_CRRNCY_ID, bv_intTO_CRRNCY_ID)
            hshConfiguration.Add(CommonUIData.DPT_ID, bv_intFRM_CRRNCY_ID)
            hshConfiguration.Add(CommonUIData.ACTV_BT, 1)
            objData = New DataObjects(SelectExchangeRateQuery, hshConfiguration)
            objData.Fill(CType(ds, DataSet), CommonUIData._V_CUSTOMER)
            If ds.Tables(CommonUIData._V_CUSTOMER).Rows.Count > 0 Then
                Return ds.Tables(CommonUIData._V_CUSTOMER).Rows(0).Item("EXCHNG_RT_PR_UNT_NC")
            Else
                Return Nothing
            End If

            ' Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "pub_GetDepotDetail"
    Public Function pub_GetDepotDetail(ByVal bv_intDepotID As String) As CommonUIDataSet
        Try
            Dim ds As New CommonUIDataSet
            Dim strWhere As String = String.Concat(" WHERE DPT_ID IN (", bv_intDepotID, ")")
            objData = New DataObjects(String.Concat(SelectDepotCodeQuery, strWhere))
            objData.Fill(CType(ds, DataSet), CommonUIData._DEPOT)
            Return ds
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceDistinctCustomer() "
    Public Function GetFinanceDistinctCustomer(ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceDistinctCleaning As New DataTable
            objData = New DataObjects(String.Concat(VM_FINANCE_CLEANINGDistinctCustomerSelectQuery, bv_strWhere, " GROUP BY DPT_ID,DPT_CRRNCY_CD"))
            objData.Fill(dtFinanceDistinctCleaning)
            Return dtFinanceDistinctCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithoutSlab"
    Public Function GetCleaningChargeByCustomerIdWithoutSlab(ByVal bv_i64CustomerId As Int64, _
                                                             ByVal bv_datPeriodFrom As DateTime, _
                                                             ByVal bv_datPeriodTo As DateTime, _
                                                             ByVal bv_i32DepotId As Int64, _
                                                             ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaning As New InvoiceGenerationDataSet
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            objData = New DataObjects(String.Concat(PendingInvoice_SelectQueryByCustomerIDWithoutSlab, bv_strWhere), hshparamters)
            objData.Fill(dtCleaning.Tables(InvoiceGenerationData._V_CLEANING_CHARGE))
            Return dtCleaning.Tables(InvoiceGenerationData._V_CLEANING_CHARGE)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetCleaningChargeByCustomerIdWithSlab"
    Public Function GetCleaningChargeByCustomerIdWithSlabEquipType(ByVal bv_dtCleaning As DataTable, _
                                                                   ByVal bv_i64CustomerId As Int64, _
                                                                   ByVal bv_datPeriodFrom As DateTime, _
                                                                   ByVal bv_datPeriodTo As DateTime, _
                                                                   ByVal bv_i32EquipTypeID As Int64, _
                                                                   ByVal bv_i32DepotId As Int64, _
                                                                   ByVal bv_strWhere As String) As DataTable
        Try
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(PendingInvoice_selectQueryByCustomerIDWithSlab, bv_strWhere), hshparamters)
            objData.Fill(bv_dtCleaning)
            Return bv_dtCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithSlab"
    Public Function GetCleaningChargeByCustomerIdAndPartyWithSlabEquipType(ByRef bv_dtInvcRegister As DataTable, _
                                                                          ByVal bv_i64ServcPartnerId As Int64, _
                                                                           ByVal bv_i64CustomerId As Int64, _
                                                             ByVal bv_datPeriodFrom As DateTime, _
                                                             ByVal bv_datPeriodTo As DateTime, _
                                                             ByVal bv_i32EquipTypeID As Integer, _
                                                             ByVal bv_i32DepotId As Int32, _
                                                             ByVal bv_strBillingFlag As String, _
                                                             ByVal bv_strWhere As String) As DataTable
        Try
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64ServcPartnerId)
            hshparamters.Add(InvoiceGenerationData.CSTMR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(CLEANING_CHARGESelectQueryByCustomerIDWithInvoicePartyWithSlab, bv_strBillingFlag, bv_strWhere), hshparamters)
            objData.Fill(bv_dtInvcRegister)
            Return bv_dtInvcRegister
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetDistinctEquipmentTypeByCustomerIDWithSlab"
    Public Function GetDistinctEquipmentTypeByCustomerIDWithSlab(ByVal bv_dtCleaning As DataTable, _
                                                                ByVal bv_i64CustomerId As Int64, _
                                                                 ByVal bv_datPeriodFrom As DateTime, _
                                                                 ByVal bv_datPeriodTo As DateTime, _
                                                                 ByVal bv_i32DepotId As Int32, _
                                                                 ByVal bv_strWhere As String) As DataTable
        Try
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            objData = New DataObjects(String.Concat(PendingInvoice_GetDistinctEquipType, bv_strWhere), hshparamters)
            objData.Fill(bv_dtCleaning)
            Return bv_dtCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningSlabRateByCustomerID"
    Public Function GetCleaningSlabRateByEquipTypeCustomerID(ByVal bv_i64CustomerID As Int64, _
                                                             ByVal bv_intEquipType As Int64, _
                                                             ByVal bv_UpToContainers As Int64) As DataTable
        Try
            Dim hshparamters As New Hashtable
            Dim dtCustomerCleaningTable As New DataTable
            hshparamters.Add(CustomerData.CSTMR_ID, bv_i64CustomerID)
            hshparamters.Add(CustomerData.UP_TO_CNTNRS, bv_UpToContainers)
            hshparamters.Add(CustomerData.EQPMNT_TYP_ID, bv_intEquipType)
            objData = New DataObjects(CleaingSlabFromCustomerByCustomerID.Replace("@WHERE", " AND UP_TO_CNTNRS >= @UP_TO_CNTNRS ORDER BY UP_TO_CNTNRS"), hshparamters)
            objData.Fill(dtCustomerCleaningTable)
            If dtCustomerCleaningTable.Rows.Count = 0 Then
                objData = New DataObjects(CleaingSlabFromCustomerByCustomerID.Replace("@WHERE", " ORDER BY UP_TO_CNTNRS DESC"), hshparamters)
                objData.Fill(dtCustomerCleaningTable)
            End If
            Return dtCustomerCleaningTable
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithoutSlabRevenue"
    Public Function GetCleaningChargeByCustomerIdWithoutSlabRevenue(ByVal bv_i64CustomerId As Int64, _
                                                             ByVal bv_datPeriodFrom As DateTime, _
                                                             ByVal bv_datPeriodTo As DateTime, _
                                                             ByVal bv_i32DepotId As Int64, _
                                                             ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaning As New InvoiceGenerationDataSet
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            objData = New DataObjects(String.Concat(RevenueInvoice_SelectQueryByCustomerIDWithoutSlab, bv_strWhere), hshparamters)
            objData.Fill(dtCleaning.Tables(InvoiceGenerationData._V_CLEANING_CHARGE))
            Return dtCleaning.Tables(InvoiceGenerationData._V_CLEANING_CHARGE)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region
#Region "GetCleaningChargeByCustomerIdWithSlabRevenue"
    Public Function GetCleaningChargeByCustomerIdWithSlabEquipTypeRevenue(ByVal bv_dtCleaning As DataTable, _
                                                                          ByVal bv_i64CustomerId As Int64, _
                                                                          ByVal bv_datPeriodFrom As DateTime, _
                                                                          ByVal bv_datPeriodTo As DateTime, _
                                                                          ByVal bv_i32EquipTypeID As Int64, _
                                                                          ByVal bv_i32DepotId As Int64, _
                                                             ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaning As DataTable = bv_dtCleaning
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(RevenueInvoice_selectQueryByCustomerIDWithSlab, bv_strWhere), hshparamters)
            objData.Fill(dtCleaning)
            Return dtCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region


#Region "GetCleaningChargeByCustomerIdWithSlabRevenue"
    Public Function GetCleaningChargeByCustomerIdAndPartyWithSlabEquipTypeRevenue(ByVal bv_dtCleaning As DataTable, _
                                                                                  ByVal bv_i64ServcPartnerId As Int64, _
                                                                          ByVal bv_i64CustomerId As Int64, _
                                                                          ByVal bv_datPeriodFrom As DateTime, _
                                                                          ByVal bv_datPeriodTo As DateTime, _
                                                                          ByVal bv_i32EquipTypeID As Int64, _
                                                                          ByVal bv_i32DepotId As Int64, _
                                                                          ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaning As DataTable = bv_dtCleaning
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64ServcPartnerId)
            hshparamters.Add(InvoiceGenerationData.CSTMR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(RevenueInvoice_selectQueryByInvocingPartyAndCustomerIDWithSlab, bv_strWhere), hshparamters)
            objData.Fill(dtCleaning)
            Return dtCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetDistinctEquipmentTypeByCustomerIDWithSlabRevenue"
    Public Function GetDistinctEquipmentTypeByCustomerIDWithSlabRevenue(ByVal bv_dtCleaning As DataTable, _
                                                                        ByVal bv_i64CustomerId As Int64, _
                                                                        ByVal bv_datPeriodFrom As DateTime, _
                                                                        ByVal bv_datPeriodTo As DateTime, _
                                                                        ByVal bv_i32DepotId As Int32, _
                                                                        ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtCleaning As New DataTable
            Dim hshparamters As New Hashtable
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add(InvoiceGenerationData.DPT_ID, bv_i32DepotId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            objData = New DataObjects(String.Concat(RevenueInvoice_GetDistinctEquipType, bv_strWhere), hshparamters)
            objData.Fill(dtCleaning)
            Return dtCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetFinanceCleaningReportbilledSlabRate()"
    Public Function GetFinanceCleaningReportbilledSlabRate(ByRef dtTempRevenueCleaning As DataTable, ByVal bv_strWhere As String) As DataTable
        Try
            Dim dtFinanceCleaning As DataTable = dtTempRevenueCleaning.Clone()
            objData = New DataObjects(String.Concat(VM_FINANCE_CLEANINGBilledSelectQuery, bv_strWhere, " AND BILLED='YES'"))
            objData.Fill(dtFinanceCleaning)
            Return dtFinanceCleaning
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithSlab"
    Public Function GetCleaningChargeCountByCustomerIdAndPartyWithSlabEquipType(ByRef bv_dtInvcRegister As DataTable, _
                                                                          ByVal bv_i64ServcPartnerId As Int64, _
                                                                           ByVal bv_i64CustomerId As Int64, _
                                                             ByVal bv_datPeriodFrom As DateTime, _
                                                             ByVal bv_datPeriodTo As DateTime, _
                                                             ByVal bv_i32EquipTypeID As Integer, _
                                                             ByVal bv_strBillingFlag As String, _
                                                             ByVal bv_strWhere As String) As Long
        Try
            Dim hshparamters As New Hashtable
            Dim lngEquipCount As Long
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64ServcPartnerId)
            hshparamters.Add(InvoiceGenerationData.CSTMR_ID, bv_i64CustomerId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(CLEANING_CHARGESelectCountQueryByCustomerIDWithInvoicePartyWithSlab, bv_strBillingFlag, bv_strWhere.Replace("WHERE", " AND ")), hshparamters)
            lngEquipCount = objData.ExecuteScalar()
            Return lngEquipCount
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithSlabRevenue"
    Public Function GetCleaningChargeCountByCustomerIdAndPartyWithSlabEquipTypeRevenue(ByVal bv_dtCleaning As DataTable, _
                                                                                  ByVal bv_i64ServcPartnerId As Int64, _
                                                                          ByVal bv_i64CustomerId As Int64, _
                                                                          ByVal bv_datPeriodFrom As DateTime, _
                                                                          ByVal bv_datPeriodTo As DateTime, _
                                                                          ByVal bv_i32EquipTypeID As Int64, _
                                                                          ByVal bv_strWhere As String) As Long
        Try
            Dim dtCleaning As DataTable = bv_dtCleaning
            Dim hshparamters As New Hashtable
            Dim lngEquipCount As Long
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64ServcPartnerId)
            hshparamters.Add(InvoiceGenerationData.CSTMR_ID, bv_i64CustomerId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(RevenueInvoice_selectCountQueryByInvocingPartyAndCustomerIDWithSlab, bv_strWhere.Replace("WHERE", " AND ")), hshparamters)
            lngEquipCount = objData.ExecuteScalar()
            Return lngEquipCount
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithSlabRevenue"
    Public Function GetCleaningChargeCountByCustomerIdWithSlabEquipTypeRevenue(ByVal bv_dtCleaning As DataTable, _
                                                                          ByVal bv_i64CustomerId As Int64, _
                                                                          ByVal bv_datPeriodFrom As DateTime, _
                                                                          ByVal bv_datPeriodTo As DateTime, _
                                                                          ByVal bv_i32EquipTypeID As Int64, _
                                                             ByVal bv_strWhere As String) As Long
        Try
            Dim dtCleaning As DataTable = bv_dtCleaning
            Dim hshparamters As New Hashtable
            Dim lngEquipCount As Long
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add("ORGNL_INSPCTD_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ORGNL_INSPCTD_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(RevenueInvoice_selectCountQueryByCustomerIDWithSlab, bv_strWhere.Replace("WHERE", " AND ")), hshparamters)
            lngEquipCount = objData.ExecuteScalar()
            Return lngEquipCount
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

#Region "GetCleaningChargeByCustomerIdWithSlab"
    Public Function GetCleaningChargeCountByCustomerIdWithSlabEquipType(ByVal bv_dtCleaning As DataTable, _
                                                                   ByVal bv_i64CustomerId As Int64, _
                                                                   ByVal bv_datPeriodFrom As DateTime, _
                                                                   ByVal bv_datPeriodTo As DateTime, _
                                                                   ByVal bv_i32EquipTypeID As Int64, _
                                                                   ByVal bv_strWhere As String) As Long
        Try
            Dim hshparamters As New Hashtable
            Dim lngEquipCount As Long
            hshparamters.Add(InvoiceGenerationData.SRVC_PRTNR_ID, bv_i64CustomerId)
            hshparamters.Add("ACTVTY_DT_FROM", bv_datPeriodFrom)
            hshparamters.Add("ACTVTY_DT_TO", bv_datPeriodTo)
            hshparamters.Add(InvoiceGenerationData.EQPMNT_TYP_ID, bv_i32EquipTypeID)
            objData = New DataObjects(String.Concat(PendingInvoice_selectCountQueryByCustomerIDWithSlab, bv_strWhere.Replace("WHERE", " AND ")), hshparamters)
            lngEquipCount = objData.ExecuteScalar()
            Return lngEquipCount
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

End Class